ActiveRecord/Compiler/src/CodeGenerator.h:39:14: performance:inconclusive: Technically the member function 'Poco::ActiveRecord::Compiler::CodeGenerator::propertyType' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 std::string propertyType(const Property& prop) const;
             ^
ActiveRecord/Compiler/src/CodeGenerator.cpp:90:28: note: Technically the member function 'Poco::ActiveRecord::Compiler::CodeGenerator::propertyType' can be static (but you may consider moving to unnamed namespace).
std::string CodeGenerator::propertyType(const Property& prop) const
                           ^
ActiveRecord/Compiler/src/CodeGenerator.h:39:14: note: Technically the member function 'Poco::ActiveRecord::Compiler::CodeGenerator::propertyType' can be static (but you may consider moving to unnamed namespace).
 std::string propertyType(const Property& prop) const;
             ^
ActiveRecord/Compiler/src/CodeGenerator.h:42:14: performance:inconclusive: Technically the member function 'Poco::ActiveRecord::Compiler::CodeGenerator::fullClassName' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 std::string fullClassName(const Class& clazz) const;
             ^
ActiveRecord/Compiler/src/CodeGenerator.cpp:152:28: note: Technically the member function 'Poco::ActiveRecord::Compiler::CodeGenerator::fullClassName' can be static (but you may consider moving to unnamed namespace).
std::string CodeGenerator::fullClassName(const Class& clazz) const
                           ^
ActiveRecord/Compiler/src/CodeGenerator.h:42:14: note: Technically the member function 'Poco::ActiveRecord::Compiler::CodeGenerator::fullClassName' can be static (but you may consider moving to unnamed namespace).
 std::string fullClassName(const Class& clazz) const;
             ^
ActiveRecord/Compiler/src/CodeGenerator.cpp:122:3: style: Consider using std::find_if algorithm instead of a raw loop. [useStlAlgorithm]
  {
  ^
ActiveRecord/Compiler/src/Compiler.cpp:110:6: style: Consider using std::any_of algorithm instead of a raw loop. [useStlAlgorithm]
     {
     ^
ActiveRecord/Compiler/src/Compiler.cpp:136:7: style: Consider using std::any_of algorithm instead of a raw loop. [useStlAlgorithm]
      {
      ^
ActiveRecord/Compiler/src/HeaderGenerator.h:48:14: performance:inconclusive: Technically the member function 'Poco::ActiveRecord::Compiler::HeaderGenerator::includeGuard' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 std::string includeGuard(const std::string& nameSpace, const std::string& name) const;
             ^
ActiveRecord/Compiler/src/HeaderGenerator.cpp:57:30: note: Technically the member function 'Poco::ActiveRecord::Compiler::HeaderGenerator::includeGuard' can be static (but you may consider moving to unnamed namespace).
std::string HeaderGenerator::includeGuard(const std::string& nameSpace, const std::string& name) const
                             ^
ActiveRecord/Compiler/src/HeaderGenerator.h:48:14: note: Technically the member function 'Poco::ActiveRecord::Compiler::HeaderGenerator::includeGuard' can be static (but you may consider moving to unnamed namespace).
 std::string includeGuard(const std::string& nameSpace, const std::string& name) const;
             ^
ActiveRecord/Compiler/src/ImplGenerator.h:44:18: performance:inconclusive: Technically the member function 'Poco::ActiveRecord::Compiler::ImplGenerator::keyProperty' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 const Property& keyProperty(const Class& clazz) const;
                 ^
ActiveRecord/Compiler/src/ImplGenerator.cpp:395:32: note: Technically the member function 'Poco::ActiveRecord::Compiler::ImplGenerator::keyProperty' can be static (but you may consider moving to unnamed namespace).
const Property& ImplGenerator::keyProperty(const Class& clazz) const
                               ^
ActiveRecord/Compiler/src/ImplGenerator.h:44:18: note: Technically the member function 'Poco::ActiveRecord::Compiler::ImplGenerator::keyProperty' can be static (but you may consider moving to unnamed namespace).
 const Property& keyProperty(const Class& clazz) const;
                 ^
ActiveRecord/Compiler/src/ImplGenerator.cpp:399:0: style: Consider using std::find_if algorithm instead of a raw loop. [useStlAlgorithm]
  if (p.name == clazz.key)
^
ActiveRecord/testsuite/src/ActiveRecordTest.h:24:2: style: Class 'ActiveRecordTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 ActiveRecordTest(const std::string& name);
 ^
ApacheConnector/src/ApacheRequestHandlerFactory.cpp:48:7: performance: Inefficient usage of string::find() in condition; string::starts_with() could be faster. [stlIfStrFind]
  if (uri.find(it->first) == 0 || it->first.find(uri) == 0)
      ^
ApacheConnector/src/ApacheRequestHandlerFactory.cpp:46:22: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
 for (; it != itEnd; it++)
                     ^
ApacheConnector/src/ApacheRequestHandlerFactory.cpp:103:22: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
 for (; it != itEnd; it++)
                     ^
CppParser/src/CppToken.cpp:535:9: style: Variable 'next' is reassigned a value before the old one has been used. [redundantAssignment]
   next = istr.peek();
        ^
CppParser/src/CppToken.cpp:534:9: note: next is assigned
   next = istr.get();
        ^
CppParser/src/CppToken.cpp:535:9: note: next is overwritten
   next = istr.peek();
        ^
CppParser/src/NameSpace.cpp:108:7: style: The scope of the variable 'currentNSInserted' can be reduced. [variableScope]
 bool currentNSInserted = true;
      ^
CppParser/src/Symbol.cpp:146:27: style: Array index 'eqStart' is used before limits check. [arrayIndexThenCheck]
  while (std::isspace(decl[eqStart]) && eqStart < decl.size()) ++eqStart;
                          ^
CppParser/src/Symbol.cpp:179:6: style: The scope of the variable 'nestedTemplateCount' can be reduced. [variableScope]
 int nestedTemplateCount = 0;
     ^
CppParser/src/Utility.cpp:109:13: warning: Possible dereference of an invalid iterator: it [derefInvalidIterator]
     while (*it != "class" && it != tok.end())
            ^
CppParser/src/Utility.cpp:193:22: style: Variable 'newPath' is assigned a value that is never used. [unreadVariable]
  std::string newPath(Environment::get("PATH"));
                     ^
CppParser/src/Utility.cpp:194:11: style: Variable 'newPath' is assigned a value that is never used. [unreadVariable]
  newPath += Path::pathSeparator();
          ^
CppParser/src/Utility.cpp:195:11: style: Variable 'newPath' is assigned a value that is never used. [unreadVariable]
  newPath += path;
          ^
CppParser/src/Variable.cpp:52:6: performance: Inefficient usage of string::find() in condition; string::starts_with() could be faster. [stlIfStrFind]
 if (tmp.find("const ") == 0)
     ^
CppParser/src/Variable.cpp:54:6: performance: Inefficient usage of string::find() in condition; string::starts_with() could be faster. [stlIfStrFind]
 if (tmp.find("const\t") == 0)
     ^
CppParser/testsuite/src/AttributesParserTest.h:24:2: style: Class 'AttributesParserTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 AttributesParserTest(const std::string& name);
 ^
CppParser/testsuite/src/CppParserTest.h:24:2: style: Class 'CppParserTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 CppParserTest(const std::string& name);
 ^
CppParser/testsuite/src/CppParserTest.cpp:53:2: style: Statements following return, break, continue, goto or throw will never be executed. [unreachableCode]
 NameSpace::SymbolTable st;
 ^
Crypto/src/CipherImpl.cpp:189:10: style: The comparison 'rc == 0' is always true. [knownConditionTrueFalse]
  if (rc == 0) throwError();
         ^
Crypto/src/CipherImpl.cpp:187:12: note: 'rc' is assigned value '0' here.
  int rc = 0;
           ^
Crypto/src/CipherImpl.cpp:189:10: note: The comparison 'rc == 0' is always true.
  if (rc == 0) throwError();
         ^
Crypto/src/CryptoException.cpp:26:1: error: There is an unknown macro here somewhere. Configuration is required. If POCO_IMPLEMENT_EXCEPTION is a macro then please configure it. [unknownMacro]
POCO_IMPLEMENT_EXCEPTION(CryptoException, Exception, "Crypto Exception")
^
Crypto/src/ECKeyImpl.cpp:151:6: style: The scope of the variable 'sz' can be reduced. [variableScope]
 int sz = -1;
     ^
Crypto/src/ECKeyImpl.cpp:151:9: style: Variable 'sz' is assigned a value that is never used. [unreadVariable]
 int sz = -1;
        ^
Crypto/src/ECKeyImpl.cpp:208:14: style: Unused variable: curveName [unusedVariable]
 std::string curveName;
             ^
Crypto/src/EVPCipherImpl.cpp:46:3: style: Class 'EVPPKeyContext' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  EVPPKeyContext(const EVP_PKEY* pEVP) : _pCtx(EVP_PKEY_CTX_new(const_cast<EVP_PKEY*>(pEVP), NULL))
  ^
Crypto/src/EVPCipherImpl.cpp:72:3: style: Class 'EVPEncryptImpl' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  EVPEncryptImpl(const EVP_PKEY* pEVP):
  ^
Crypto/src/EVPCipherImpl.cpp:188:3: style: Class 'EVPDecryptImpl' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  EVPDecryptImpl(const EVP_PKEY* pEVP):
  ^
Crypto/src/EVPCipherImpl.cpp:246:19: style: Variable 'outputLength' is assigned a value that is never used. [unreadVariable]
     outputLength -= outLen;
                  ^
Crypto/src/Envelope.cpp:36:0: information: Skipping configuration 'EVP_CIPHER_CTX_init' since the value of 'EVP_CIPHER_CTX_init' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 EVP_CIPHER_CTX_init(_pCtx);
^
Crypto/src/RSACipherImpl.cpp:283:18: style: Variable 'outputLength' is assigned a value that is never used. [unreadVariable]
    outputLength -= tmp;
                 ^
Crypto/src/RSAKeyImpl.cpp:104:9: style: Local variable 'rc' shadows outer variable [shadowVariable]
    int rc = BIO_reset(bio);
        ^
Crypto/src/RSAKeyImpl.cpp:98:7: note: Shadowed declaration
  int rc = BIO_read_filename(bio, publicKeyFile.c_str());
      ^
Crypto/src/RSAKeyImpl.cpp:104:9: note: Shadow variable
    int rc = BIO_reset(bio);
        ^
Crypto/testsuite/src/CryptoTest.h:29:2: style: Class 'CryptoTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 CryptoTest(const std::string& name);
 ^
Crypto/testsuite/src/CryptoTest.cpp:378:24: style: Variable 'issuerName' is assigned a value that is never used. [unreadVariable]
 std::string issuerName(cert.issuerName());
                       ^
Crypto/testsuite/src/RSATest.h:24:2: style: Class 'RSATest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 RSATest(const std::string& name);
 ^
Crypto/testsuite/src/ECTest.h:25:2: style: Class 'ECTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 ECTest(const std::string& name);
 ^
Crypto/testsuite/src/EVPTest.h:24:2: style: Class 'EVPTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 EVPTest(const std::string& name);
 ^
Crypto/testsuite/src/DigestEngineTest.h:24:2: style: Class 'DigestEngineTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 DigestEngineTest(const std::string& name);
 ^
Crypto/testsuite/src/PKCS12ContainerTest.h:26:2: style: Class 'PKCS12ContainerTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 PKCS12ContainerTest(const std::string& name);
 ^
Crypto/testsuite/src/EnvelopeTest.h:24:2: style: Class 'EnvelopeTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 EnvelopeTest(const std::string& name);
 ^
Crypto/testsuite/src/RSATest.cpp:142:21: style: Variable 'hexDig' is assigned a value that is never used. [unreadVariable]
 std::string hexDig = Poco::DigestEngine::digestToHex(sig);
                    ^
Crypto/testsuite/src/RSATest.cpp:163:21: style: Variable 'hexDig' is assigned a value that is never used. [unreadVariable]
 std::string hexDig = Poco::DigestEngine::digestToHex(sig);
                    ^
Crypto/testsuite/src/RSATest.cpp:185:21: style: Variable 'hexDig' is assigned a value that is never used. [unreadVariable]
 std::string hexDig = Poco::DigestEngine::digestToHex(sig);
                    ^
Data/MySQL/src/SessionImpl.cpp:28:42: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
  while ((from != to) && isspace(*from)) from++;
                                         ^
Data/MySQL/src/SessionImpl.cpp:30:46: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
  while ((from != to) && isspace(*(to - 1))) to--;
                                             ^
Data/MySQL/src/SessionImpl.cpp:141:0: information: Skipping configuration 'MYSQL_SECURE_AUTH' since the value of 'MYSQL_SECURE_AUTH' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  _handle.options(MYSQL_SECURE_AUTH, true);
^
Data/MySQL/src/SessionImpl.cpp:143:0: information: Skipping configuration 'MYSQL_SECURE_AUTH' since the value of 'MYSQL_SECURE_AUTH' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  _handle.options(MYSQL_SECURE_AUTH, false);
^
Data/MySQL/testsuite/src/MySQLTest.h:39:2: style: Class 'MySQLTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 MySQLTest(const std::string& name);
 ^
Data/MySQL/testsuite/src/MySQLTest.cpp:927:37: style: Local variable 'ex' shadows outer variable [shadowVariable]
  catch (ConnectionFailedException& ex)
                                    ^
Data/MySQL/testsuite/src/MySQLTest.cpp:918:36: note: Shadowed declaration
 catch (ConnectionFailedException& ex)
                                   ^
Data/MySQL/testsuite/src/MySQLTest.cpp:927:37: note: Shadow variable
  catch (ConnectionFailedException& ex)
                                    ^
Data/MySQL/testsuite/src/SQLExecutor.cpp:144:72: style:inconclusive: Function 'SQLExecutor' argument 2 names different: declaration '_pSession' definition 'pSession'. [funcArgNamesDifferent]
SQLExecutor::SQLExecutor(const std::string& name, Poco::Data::Session* pSession):
                                                                       ^
Data/MySQL/testsuite/src/SQLExecutor.h:36:60: note: Function 'SQLExecutor' argument 2 names different: declaration '_pSession' definition 'pSession'.
 SQLExecutor(const std::string& name, Poco::Data::Session* _pSession);
                                                           ^
Data/MySQL/testsuite/src/SQLExecutor.cpp:144:72: note: Function 'SQLExecutor' argument 2 names different: declaration '_pSession' definition 'pSession'.
SQLExecutor::SQLExecutor(const std::string& name, Poco::Data::Session* pSession):
                                                                       ^
Data/MySQL/testsuite/src/SQLExecutor.cpp:355:14: style: Unused variable: result [unusedVariable]
 std::string result;
             ^
Data/MySQL/testsuite/src/SQLExecutor.cpp:750:14: style: Unused variable: result [unusedVariable]
 std::string result;
             ^
Data/MySQL/testsuite/src/SQLExecutor.cpp:845:14: style: Unused variable: result [unusedVariable]
 std::string result;
             ^
Data/MySQL/testsuite/src/SQLExecutor.cpp:1811:14: style: Unused variable: result [unusedVariable]
 std::string result;
             ^
Data/MySQL/testsuite/src/SQLExecutor.cpp:1906:14: style: Unused variable: result [unusedVariable]
 std::string result;
             ^
Data/ODBC/src/Binder.cpp:516:7: style: The scope of the variable 'found' can be reduced. [variableScope]
 bool found(false);
      ^
Data/ODBC/src/Extractor.cpp:279:14: style: The scope of the variable 'fetchedSize' can be reduced. [variableScope]
 std::size_t fetchedSize = 0;
             ^
Data/ODBC/src/Extractor.cpp:334:14: style: The scope of the variable 'fetchedSize' can be reduced. [variableScope]
 std::size_t fetchedSize = 0;
             ^
Data/ODBC/src/Extractor.cpp:391:14: style: The scope of the variable 'fetchedSize' can be reduced. [variableScope]
 std::size_t fetchedSize = 0;
             ^
Data/ODBC/src/Extractor.cpp:279:26: style: Variable 'fetchedSize' is assigned a value that is never used. [unreadVariable]
 std::size_t fetchedSize = 0;
                         ^
Data/ODBC/src/Extractor.cpp:286:15: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
 SQLRETURN rc = 0;
              ^
Data/ODBC/src/Extractor.cpp:334:26: style: Variable 'fetchedSize' is assigned a value that is never used. [unreadVariable]
 std::size_t fetchedSize = 0;
                         ^
Data/ODBC/src/Extractor.cpp:341:15: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
 SQLRETURN rc = 0;
              ^
Data/ODBC/src/Extractor.cpp:391:26: style: Variable 'fetchedSize' is assigned a value that is never used. [unreadVariable]
 std::size_t fetchedSize = 0;
                         ^
Data/ODBC/src/Extractor.cpp:398:15: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
 SQLRETURN rc = 0;
              ^
Data/ODBC/src/ODBCStatementImpl.cpp:175:32: style: Variable 'pAP' is assigned a value that is never used. [unreadVariable]
  AbstractPreparation::Ptr pAP = 0;
                               ^
Data/ODBC/src/ODBCStatementImpl.cpp:244:22: style: Variable 'dataSize' is assigned a value that is never used. [unreadVariable]
 SQLINTEGER dataSize = 0;
                     ^
Data/ODBC/src/TypeInfo.cpp:137:8: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
    rc = SQLGetData(hstmt, 2, SQL_C_SSHORT, &ti.get<1>(), sizeof(SQLSMALLINT), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:135:8: note: rc is assigned
    rc = SQLGetData(hstmt, 1, SQL_C_CHAR, typeName, sizeof(typeName), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:137:8: note: rc is overwritten
    rc = SQLGetData(hstmt, 2, SQL_C_SSHORT, &ti.get<1>(), sizeof(SQLSMALLINT), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:138:8: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
    rc = SQLGetData(hstmt, 3, SQL_C_SLONG, &ti.get<2>(), sizeof(SQLINTEGER), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:137:8: note: rc is assigned
    rc = SQLGetData(hstmt, 2, SQL_C_SSHORT, &ti.get<1>(), sizeof(SQLSMALLINT), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:138:8: note: rc is overwritten
    rc = SQLGetData(hstmt, 3, SQL_C_SLONG, &ti.get<2>(), sizeof(SQLINTEGER), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:139:8: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
    rc = SQLGetData(hstmt, 4, SQL_C_CHAR, literalPrefix, sizeof(literalPrefix), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:138:8: note: rc is assigned
    rc = SQLGetData(hstmt, 3, SQL_C_SLONG, &ti.get<2>(), sizeof(SQLINTEGER), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:139:8: note: rc is overwritten
    rc = SQLGetData(hstmt, 4, SQL_C_CHAR, literalPrefix, sizeof(literalPrefix), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:141:8: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
    rc = SQLGetData(hstmt, 5, SQL_C_CHAR, literalSuffix, sizeof(literalSuffix), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:139:8: note: rc is assigned
    rc = SQLGetData(hstmt, 4, SQL_C_CHAR, literalPrefix, sizeof(literalPrefix), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:141:8: note: rc is overwritten
    rc = SQLGetData(hstmt, 5, SQL_C_CHAR, literalSuffix, sizeof(literalSuffix), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:143:8: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
    rc = SQLGetData(hstmt, 6, SQL_C_CHAR, createParams, sizeof(createParams), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:141:8: note: rc is assigned
    rc = SQLGetData(hstmt, 5, SQL_C_CHAR, literalSuffix, sizeof(literalSuffix), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:143:8: note: rc is overwritten
    rc = SQLGetData(hstmt, 6, SQL_C_CHAR, createParams, sizeof(createParams), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:145:8: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
    rc = SQLGetData(hstmt, 7, SQL_C_SSHORT, &ti.get<6>(), sizeof(SQLSMALLINT), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:143:8: note: rc is assigned
    rc = SQLGetData(hstmt, 6, SQL_C_CHAR, createParams, sizeof(createParams), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:145:8: note: rc is overwritten
    rc = SQLGetData(hstmt, 7, SQL_C_SSHORT, &ti.get<6>(), sizeof(SQLSMALLINT), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:146:8: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
    rc = SQLGetData(hstmt, 8, SQL_C_SSHORT, &ti.get<7>(), sizeof(SQLSMALLINT), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:145:8: note: rc is assigned
    rc = SQLGetData(hstmt, 7, SQL_C_SSHORT, &ti.get<6>(), sizeof(SQLSMALLINT), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:146:8: note: rc is overwritten
    rc = SQLGetData(hstmt, 8, SQL_C_SSHORT, &ti.get<7>(), sizeof(SQLSMALLINT), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:147:8: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
    rc = SQLGetData(hstmt, 9, SQL_C_SSHORT, &ti.get<8>(), sizeof(SQLSMALLINT), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:146:8: note: rc is assigned
    rc = SQLGetData(hstmt, 8, SQL_C_SSHORT, &ti.get<7>(), sizeof(SQLSMALLINT), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:147:8: note: rc is overwritten
    rc = SQLGetData(hstmt, 9, SQL_C_SSHORT, &ti.get<8>(), sizeof(SQLSMALLINT), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:148:8: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
    rc = SQLGetData(hstmt, 10, SQL_C_SSHORT, &ti.get<9>(), sizeof(SQLSMALLINT), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:147:8: note: rc is assigned
    rc = SQLGetData(hstmt, 9, SQL_C_SSHORT, &ti.get<8>(), sizeof(SQLSMALLINT), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:148:8: note: rc is overwritten
    rc = SQLGetData(hstmt, 10, SQL_C_SSHORT, &ti.get<9>(), sizeof(SQLSMALLINT), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:149:8: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
    rc = SQLGetData(hstmt, 11, SQL_C_SSHORT, &ti.get<10>(), sizeof(SQLSMALLINT), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:148:8: note: rc is assigned
    rc = SQLGetData(hstmt, 10, SQL_C_SSHORT, &ti.get<9>(), sizeof(SQLSMALLINT), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:149:8: note: rc is overwritten
    rc = SQLGetData(hstmt, 11, SQL_C_SSHORT, &ti.get<10>(), sizeof(SQLSMALLINT), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:150:8: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
    rc = SQLGetData(hstmt, 12, SQL_C_SSHORT, &ti.get<11>(), sizeof(SQLSMALLINT), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:149:8: note: rc is assigned
    rc = SQLGetData(hstmt, 11, SQL_C_SSHORT, &ti.get<10>(), sizeof(SQLSMALLINT), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:150:8: note: rc is overwritten
    rc = SQLGetData(hstmt, 12, SQL_C_SSHORT, &ti.get<11>(), sizeof(SQLSMALLINT), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:151:8: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
    rc = SQLGetData(hstmt, 13, SQL_C_CHAR, localTypeName, sizeof(localTypeName), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:150:8: note: rc is assigned
    rc = SQLGetData(hstmt, 12, SQL_C_SSHORT, &ti.get<11>(), sizeof(SQLSMALLINT), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:151:8: note: rc is overwritten
    rc = SQLGetData(hstmt, 13, SQL_C_CHAR, localTypeName, sizeof(localTypeName), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:153:8: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
    rc = SQLGetData(hstmt, 14, SQL_C_SSHORT, &ti.get<13>(), sizeof(SQLSMALLINT), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:151:8: note: rc is assigned
    rc = SQLGetData(hstmt, 13, SQL_C_CHAR, localTypeName, sizeof(localTypeName), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:153:8: note: rc is overwritten
    rc = SQLGetData(hstmt, 14, SQL_C_SSHORT, &ti.get<13>(), sizeof(SQLSMALLINT), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:154:8: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
    rc = SQLGetData(hstmt, 15, SQL_C_SSHORT, &ti.get<14>(), sizeof(SQLSMALLINT), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:153:8: note: rc is assigned
    rc = SQLGetData(hstmt, 14, SQL_C_SSHORT, &ti.get<13>(), sizeof(SQLSMALLINT), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:154:8: note: rc is overwritten
    rc = SQLGetData(hstmt, 15, SQL_C_SSHORT, &ti.get<14>(), sizeof(SQLSMALLINT), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:155:8: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
    rc = SQLGetData(hstmt, 16, SQL_C_SSHORT, &ti.get<15>(), sizeof(SQLSMALLINT), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:154:8: note: rc is assigned
    rc = SQLGetData(hstmt, 15, SQL_C_SSHORT, &ti.get<14>(), sizeof(SQLSMALLINT), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:155:8: note: rc is overwritten
    rc = SQLGetData(hstmt, 16, SQL_C_SSHORT, &ti.get<15>(), sizeof(SQLSMALLINT), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:156:8: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
    rc = SQLGetData(hstmt, 17, SQL_C_SSHORT, &ti.get<16>(), sizeof(SQLSMALLINT), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:155:8: note: rc is assigned
    rc = SQLGetData(hstmt, 16, SQL_C_SSHORT, &ti.get<15>(), sizeof(SQLSMALLINT), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:156:8: note: rc is overwritten
    rc = SQLGetData(hstmt, 17, SQL_C_SSHORT, &ti.get<16>(), sizeof(SQLSMALLINT), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:157:8: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
    rc = SQLGetData(hstmt, 18, SQL_C_SLONG, &ti.get<17>(), sizeof(SQLINTEGER), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:156:8: note: rc is assigned
    rc = SQLGetData(hstmt, 17, SQL_C_SSHORT, &ti.get<16>(), sizeof(SQLSMALLINT), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:157:8: note: rc is overwritten
    rc = SQLGetData(hstmt, 18, SQL_C_SLONG, &ti.get<17>(), sizeof(SQLINTEGER), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:158:8: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
    rc = SQLGetData(hstmt, 19, SQL_C_SSHORT, &ti.get<18>(), sizeof(SQLSMALLINT), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:157:8: note: rc is assigned
    rc = SQLGetData(hstmt, 18, SQL_C_SLONG, &ti.get<17>(), sizeof(SQLINTEGER), &ind);
       ^
Data/ODBC/src/TypeInfo.cpp:158:8: note: rc is overwritten
    rc = SQLGetData(hstmt, 19, SQL_C_SSHORT, &ti.get<18>(), sizeof(SQLSMALLINT), &ind);
       ^
Data/ODBC/testsuite/src/ODBCAccessTest.cpp:43:17: warning: Member variable 'ODBCAccessTest::_owner' is not initialized in the constructor. [uninitMemberVar]
ODBCAccessTest::ODBCAccessTest(const std::string& name):
                ^
Data/ODBC/testsuite/src/ODBCAccessTest.h:34:2: style: Class 'ODBCAccessTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 ODBCAccessTest(const std::string& name);
 ^
Data/ODBC/testsuite/src/SQLExecutor.h:158:6: style: Local variable 'floats' shadows outer function [shadowFunction]
  C4 floats;
     ^
Data/ODBC/testsuite/src/SQLExecutor.h:470:7: note: Shadowed declaration
 void floats();
      ^
Data/ODBC/testsuite/src/SQLExecutor.h:158:6: note: Shadow variable
  C4 floats;
     ^
Data/ODBC/testsuite/src/SQLExecutor.h:228:8: style: Local variable 'blob' shadows outer function [shadowFunction]
  CLOB blob("abc");
       ^
Data/ODBC/testsuite/src/SQLExecutor.h:436:7: note: Shadowed declaration
 void blob(int bigSize = 1024, const std::string& blobPlaceholder = "?");
      ^
Data/ODBC/testsuite/src/SQLExecutor.h:228:8: note: Shadow variable
  CLOB blob("abc");
       ^
Data/ODBC/testsuite/src/SQLExecutor.h:301:6: style: Local variable 'floats' shadows outer function [shadowFunction]
  C4 floats;
     ^
Data/ODBC/testsuite/src/SQLExecutor.h:470:7: note: Shadowed declaration
 void floats();
      ^
Data/ODBC/testsuite/src/SQLExecutor.h:301:6: note: Shadow variable
  C4 floats;
     ^
Data/ODBC/testsuite/src/SQLExecutor.h:363:8: style: Local variable 'blob' shadows outer function [shadowFunction]
  CLOB blob("abc");
       ^
Data/ODBC/testsuite/src/SQLExecutor.h:436:7: note: Shadowed declaration
 void blob(int bigSize = 1024, const std::string& blobPlaceholder = "?");
      ^
Data/ODBC/testsuite/src/SQLExecutor.h:363:8: note: Shadow variable
  CLOB blob("abc");
       ^
Data/ODBC/testsuite/src/ODBCDB2Test.h:30:2: style: Class 'ODBCDB2Test' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 ODBCDB2Test(const std::string& name);
 ^
Data/ODBC/testsuite/src/ODBCDB2Test.h:33:7: style: The function 'testBareboneODBC' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void testBareboneODBC();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:48:15: note: Virtual function in base class
 virtual void testBareboneODBC() = 0;
              ^
Data/ODBC/testsuite/src/ODBCDB2Test.h:33:7: note: Function in derived class
 void testBareboneODBC();
      ^
Data/ODBC/testsuite/src/ODBCDB2Test.h:35:7: style: The function 'testBLOB' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void testBLOB();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:106:15: note: Virtual function in base class
 virtual void testBLOB();
              ^
Data/ODBC/testsuite/src/ODBCDB2Test.h:35:7: note: Function in derived class
 void testBLOB();
      ^
Data/ODBC/testsuite/src/ODBCDB2Test.h:36:7: style: The function 'testFilter' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void testFilter();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:123:15: note: Virtual function in base class
 virtual void testFilter();
              ^
Data/ODBC/testsuite/src/ODBCDB2Test.h:36:7: note: Function in derived class
 void testFilter();
      ^
Data/ODBC/testsuite/src/ODBCDB2Test.h:38:7: style: The function 'testStoredProcedure' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void testStoredProcedure();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:127:15: note: Virtual function in base class
 virtual void testStoredProcedure();
              ^
Data/ODBC/testsuite/src/ODBCDB2Test.h:38:7: note: Function in derived class
 void testStoredProcedure();
      ^
Data/ODBC/testsuite/src/ODBCDB2Test.h:39:7: style: The function 'testStoredProcedureAny' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void testStoredProcedureAny();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:128:15: note: Virtual function in base class
 virtual void testStoredProcedureAny();
              ^
Data/ODBC/testsuite/src/ODBCDB2Test.h:39:7: note: Function in derived class
 void testStoredProcedureAny();
      ^
Data/ODBC/testsuite/src/ODBCDB2Test.h:40:7: style: The function 'testStoredProcedureDynamicAny' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void testStoredProcedureDynamicAny();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:129:15: note: Virtual function in base class
 virtual void testStoredProcedureDynamicAny();
              ^
Data/ODBC/testsuite/src/ODBCDB2Test.h:40:7: note: Function in derived class
 void testStoredProcedureDynamicAny();
      ^
Data/ODBC/testsuite/src/ODBCDB2Test.h:41:7: style: The function 'testStoredFunction' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void testStoredFunction();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:131:15: note: Virtual function in base class
 virtual void testStoredFunction();
              ^
Data/ODBC/testsuite/src/ODBCDB2Test.h:41:7: note: Function in derived class
 void testStoredFunction();
      ^
Data/ODBC/testsuite/src/ODBCDB2Test.h:46:7: style: The function 'dropObject' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void dropObject(const std::string& type, const std::string& tableName);
      ^
Data/ODBC/testsuite/src/ODBCTest.h:162:15: note: Virtual function in base class
 virtual void dropObject(const std::string& type, const std::string& name);
              ^
Data/ODBC/testsuite/src/ODBCDB2Test.h:46:7: note: Function in derived class
 void dropObject(const std::string& type, const std::string& tableName);
      ^
Data/ODBC/testsuite/src/ODBCDB2Test.h:47:7: style: The function 'recreateNullableTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateNullableTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:163:15: note: Virtual function in base class
 virtual void recreateNullableTable();
              ^
Data/ODBC/testsuite/src/ODBCDB2Test.h:47:7: note: Function in derived class
 void recreateNullableTable();
      ^
Data/ODBC/testsuite/src/ODBCDB2Test.h:48:7: style: The function 'recreatePersonTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreatePersonTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:164:15: note: Virtual function in base class
 virtual void recreatePersonTable();
              ^
Data/ODBC/testsuite/src/ODBCDB2Test.h:48:7: note: Function in derived class
 void recreatePersonTable();
      ^
Data/ODBC/testsuite/src/ODBCDB2Test.h:49:7: style: The function 'recreatePersonBLOBTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreatePersonBLOBTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:166:15: note: Virtual function in base class
 virtual void recreatePersonBLOBTable();
              ^
Data/ODBC/testsuite/src/ODBCDB2Test.h:49:7: note: Function in derived class
 void recreatePersonBLOBTable();
      ^
Data/ODBC/testsuite/src/ODBCDB2Test.h:50:7: style: The function 'recreatePersonDateTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreatePersonDateTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:168:15: note: Virtual function in base class
 virtual void recreatePersonDateTable();
              ^
Data/ODBC/testsuite/src/ODBCDB2Test.h:50:7: note: Function in derived class
 void recreatePersonDateTable();
      ^
Data/ODBC/testsuite/src/ODBCDB2Test.h:51:7: style: The function 'recreatePersonTimeTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreatePersonTimeTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:169:15: note: Virtual function in base class
 virtual void recreatePersonTimeTable();
              ^
Data/ODBC/testsuite/src/ODBCDB2Test.h:51:7: note: Function in derived class
 void recreatePersonTimeTable();
      ^
Data/ODBC/testsuite/src/ODBCDB2Test.h:52:7: style: The function 'recreatePersonDateTimeTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreatePersonDateTimeTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:167:15: note: Virtual function in base class
 virtual void recreatePersonDateTimeTable();
              ^
Data/ODBC/testsuite/src/ODBCDB2Test.h:52:7: note: Function in derived class
 void recreatePersonDateTimeTable();
      ^
Data/ODBC/testsuite/src/ODBCDB2Test.h:53:7: style: The function 'recreateStringsTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateStringsTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:170:15: note: Virtual function in base class
 virtual void recreateStringsTable();
              ^
Data/ODBC/testsuite/src/ODBCDB2Test.h:53:7: note: Function in derived class
 void recreateStringsTable();
      ^
Data/ODBC/testsuite/src/ODBCDB2Test.h:54:7: style: The function 'recreateIntsTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateIntsTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:171:15: note: Virtual function in base class
 virtual void recreateIntsTable();
              ^
Data/ODBC/testsuite/src/ODBCDB2Test.h:54:7: note: Function in derived class
 void recreateIntsTable();
      ^
Data/ODBC/testsuite/src/ODBCDB2Test.h:55:7: style: The function 'recreateFloatsTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateFloatsTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:172:15: note: Virtual function in base class
 virtual void recreateFloatsTable();
              ^
Data/ODBC/testsuite/src/ODBCDB2Test.h:55:7: note: Function in derived class
 void recreateFloatsTable();
      ^
Data/ODBC/testsuite/src/ODBCDB2Test.h:56:7: style: The function 'recreateTuplesTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateTuplesTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:174:15: note: Virtual function in base class
 virtual void recreateTuplesTable();
              ^
Data/ODBC/testsuite/src/ODBCDB2Test.h:56:7: note: Function in derived class
 void recreateTuplesTable();
      ^
Data/ODBC/testsuite/src/ODBCDB2Test.h:57:7: style: The function 'recreateVectorsTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateVectorsTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:175:15: note: Virtual function in base class
 virtual void recreateVectorsTable();
              ^
Data/ODBC/testsuite/src/ODBCDB2Test.h:57:7: note: Function in derived class
 void recreateVectorsTable();
      ^
Data/ODBC/testsuite/src/ODBCDB2Test.h:58:7: style: The function 'recreateAnysTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateAnysTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:176:15: note: Virtual function in base class
 virtual void recreateAnysTable();
              ^
Data/ODBC/testsuite/src/ODBCDB2Test.h:58:7: note: Function in derived class
 void recreateAnysTable();
      ^
Data/ODBC/testsuite/src/ODBCDB2Test.h:59:7: style: The function 'recreateNullsTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateNullsTable(const std::string& notNull = "");
      ^
Data/ODBC/testsuite/src/ODBCTest.h:177:15: note: Virtual function in base class
 virtual void recreateNullsTable(const std::string& notNull="");
              ^
Data/ODBC/testsuite/src/ODBCDB2Test.h:59:7: note: Function in derived class
 void recreateNullsTable(const std::string& notNull = "");
      ^
Data/ODBC/testsuite/src/ODBCDB2Test.h:60:7: style: The function 'recreateMiscTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateMiscTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:179:15: note: Virtual function in base class
 virtual void recreateMiscTable();
              ^
Data/ODBC/testsuite/src/ODBCDB2Test.h:60:7: note: Function in derived class
 void recreateMiscTable();
      ^
Data/ODBC/testsuite/src/ODBCDB2Test.h:61:7: style: The function 'recreateLogTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateLogTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:180:15: note: Virtual function in base class
 virtual void recreateLogTable();
              ^
Data/ODBC/testsuite/src/ODBCDB2Test.h:61:7: note: Function in derived class
 void recreateLogTable();
      ^
Data/ODBC/testsuite/src/ODBCDB2Test.cpp:397:74: style:inconclusive: Function 'dropObject' argument 2 names different: declaration 'tableName' definition 'name'. [funcArgNamesDifferent]
void ODBCDB2Test::dropObject(const std::string& type, const std::string& name)
                                                                         ^
Data/ODBC/testsuite/src/ODBCDB2Test.h:46:62: note: Function 'dropObject' argument 2 names different: declaration 'tableName' definition 'name'.
 void dropObject(const std::string& type, const std::string& tableName);
                                                             ^
Data/ODBC/testsuite/src/ODBCDB2Test.cpp:397:74: note: Function 'dropObject' argument 2 names different: declaration 'tableName' definition 'name'.
void ODBCDB2Test::dropObject(const std::string& type, const std::string& name)
                                                                         ^
Data/ODBC/testsuite/src/ODBCMySQLTest.h:33:2: style: Class 'ODBCMySQLTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 ODBCMySQLTest(const std::string& name);
 ^
Data/ODBC/testsuite/src/ODBCMySQLTest.h:36:7: style: The function 'testBareboneODBC' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void testBareboneODBC();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:48:15: note: Virtual function in base class
 virtual void testBareboneODBC() = 0;
              ^
Data/ODBC/testsuite/src/ODBCMySQLTest.h:36:7: note: Function in derived class
 void testBareboneODBC();
      ^
Data/ODBC/testsuite/src/ODBCMySQLTest.h:38:7: style: The function 'testBLOB' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void testBLOB();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:106:15: note: Virtual function in base class
 virtual void testBLOB();
              ^
Data/ODBC/testsuite/src/ODBCMySQLTest.h:38:7: note: Function in derived class
 void testBLOB();
      ^
Data/ODBC/testsuite/src/ODBCMySQLTest.h:40:7: style: The function 'testStoredProcedure' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void testStoredProcedure();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:127:15: note: Virtual function in base class
 virtual void testStoredProcedure();
              ^
Data/ODBC/testsuite/src/ODBCMySQLTest.h:40:7: note: Function in derived class
 void testStoredProcedure();
      ^
Data/ODBC/testsuite/src/ODBCMySQLTest.h:41:7: style: The function 'testStoredFunction' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void testStoredFunction();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:131:15: note: Virtual function in base class
 virtual void testStoredFunction();
              ^
Data/ODBC/testsuite/src/ODBCMySQLTest.h:41:7: note: Function in derived class
 void testStoredFunction();
      ^
Data/ODBC/testsuite/src/ODBCMySQLTest.h:43:7: style: The function 'testNull' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void testNull();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:135:15: note: Virtual function in base class
 virtual void testNull();
              ^
Data/ODBC/testsuite/src/ODBCMySQLTest.h:43:7: note: Function in derived class
 void testNull();
      ^
Data/ODBC/testsuite/src/ODBCMySQLTest.h:45:7: style: The function 'testMultipleResults' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void testMultipleResults();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:144:15: note: Virtual function in base class
 virtual void testMultipleResults();
              ^
Data/ODBC/testsuite/src/ODBCMySQLTest.h:45:7: note: Function in derived class
 void testMultipleResults();
      ^
Data/ODBC/testsuite/src/ODBCMySQLTest.h:46:7: style: The function 'testFilter' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void testFilter();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:123:15: note: Virtual function in base class
 virtual void testFilter();
              ^
Data/ODBC/testsuite/src/ODBCMySQLTest.h:46:7: note: Function in derived class
 void testFilter();
      ^
Data/ODBC/testsuite/src/ODBCMySQLTest.h:51:7: style: The function 'dropObject' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void dropObject(const std::string& type, const std::string& name);
      ^
Data/ODBC/testsuite/src/ODBCTest.h:162:15: note: Virtual function in base class
 virtual void dropObject(const std::string& type, const std::string& name);
              ^
Data/ODBC/testsuite/src/ODBCMySQLTest.h:51:7: note: Function in derived class
 void dropObject(const std::string& type, const std::string& name);
      ^
Data/ODBC/testsuite/src/ODBCMySQLTest.h:52:7: style: The function 'recreateNullableTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateNullableTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:163:15: note: Virtual function in base class
 virtual void recreateNullableTable();
              ^
Data/ODBC/testsuite/src/ODBCMySQLTest.h:52:7: note: Function in derived class
 void recreateNullableTable();
      ^
Data/ODBC/testsuite/src/ODBCMySQLTest.h:53:7: style: The function 'recreatePersonTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreatePersonTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:164:15: note: Virtual function in base class
 virtual void recreatePersonTable();
              ^
Data/ODBC/testsuite/src/ODBCMySQLTest.h:53:7: note: Function in derived class
 void recreatePersonTable();
      ^
Data/ODBC/testsuite/src/ODBCMySQLTest.h:54:7: style: The function 'recreatePersonBLOBTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreatePersonBLOBTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:166:15: note: Virtual function in base class
 virtual void recreatePersonBLOBTable();
              ^
Data/ODBC/testsuite/src/ODBCMySQLTest.h:54:7: note: Function in derived class
 void recreatePersonBLOBTable();
      ^
Data/ODBC/testsuite/src/ODBCMySQLTest.h:55:7: style: The function 'recreatePersonDateTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreatePersonDateTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:168:15: note: Virtual function in base class
 virtual void recreatePersonDateTable();
              ^
Data/ODBC/testsuite/src/ODBCMySQLTest.h:55:7: note: Function in derived class
 void recreatePersonDateTable();
      ^
Data/ODBC/testsuite/src/ODBCMySQLTest.h:56:7: style: The function 'recreatePersonTimeTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreatePersonTimeTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:169:15: note: Virtual function in base class
 virtual void recreatePersonTimeTable();
              ^
Data/ODBC/testsuite/src/ODBCMySQLTest.h:56:7: note: Function in derived class
 void recreatePersonTimeTable();
      ^
Data/ODBC/testsuite/src/ODBCMySQLTest.h:57:7: style: The function 'recreatePersonDateTimeTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreatePersonDateTimeTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:167:15: note: Virtual function in base class
 virtual void recreatePersonDateTimeTable();
              ^
Data/ODBC/testsuite/src/ODBCMySQLTest.h:57:7: note: Function in derived class
 void recreatePersonDateTimeTable();
      ^
Data/ODBC/testsuite/src/ODBCMySQLTest.h:58:7: style: The function 'recreateStringsTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateStringsTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:170:15: note: Virtual function in base class
 virtual void recreateStringsTable();
              ^
Data/ODBC/testsuite/src/ODBCMySQLTest.h:58:7: note: Function in derived class
 void recreateStringsTable();
      ^
Data/ODBC/testsuite/src/ODBCMySQLTest.h:59:7: style: The function 'recreateIntsTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateIntsTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:171:15: note: Virtual function in base class
 virtual void recreateIntsTable();
              ^
Data/ODBC/testsuite/src/ODBCMySQLTest.h:59:7: note: Function in derived class
 void recreateIntsTable();
      ^
Data/ODBC/testsuite/src/ODBCMySQLTest.h:60:7: style: The function 'recreateFloatsTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateFloatsTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:172:15: note: Virtual function in base class
 virtual void recreateFloatsTable();
              ^
Data/ODBC/testsuite/src/ODBCMySQLTest.h:60:7: note: Function in derived class
 void recreateFloatsTable();
      ^
Data/ODBC/testsuite/src/ODBCMySQLTest.h:61:7: style: The function 'recreateTuplesTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateTuplesTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:174:15: note: Virtual function in base class
 virtual void recreateTuplesTable();
              ^
Data/ODBC/testsuite/src/ODBCMySQLTest.h:61:7: note: Function in derived class
 void recreateTuplesTable();
      ^
Data/ODBC/testsuite/src/ODBCMySQLTest.h:62:7: style: The function 'recreateVectorsTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateVectorsTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:175:15: note: Virtual function in base class
 virtual void recreateVectorsTable();
              ^
Data/ODBC/testsuite/src/ODBCMySQLTest.h:62:7: note: Function in derived class
 void recreateVectorsTable();
      ^
Data/ODBC/testsuite/src/ODBCMySQLTest.h:63:7: style: The function 'recreateAnysTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateAnysTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:176:15: note: Virtual function in base class
 virtual void recreateAnysTable();
              ^
Data/ODBC/testsuite/src/ODBCMySQLTest.h:63:7: note: Function in derived class
 void recreateAnysTable();
      ^
Data/ODBC/testsuite/src/ODBCMySQLTest.h:64:7: style: The function 'recreateNullsTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateNullsTable(const std::string& notNull = "");
      ^
Data/ODBC/testsuite/src/ODBCTest.h:177:15: note: Virtual function in base class
 virtual void recreateNullsTable(const std::string& notNull="");
              ^
Data/ODBC/testsuite/src/ODBCMySQLTest.h:64:7: note: Function in derived class
 void recreateNullsTable(const std::string& notNull = "");
      ^
Data/ODBC/testsuite/src/ODBCMySQLTest.h:65:7: style: The function 'recreateMiscTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateMiscTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:179:15: note: Virtual function in base class
 virtual void recreateMiscTable();
              ^
Data/ODBC/testsuite/src/ODBCMySQLTest.h:65:7: note: Function in derived class
 void recreateMiscTable();
      ^
Data/ODBC/testsuite/src/ODBCMySQLTest.h:66:7: style: The function 'recreateLogTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateLogTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:180:15: note: Virtual function in base class
 virtual void recreateLogTable();
              ^
Data/ODBC/testsuite/src/ODBCMySQLTest.h:66:7: note: Function in derived class
 void recreateLogTable();
      ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:32:2: style: Class 'ODBCOracleTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 ODBCOracleTest(const std::string& name);
 ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:35:7: style: The function 'testBareboneODBC' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void testBareboneODBC();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:48:15: note: Virtual function in base class
 virtual void testBareboneODBC() = 0;
              ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:35:7: note: Function in derived class
 void testBareboneODBC();
      ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:37:7: style: The function 'testBLOB' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void testBLOB();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:106:15: note: Virtual function in base class
 virtual void testBLOB();
              ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:37:7: note: Function in derived class
 void testBLOB();
      ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:39:7: style: The function 'testMultipleResults' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void testMultipleResults();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:144:15: note: Virtual function in base class
 virtual void testMultipleResults();
              ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:39:7: note: Function in derived class
 void testMultipleResults();
      ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:41:7: style: The function 'testStoredProcedure' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void testStoredProcedure();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:127:15: note: Virtual function in base class
 virtual void testStoredProcedure();
              ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:41:7: note: Function in derived class
 void testStoredProcedure();
      ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:43:7: style: The function 'testStoredFunction' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void testStoredFunction();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:131:15: note: Virtual function in base class
 virtual void testStoredFunction();
              ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:43:7: note: Function in derived class
 void testStoredFunction();
      ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:45:7: style: The function 'testStoredProcedureAny' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void testStoredProcedureAny();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:128:15: note: Virtual function in base class
 virtual void testStoredProcedureAny();
              ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:45:7: note: Function in derived class
 void testStoredProcedureAny();
      ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:46:7: style: The function 'testStoredProcedureDynamicAny' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void testStoredProcedureDynamicAny();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:129:15: note: Virtual function in base class
 virtual void testStoredProcedureDynamicAny();
              ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:46:7: note: Function in derived class
 void testStoredProcedureDynamicAny();
      ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:49:7: style: The function 'testNull' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void testNull();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:135:15: note: Virtual function in base class
 virtual void testNull();
              ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:49:7: note: Function in derived class
 void testNull();
      ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:55:7: style: The function 'dropObject' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void dropObject(const std::string& type, const std::string& name);
      ^
Data/ODBC/testsuite/src/ODBCTest.h:162:15: note: Virtual function in base class
 virtual void dropObject(const std::string& type, const std::string& name);
              ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:55:7: note: Function in derived class
 void dropObject(const std::string& type, const std::string& name);
      ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:56:7: style: The function 'recreateNullableTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateNullableTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:163:15: note: Virtual function in base class
 virtual void recreateNullableTable();
              ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:56:7: note: Function in derived class
 void recreateNullableTable();
      ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:57:7: style: The function 'recreatePersonTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreatePersonTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:164:15: note: Virtual function in base class
 virtual void recreatePersonTable();
              ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:57:7: note: Function in derived class
 void recreatePersonTable();
      ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:58:7: style: The function 'recreatePersonTupleTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreatePersonTupleTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:165:15: note: Virtual function in base class
 virtual void recreatePersonTupleTable();
              ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:58:7: note: Function in derived class
 void recreatePersonTupleTable();
      ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:59:7: style: The function 'recreatePersonBLOBTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreatePersonBLOBTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:166:15: note: Virtual function in base class
 virtual void recreatePersonBLOBTable();
              ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:59:7: note: Function in derived class
 void recreatePersonBLOBTable();
      ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:60:7: style: The function 'recreatePersonDateTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreatePersonDateTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:168:15: note: Virtual function in base class
 virtual void recreatePersonDateTable();
              ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:60:7: note: Function in derived class
 void recreatePersonDateTable();
      ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:61:7: style: The function 'recreatePersonDateTimeTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreatePersonDateTimeTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:167:15: note: Virtual function in base class
 virtual void recreatePersonDateTimeTable();
              ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:61:7: note: Function in derived class
 void recreatePersonDateTimeTable();
      ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:62:7: style: The function 'recreateStringsTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateStringsTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:170:15: note: Virtual function in base class
 virtual void recreateStringsTable();
              ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:62:7: note: Function in derived class
 void recreateStringsTable();
      ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:63:7: style: The function 'recreateIntsTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateIntsTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:171:15: note: Virtual function in base class
 virtual void recreateIntsTable();
              ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:63:7: note: Function in derived class
 void recreateIntsTable();
      ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:64:7: style: The function 'recreateFloatsTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateFloatsTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:172:15: note: Virtual function in base class
 virtual void recreateFloatsTable();
              ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:64:7: note: Function in derived class
 void recreateFloatsTable();
      ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:65:7: style: The function 'recreateTuplesTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateTuplesTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:174:15: note: Virtual function in base class
 virtual void recreateTuplesTable();
              ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:65:7: note: Function in derived class
 void recreateTuplesTable();
      ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:66:7: style: The function 'recreateVectorsTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateVectorsTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:175:15: note: Virtual function in base class
 virtual void recreateVectorsTable();
              ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:66:7: note: Function in derived class
 void recreateVectorsTable();
      ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:67:7: style: The function 'recreateAnysTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateAnysTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:176:15: note: Virtual function in base class
 virtual void recreateAnysTable();
              ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:67:7: note: Function in derived class
 void recreateAnysTable();
      ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:68:7: style: The function 'recreateNullsTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateNullsTable(const std::string& notNull = "");
      ^
Data/ODBC/testsuite/src/ODBCTest.h:177:15: note: Virtual function in base class
 virtual void recreateNullsTable(const std::string& notNull="");
              ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:68:7: note: Function in derived class
 void recreateNullsTable(const std::string& notNull = "");
      ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:69:7: style: The function 'recreateMiscTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateMiscTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:179:15: note: Virtual function in base class
 virtual void recreateMiscTable();
              ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:69:7: note: Function in derived class
 void recreateMiscTable();
      ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:70:7: style: The function 'recreateLogTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateLogTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:180:15: note: Virtual function in base class
 virtual void recreateLogTable();
              ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:70:7: note: Function in derived class
 void recreateLogTable();
      ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:71:7: style: The function 'recreateUnicodeTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateUnicodeTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:181:15: note: Virtual function in base class
 virtual void recreateUnicodeTable();
              ^
Data/ODBC/testsuite/src/ODBCOracleTest.h:71:7: note: Function in derived class
 void recreateUnicodeTable();
      ^
Data/ODBC/testsuite/src/ODBCPostgreSQLTest.h:39:2: style: Class 'ODBCPostgreSQLTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 ODBCPostgreSQLTest(const std::string& name);
 ^
Data/ODBC/testsuite/src/ODBCPostgreSQLTest.h:42:7: style: The function 'testBareboneODBC' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void testBareboneODBC();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:48:15: note: Virtual function in base class
 virtual void testBareboneODBC() = 0;
              ^
Data/ODBC/testsuite/src/ODBCPostgreSQLTest.h:42:7: note: Function in derived class
 void testBareboneODBC();
      ^
Data/ODBC/testsuite/src/ODBCPostgreSQLTest.h:44:7: style: The function 'testBLOB' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void testBLOB();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:106:15: note: Virtual function in base class
 virtual void testBLOB();
              ^
Data/ODBC/testsuite/src/ODBCPostgreSQLTest.h:44:7: note: Function in derived class
 void testBLOB();
      ^
Data/ODBC/testsuite/src/ODBCPostgreSQLTest.h:46:7: style: The function 'testStoredFunction' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void testStoredFunction();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:131:15: note: Virtual function in base class
 virtual void testStoredFunction();
              ^
Data/ODBC/testsuite/src/ODBCPostgreSQLTest.h:46:7: note: Function in derived class
 void testStoredFunction();
      ^
Data/ODBC/testsuite/src/ODBCPostgreSQLTest.h:47:7: style: The function 'testStoredFunctionAny' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void testStoredFunctionAny();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:132:15: note: Virtual function in base class
 virtual void testStoredFunctionAny();
              ^
Data/ODBC/testsuite/src/ODBCPostgreSQLTest.h:47:7: note: Function in derived class
 void testStoredFunctionAny();
      ^
Data/ODBC/testsuite/src/ODBCPostgreSQLTest.h:48:7: style: The function 'testStoredFunctionDynamicAny' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void testStoredFunctionDynamicAny();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:133:15: note: Virtual function in base class
 virtual void testStoredFunctionDynamicAny();
              ^
Data/ODBC/testsuite/src/ODBCPostgreSQLTest.h:48:7: note: Function in derived class
 void testStoredFunctionDynamicAny();
      ^
Data/ODBC/testsuite/src/ODBCPostgreSQLTest.h:53:7: style: The function 'dropObject' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void dropObject(const std::string& type, const std::string& name);
      ^
Data/ODBC/testsuite/src/ODBCTest.h:162:15: note: Virtual function in base class
 virtual void dropObject(const std::string& type, const std::string& name);
              ^
Data/ODBC/testsuite/src/ODBCPostgreSQLTest.h:53:7: note: Function in derived class
 void dropObject(const std::string& type, const std::string& name);
      ^
Data/ODBC/testsuite/src/ODBCPostgreSQLTest.h:54:7: style: The function 'recreateNullableTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateNullableTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:163:15: note: Virtual function in base class
 virtual void recreateNullableTable();
              ^
Data/ODBC/testsuite/src/ODBCPostgreSQLTest.h:54:7: note: Function in derived class
 void recreateNullableTable();
      ^
Data/ODBC/testsuite/src/ODBCPostgreSQLTest.h:55:7: style: The function 'recreatePersonTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreatePersonTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:164:15: note: Virtual function in base class
 virtual void recreatePersonTable();
              ^
Data/ODBC/testsuite/src/ODBCPostgreSQLTest.h:55:7: note: Function in derived class
 void recreatePersonTable();
      ^
Data/ODBC/testsuite/src/ODBCPostgreSQLTest.h:56:7: style: The function 'recreatePersonBLOBTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreatePersonBLOBTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:166:15: note: Virtual function in base class
 virtual void recreatePersonBLOBTable();
              ^
Data/ODBC/testsuite/src/ODBCPostgreSQLTest.h:56:7: note: Function in derived class
 void recreatePersonBLOBTable();
      ^
Data/ODBC/testsuite/src/ODBCPostgreSQLTest.h:57:7: style: The function 'recreatePersonDateTimeTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreatePersonDateTimeTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:167:15: note: Virtual function in base class
 virtual void recreatePersonDateTimeTable();
              ^
Data/ODBC/testsuite/src/ODBCPostgreSQLTest.h:57:7: note: Function in derived class
 void recreatePersonDateTimeTable();
      ^
Data/ODBC/testsuite/src/ODBCPostgreSQLTest.h:58:7: style: The function 'recreatePersonDateTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreatePersonDateTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:168:15: note: Virtual function in base class
 virtual void recreatePersonDateTable();
              ^
Data/ODBC/testsuite/src/ODBCPostgreSQLTest.h:58:7: note: Function in derived class
 void recreatePersonDateTable();
      ^
Data/ODBC/testsuite/src/ODBCPostgreSQLTest.h:59:7: style: The function 'recreatePersonTimeTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreatePersonTimeTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:169:15: note: Virtual function in base class
 virtual void recreatePersonTimeTable();
              ^
Data/ODBC/testsuite/src/ODBCPostgreSQLTest.h:59:7: note: Function in derived class
 void recreatePersonTimeTable();
      ^
Data/ODBC/testsuite/src/ODBCPostgreSQLTest.h:60:7: style: The function 'recreateStringsTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateStringsTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:170:15: note: Virtual function in base class
 virtual void recreateStringsTable();
              ^
Data/ODBC/testsuite/src/ODBCPostgreSQLTest.h:60:7: note: Function in derived class
 void recreateStringsTable();
      ^
Data/ODBC/testsuite/src/ODBCPostgreSQLTest.h:61:7: style: The function 'recreateIntsTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateIntsTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:171:15: note: Virtual function in base class
 virtual void recreateIntsTable();
              ^
Data/ODBC/testsuite/src/ODBCPostgreSQLTest.h:61:7: note: Function in derived class
 void recreateIntsTable();
      ^
Data/ODBC/testsuite/src/ODBCPostgreSQLTest.h:62:7: style: The function 'recreateFloatsTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateFloatsTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:172:15: note: Virtual function in base class
 virtual void recreateFloatsTable();
              ^
Data/ODBC/testsuite/src/ODBCPostgreSQLTest.h:62:7: note: Function in derived class
 void recreateFloatsTable();
      ^
Data/ODBC/testsuite/src/ODBCPostgreSQLTest.h:63:7: style: The function 'recreateTuplesTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateTuplesTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:174:15: note: Virtual function in base class
 virtual void recreateTuplesTable();
              ^
Data/ODBC/testsuite/src/ODBCPostgreSQLTest.h:63:7: note: Function in derived class
 void recreateTuplesTable();
      ^
Data/ODBC/testsuite/src/ODBCPostgreSQLTest.h:64:7: style: The function 'recreateVectorsTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateVectorsTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:175:15: note: Virtual function in base class
 virtual void recreateVectorsTable();
              ^
Data/ODBC/testsuite/src/ODBCPostgreSQLTest.h:64:7: note: Function in derived class
 void recreateVectorsTable();
      ^
Data/ODBC/testsuite/src/ODBCPostgreSQLTest.h:65:7: style: The function 'recreateAnysTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateAnysTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:176:15: note: Virtual function in base class
 virtual void recreateAnysTable();
              ^
Data/ODBC/testsuite/src/ODBCPostgreSQLTest.h:65:7: note: Function in derived class
 void recreateAnysTable();
      ^
Data/ODBC/testsuite/src/ODBCPostgreSQLTest.h:66:7: style: The function 'recreateNullsTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateNullsTable(const std::string& notNull="");
      ^
Data/ODBC/testsuite/src/ODBCTest.h:177:15: note: Virtual function in base class
 virtual void recreateNullsTable(const std::string& notNull="");
              ^
Data/ODBC/testsuite/src/ODBCPostgreSQLTest.h:66:7: note: Function in derived class
 void recreateNullsTable(const std::string& notNull="");
      ^
Data/ODBC/testsuite/src/ODBCPostgreSQLTest.h:67:7: style: The function 'recreateBoolTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateBoolTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:178:15: note: Virtual function in base class
 virtual void recreateBoolTable();
              ^
Data/ODBC/testsuite/src/ODBCPostgreSQLTest.h:67:7: note: Function in derived class
 void recreateBoolTable();
      ^
Data/ODBC/testsuite/src/ODBCPostgreSQLTest.h:68:7: style: The function 'recreateMiscTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateMiscTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:179:15: note: Virtual function in base class
 virtual void recreateMiscTable();
              ^
Data/ODBC/testsuite/src/ODBCPostgreSQLTest.h:68:7: note: Function in derived class
 void recreateMiscTable();
      ^
Data/ODBC/testsuite/src/ODBCPostgreSQLTest.h:69:7: style: The function 'recreateLogTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateLogTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:180:15: note: Virtual function in base class
 virtual void recreateLogTable();
              ^
Data/ODBC/testsuite/src/ODBCPostgreSQLTest.h:69:7: note: Function in derived class
 void recreateLogTable();
      ^
Data/ODBC/testsuite/src/ODBCPostgreSQLTest.h:70:7: style: The function 'recreateUnicodeTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateUnicodeTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:181:15: note: Virtual function in base class
 virtual void recreateUnicodeTable();
              ^
Data/ODBC/testsuite/src/ODBCPostgreSQLTest.h:70:7: note: Function in derived class
 void recreateUnicodeTable();
      ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:38:2: style: Class 'ODBCSQLServerTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 ODBCSQLServerTest(const std::string& name);
 ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:41:7: style: The function 'testBareboneODBC' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void testBareboneODBC();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:48:15: note: Virtual function in base class
 virtual void testBareboneODBC() = 0;
              ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:41:7: note: Function in derived class
 void testBareboneODBC();
      ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:43:7: style: The function 'testTempTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void testTempTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:104:15: note: Virtual function in base class
 virtual void testTempTable();
              ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:43:7: note: Function in derived class
 void testTempTable();
      ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:45:7: style: The function 'testBLOB' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void testBLOB();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:106:15: note: Virtual function in base class
 virtual void testBLOB();
              ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:45:7: note: Function in derived class
 void testBLOB();
      ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:46:7: style: The function 'testNull' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void testNull();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:135:15: note: Virtual function in base class
 virtual void testNull();
              ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:46:7: note: Function in derived class
 void testNull();
      ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:47:7: style: The function 'testBulk' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void testBulk();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:82:15: note: Virtual function in base class
 virtual void testBulk();
              ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:47:7: note: Function in derived class
 void testBulk();
      ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:49:7: style: The function 'testStoredProcedure' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void testStoredProcedure();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:127:15: note: Virtual function in base class
 virtual void testStoredProcedure();
              ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:49:7: note: Function in derived class
 void testStoredProcedure();
      ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:51:7: style: The function 'testStoredProcedureAny' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void testStoredProcedureAny();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:128:15: note: Virtual function in base class
 virtual void testStoredProcedureAny();
              ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:51:7: note: Function in derived class
 void testStoredProcedureAny();
      ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:52:7: style: The function 'testStoredProcedureDynamicAny' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void testStoredProcedureDynamicAny();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:129:15: note: Virtual function in base class
 virtual void testStoredProcedureDynamicAny();
              ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:52:7: note: Function in derived class
 void testStoredProcedureDynamicAny();
      ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:54:7: style: The function 'testStoredFunction' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void testStoredFunction();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:131:15: note: Virtual function in base class
 virtual void testStoredFunction();
              ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:54:7: note: Function in derived class
 void testStoredFunction();
      ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:59:7: style: The function 'dropObject' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void dropObject(const std::string& type, const std::string& name);
      ^
Data/ODBC/testsuite/src/ODBCTest.h:162:15: note: Virtual function in base class
 virtual void dropObject(const std::string& type, const std::string& name);
              ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:59:7: note: Function in derived class
 void dropObject(const std::string& type, const std::string& name);
      ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:60:7: style: The function 'recreateNullableTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateNullableTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:163:15: note: Virtual function in base class
 virtual void recreateNullableTable();
              ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:60:7: note: Function in derived class
 void recreateNullableTable();
      ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:61:7: style: The function 'recreatePersonTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreatePersonTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:164:15: note: Virtual function in base class
 virtual void recreatePersonTable();
              ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:61:7: note: Function in derived class
 void recreatePersonTable();
      ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:62:7: style: The function 'recreatePersonBLOBTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreatePersonBLOBTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:166:15: note: Virtual function in base class
 virtual void recreatePersonBLOBTable();
              ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:62:7: note: Function in derived class
 void recreatePersonBLOBTable();
      ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:63:7: style: The function 'recreatePersonDateTimeTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreatePersonDateTimeTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:167:15: note: Virtual function in base class
 virtual void recreatePersonDateTimeTable();
              ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:63:7: note: Function in derived class
 void recreatePersonDateTimeTable();
      ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:64:7: style: The function 'recreatePersonDateTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreatePersonDateTable() { /* no-op */ };
      ^
Data/ODBC/testsuite/src/ODBCTest.h:168:15: note: Virtual function in base class
 virtual void recreatePersonDateTable();
              ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:64:7: note: Function in derived class
 void recreatePersonDateTable() { /* no-op */ };
      ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:65:7: style: The function 'recreatePersonTimeTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreatePersonTimeTable() { /* no-op */ };
      ^
Data/ODBC/testsuite/src/ODBCTest.h:169:15: note: Virtual function in base class
 virtual void recreatePersonTimeTable();
              ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:65:7: note: Function in derived class
 void recreatePersonTimeTable() { /* no-op */ };
      ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:66:7: style: The function 'recreateStringsTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateStringsTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:170:15: note: Virtual function in base class
 virtual void recreateStringsTable();
              ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:66:7: note: Function in derived class
 void recreateStringsTable();
      ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:67:7: style: The function 'recreateIntsTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateIntsTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:171:15: note: Virtual function in base class
 virtual void recreateIntsTable();
              ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:67:7: note: Function in derived class
 void recreateIntsTable();
      ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:68:7: style: The function 'recreateFloatsTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateFloatsTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:172:15: note: Virtual function in base class
 virtual void recreateFloatsTable();
              ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:68:7: note: Function in derived class
 void recreateFloatsTable();
      ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:69:7: style: The function 'recreateUUIDsTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateUUIDsTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:173:15: note: Virtual function in base class
 virtual void recreateUUIDsTable();
              ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:69:7: note: Function in derived class
 void recreateUUIDsTable();
      ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:70:7: style: The function 'recreateTuplesTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateTuplesTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:174:15: note: Virtual function in base class
 virtual void recreateTuplesTable();
              ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:70:7: note: Function in derived class
 void recreateTuplesTable();
      ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:72:7: style: The function 'recreateVectorsTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateVectorsTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:175:15: note: Virtual function in base class
 virtual void recreateVectorsTable();
              ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:72:7: note: Function in derived class
 void recreateVectorsTable();
      ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:73:7: style: The function 'recreateAnysTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateAnysTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:176:15: note: Virtual function in base class
 virtual void recreateAnysTable();
              ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:73:7: note: Function in derived class
 void recreateAnysTable();
      ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:74:7: style: The function 'recreateNullsTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateNullsTable(const std::string& notNull = "");
      ^
Data/ODBC/testsuite/src/ODBCTest.h:177:15: note: Virtual function in base class
 virtual void recreateNullsTable(const std::string& notNull="");
              ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:74:7: note: Function in derived class
 void recreateNullsTable(const std::string& notNull = "");
      ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:75:7: style: The function 'recreateBoolTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateBoolTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:178:15: note: Virtual function in base class
 virtual void recreateBoolTable();
              ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:75:7: note: Function in derived class
 void recreateBoolTable();
      ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:76:7: style: The function 'recreateMiscTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateMiscTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:179:15: note: Virtual function in base class
 virtual void recreateMiscTable();
              ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:76:7: note: Function in derived class
 void recreateMiscTable();
      ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:77:7: style: The function 'recreateLogTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateLogTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:180:15: note: Virtual function in base class
 virtual void recreateLogTable();
              ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:77:7: note: Function in derived class
 void recreateLogTable();
      ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:78:7: style: The function 'recreateUnicodeTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateUnicodeTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:181:15: note: Virtual function in base class
 virtual void recreateUnicodeTable();
              ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:78:7: note: Function in derived class
 void recreateUnicodeTable();
      ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:79:7: style: The function 'recreateEncodingTables' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateEncodingTables();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:182:15: note: Virtual function in base class
 virtual void recreateEncodingTables();
              ^
Data/ODBC/testsuite/src/ODBCSQLServerTest.h:79:7: note: Function in derived class
 void recreateEncodingTables();
      ^
Data/ODBC/testsuite/src/ODBCSQLiteTest.h:30:2: style: Class 'ODBCSQLiteTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 ODBCSQLiteTest(const std::string& name);
 ^
Data/ODBC/testsuite/src/ODBCSQLiteTest.h:33:7: style: The function 'testBareboneODBC' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void testBareboneODBC();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:48:15: note: Virtual function in base class
 virtual void testBareboneODBC() = 0;
              ^
Data/ODBC/testsuite/src/ODBCSQLiteTest.h:33:7: note: Function in derived class
 void testBareboneODBC();
      ^
Data/ODBC/testsuite/src/ODBCSQLiteTest.h:34:7: style: The function 'testAffectedRows' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void testAffectedRows();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:72:15: note: Virtual function in base class
 virtual void testAffectedRows();
              ^
Data/ODBC/testsuite/src/ODBCSQLiteTest.h:34:7: note: Function in derived class
 void testAffectedRows();
      ^
Data/ODBC/testsuite/src/ODBCSQLiteTest.h:35:7: style: The function 'testNull' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void testNull();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:135:15: note: Virtual function in base class
 virtual void testNull();
              ^
Data/ODBC/testsuite/src/ODBCSQLiteTest.h:35:7: note: Function in derived class
 void testNull();
      ^
Data/ODBC/testsuite/src/ODBCSQLiteTest.h:40:7: style: The function 'dropObject' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void dropObject(const std::string& type, const std::string& name);
      ^
Data/ODBC/testsuite/src/ODBCTest.h:162:15: note: Virtual function in base class
 virtual void dropObject(const std::string& type, const std::string& name);
              ^
Data/ODBC/testsuite/src/ODBCSQLiteTest.h:40:7: note: Function in derived class
 void dropObject(const std::string& type, const std::string& name);
      ^
Data/ODBC/testsuite/src/ODBCSQLiteTest.h:41:7: style: The function 'recreateNullableTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateNullableTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:163:15: note: Virtual function in base class
 virtual void recreateNullableTable();
              ^
Data/ODBC/testsuite/src/ODBCSQLiteTest.h:41:7: note: Function in derived class
 void recreateNullableTable();
      ^
Data/ODBC/testsuite/src/ODBCSQLiteTest.h:42:7: style: The function 'recreatePersonTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreatePersonTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:164:15: note: Virtual function in base class
 virtual void recreatePersonTable();
              ^
Data/ODBC/testsuite/src/ODBCSQLiteTest.h:42:7: note: Function in derived class
 void recreatePersonTable();
      ^
Data/ODBC/testsuite/src/ODBCSQLiteTest.h:43:7: style: The function 'recreatePersonBLOBTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreatePersonBLOBTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:166:15: note: Virtual function in base class
 virtual void recreatePersonBLOBTable();
              ^
Data/ODBC/testsuite/src/ODBCSQLiteTest.h:43:7: note: Function in derived class
 void recreatePersonBLOBTable();
      ^
Data/ODBC/testsuite/src/ODBCSQLiteTest.h:44:7: style: The function 'recreatePersonDateTimeTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreatePersonDateTimeTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:167:15: note: Virtual function in base class
 virtual void recreatePersonDateTimeTable();
              ^
Data/ODBC/testsuite/src/ODBCSQLiteTest.h:44:7: note: Function in derived class
 void recreatePersonDateTimeTable();
      ^
Data/ODBC/testsuite/src/ODBCSQLiteTest.h:45:7: style: The function 'recreateStringsTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateStringsTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:170:15: note: Virtual function in base class
 virtual void recreateStringsTable();
              ^
Data/ODBC/testsuite/src/ODBCSQLiteTest.h:45:7: note: Function in derived class
 void recreateStringsTable();
      ^
Data/ODBC/testsuite/src/ODBCSQLiteTest.h:46:7: style: The function 'recreateIntsTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateIntsTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:171:15: note: Virtual function in base class
 virtual void recreateIntsTable();
              ^
Data/ODBC/testsuite/src/ODBCSQLiteTest.h:46:7: note: Function in derived class
 void recreateIntsTable();
      ^
Data/ODBC/testsuite/src/ODBCSQLiteTest.h:47:7: style: The function 'recreateFloatsTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateFloatsTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:172:15: note: Virtual function in base class
 virtual void recreateFloatsTable();
              ^
Data/ODBC/testsuite/src/ODBCSQLiteTest.h:47:7: note: Function in derived class
 void recreateFloatsTable();
      ^
Data/ODBC/testsuite/src/ODBCSQLiteTest.h:48:7: style: The function 'recreateTuplesTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateTuplesTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:174:15: note: Virtual function in base class
 virtual void recreateTuplesTable();
              ^
Data/ODBC/testsuite/src/ODBCSQLiteTest.h:48:7: note: Function in derived class
 void recreateTuplesTable();
      ^
Data/ODBC/testsuite/src/ODBCSQLiteTest.h:49:7: style: The function 'recreateVectorsTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateVectorsTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:175:15: note: Virtual function in base class
 virtual void recreateVectorsTable();
              ^
Data/ODBC/testsuite/src/ODBCSQLiteTest.h:49:7: note: Function in derived class
 void recreateVectorsTable();
      ^
Data/ODBC/testsuite/src/ODBCSQLiteTest.h:50:7: style: The function 'recreateAnysTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateAnysTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:176:15: note: Virtual function in base class
 virtual void recreateAnysTable();
              ^
Data/ODBC/testsuite/src/ODBCSQLiteTest.h:50:7: note: Function in derived class
 void recreateAnysTable();
      ^
Data/ODBC/testsuite/src/ODBCSQLiteTest.h:51:7: style: The function 'recreateNullsTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateNullsTable(const std::string& notNull = "");
      ^
Data/ODBC/testsuite/src/ODBCTest.h:177:15: note: Virtual function in base class
 virtual void recreateNullsTable(const std::string& notNull="");
              ^
Data/ODBC/testsuite/src/ODBCSQLiteTest.h:51:7: note: Function in derived class
 void recreateNullsTable(const std::string& notNull = "");
      ^
Data/ODBC/testsuite/src/ODBCSQLiteTest.h:52:7: style: The function 'recreateMiscTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateMiscTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:179:15: note: Virtual function in base class
 virtual void recreateMiscTable();
              ^
Data/ODBC/testsuite/src/ODBCSQLiteTest.h:52:7: note: Function in derived class
 void recreateMiscTable();
      ^
Data/ODBC/testsuite/src/ODBCSQLiteTest.h:53:7: style: The function 'recreateLogTable' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void recreateLogTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.h:180:15: note: Virtual function in base class
 virtual void recreateLogTable();
              ^
Data/ODBC/testsuite/src/ODBCSQLiteTest.h:53:7: note: Function in derived class
 void recreateLogTable();
      ^
Data/ODBC/testsuite/src/ODBCTest.cpp:84:23: style: Variable 'tableName' is assigned a value that is never used. [unreadVariable]
 std::string tableName("Person");
                      ^
Data/ODBC/testsuite/src/ODBCTest.cpp:101:23: style: Variable 'tableName' is assigned a value that is never used. [unreadVariable]
 std::string tableName("Person");
                      ^
Data/ODBC/testsuite/src/ODBCTest.cpp:1278:23: style: Variable 'tableName' is assigned a value that is never used. [unreadVariable]
 std::string tableName("Person");
                      ^
Data/ODBC/testsuite/src/SQLExecutor.cpp:534:38: style:inconclusive: Boolean expression 'pParam==(SQLPOINTER)' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
     else if (pParam == (SQLPOINTER) &fourth)
                                     ^
Data/ODBC/testsuite/src/SQLExecutor.cpp:536:38: style:inconclusive: Boolean expression 'pParam==(SQLPOINTER)' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
     else if (pParam == (SQLPOINTER) &fifth)
                                     ^
Data/ODBC/testsuite/src/SQLExecutor.cpp:538:38: style:inconclusive: Boolean expression 'pParam==(SQLPOINTER)' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
     else if (pParam == (SQLPOINTER) &sixth)
                                     ^
Data/ODBC/testsuite/src/SQLExecutor.cpp:534:38: style: Boolean result is used in bitwise operation. Clarify expression with parentheses. [clarifyCondition]
     else if (pParam == (SQLPOINTER) &fourth)
                                     ^
Data/ODBC/testsuite/src/SQLExecutor.cpp:536:38: style: Boolean result is used in bitwise operation. Clarify expression with parentheses. [clarifyCondition]
     else if (pParam == (SQLPOINTER) &fifth)
                                     ^
Data/ODBC/testsuite/src/SQLExecutor.cpp:538:38: style: Boolean result is used in bitwise operation. Clarify expression with parentheses. [clarifyCondition]
     else if (pParam == (SQLPOINTER) &sixth)
                                     ^
Data/ODBC/testsuite/src/SQLExecutor.cpp:3340:14: style: The scope of the variable 'rows' can be reduced. [variableScope]
 std::size_t rows = 0;
             ^
Data/ODBC/testsuite/src/SQLExecutor.cpp:2704:12: style: Local variable 'i' shadows outer variable [shadowVariable]
  for (int i = 1; it != end; ++it, ++i)
           ^
Data/ODBC/testsuite/src/SQLExecutor.cpp:2667:7: note: Shadowed declaration
  int i = rset.value<int>(0,0);
      ^
Data/ODBC/testsuite/src/SQLExecutor.cpp:2704:12: note: Shadow variable
  for (int i = 1; it != end; ++it, ++i)
           ^
Data/ODBC/testsuite/src/SQLExecutor.cpp:2713:8: style: Local variable 'i' shadows outer variable [shadowVariable]
   int i = rset.value<int>(0,0);
       ^
Data/ODBC/testsuite/src/SQLExecutor.cpp:2667:7: note: Shadowed declaration
  int i = rset.value<int>(0,0);
      ^
Data/ODBC/testsuite/src/SQLExecutor.cpp:2713:8: note: Shadow variable
   int i = rset.value<int>(0,0);
       ^
Data/ODBC/testsuite/src/SQLExecutor.cpp:2721:12: style: Local variable 'i' shadows outer variable [shadowVariable]
    double i = rset.value<double>(0,0);
           ^
Data/ODBC/testsuite/src/SQLExecutor.cpp:2667:7: note: Shadowed declaration
  int i = rset.value<int>(0,0);
      ^
Data/ODBC/testsuite/src/SQLExecutor.cpp:2721:12: note: Shadow variable
    double i = rset.value<double>(0,0);
           ^
Data/ODBC/testsuite/src/SQLExecutor.cpp:1054:14: style: Unused variable: result [unusedVariable]
 std::string result;
             ^
Data/ODBC/testsuite/src/SQLExecutor.cpp:1230:14: style: Unused variable: result [unusedVariable]
 std::string result;
             ^
Data/ODBC/testsuite/src/SQLExecutor.cpp:1346:14: style: Unused variable: result [unusedVariable]
 std::string result;
             ^
Data/ODBC/testsuite/src/SQLExecutor.cpp:1867:14: style: Unused variable: result [unusedVariable]
 std::string result;
             ^
Data/ODBC/testsuite/src/SQLExecutor.cpp:1962:14: style: Unused variable: result [unusedVariable]
 std::string result;
             ^
Data/ODBC/testsuite/src/SQLExecutor.cpp:3340:19: style: Variable 'rows' is assigned a value that is never used. [unreadVariable]
 std::size_t rows = 0;
                  ^
Data/ODBC/testsuite/src/SQLExecutor.cpp:3607:14: style: Unused variable: result [unusedVariable]
 std::string result;
             ^
Data/ODBC/testsuite/src/SQLExecutor.cpp:3703:14: style: Unused variable: result [unusedVariable]
 std::string result;
             ^
Data/ODBC/testsuite/src/SQLExecutor.cpp:3975:17: style: Variable 'stmt' is assigned a value that is never used. [unreadVariable]
 Statement stmt = (session() << "SELECT EmptyString, EmptyInteger, EmptyFloat, EmptyDateTime FROM NullableTest", into(ds), into(di), into(df), into(dd), now);
                ^
Data/ODBC/testsuite/src/SQLExecutor.cpp:3368:4: style: Redundant initialization for 's'. The initialized value is overwritten before it is read. [redundantInitialization]
 s = us;
   ^
Data/ODBC/testsuite/src/SQLExecutor.cpp:3364:8: note: s is initialized
 Any s = ss;
       ^
Data/ODBC/testsuite/src/SQLExecutor.cpp:3368:4: note: s is overwritten
 s = us;
   ^
Data/PostgreSQL/src/BinaryExtractor.cpp:43:19: warning: The address of local variable 'flip' might be accessed at non-zero index. [objectIndex]
   std::swap(flipP[i], flipP[sizeof(T) - i - 1]);
                  ^
Data/PostgreSQL/src/BinaryExtractor.cpp:39:41: note: Address of variable taken here.
  char* flipP = reinterpret_cast<char*>(&flip);
                                        ^
Data/PostgreSQL/src/BinaryExtractor.cpp:43:19: note: The address of local variable 'flip' might be accessed at non-zero index.
   std::swap(flipP[i], flipP[sizeof(T) - i - 1]);
                  ^
Data/PostgreSQL/src/SessionImpl.cpp:37:93: performance: Function parameter 'anOptionsMap' should be passed by const reference. [passedByValue]
 std::string createConnectionStringFromOptionsMap(const std::map <std::string, std::string> anOptionsMap)
                                                                                            ^
Data/PostgreSQL/src/SessionImpl.cpp:30:75: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
  while ((aFromStringCItr != aToStringCItr) && isspace(*aFromStringCItr)) aFromStringCItr++;
                                                                          ^
Data/PostgreSQL/src/SessionImpl.cpp:32:79: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
  while ((aFromStringCItr != aToStringCItr) && isspace(*(aToStringCItr - 1))) aToStringCItr--;
                                                                              ^
Data/PostgreSQL/testsuite/src/PostgreSQLTest.h:35:2: style: Class 'PostgreSQLTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 PostgreSQLTest(const std::string& name);
 ^
Data/PostgreSQL/testsuite/src/SQLExecutor.cpp:339:19: portability:inconclusive: Casting from float * to signed char * is not portable due to different binary data representations on different platforms. [invalidPointerCast]
 paramValues[4] = reinterpret_cast<char*>(&fifth);
                  ^
Data/PostgreSQL/testsuite/src/SQLExecutor.cpp:440:12: portability: Casting between signed char * and float * which have an incompatible binary data representation. [invalidPointerCast]
 fifth = *((float *) pSelectResult[ 4 ]);
           ^
Data/PostgreSQL/testsuite/src/SQLExecutor.cpp:341:18: style: Variable 'paramLengths[4]' is reassigned a value before the old one has been used. [redundantAssignment]
 paramLengths[4] = 1;  // binary
                 ^
Data/PostgreSQL/testsuite/src/SQLExecutor.cpp:340:18: note: paramLengths[4] is assigned
 paramLengths[4] = sizeof(fifth);
                 ^
Data/PostgreSQL/testsuite/src/SQLExecutor.cpp:341:18: note: paramLengths[4] is overwritten
 paramLengths[4] = 1;  // binary
                 ^
Data/PostgreSQL/testsuite/src/SQLExecutor.cpp:142:72: style:inconclusive: Function 'SQLExecutor' argument 2 names different: declaration '_pSession' definition 'pSession'. [funcArgNamesDifferent]
SQLExecutor::SQLExecutor(const std::string& name, Poco::Data::Session* pSession):
                                                                       ^
Data/PostgreSQL/testsuite/src/SQLExecutor.h:35:60: note: Function 'SQLExecutor' argument 2 names different: declaration '_pSession' definition 'pSession'.
 SQLExecutor(const std::string& name, Poco::Data::Session* _pSession);
                                                           ^
Data/PostgreSQL/testsuite/src/SQLExecutor.cpp:142:72: note: Function 'SQLExecutor' argument 2 names different: declaration '_pSession' definition 'pSession'.
SQLExecutor::SQLExecutor(const std::string& name, Poco::Data::Session* pSession):
                                                                       ^
Data/PostgreSQL/testsuite/src/SQLExecutor.cpp:545:14: style: Unused variable: result [unusedVariable]
 std::string result;
             ^
Data/PostgreSQL/testsuite/src/SQLExecutor.cpp:940:14: style: Unused variable: result [unusedVariable]
 std::string result;
             ^
Data/PostgreSQL/testsuite/src/SQLExecutor.cpp:1035:14: style: Unused variable: result [unusedVariable]
 std::string result;
             ^
Data/PostgreSQL/testsuite/src/SQLExecutor.cpp:1896:14: style: Unused variable: result [unusedVariable]
 std::string result;
             ^
Data/PostgreSQL/testsuite/src/SQLExecutor.cpp:1994:14: style: Unused variable: result [unusedVariable]
 std::string result;
             ^
Data/SQLite/src/Connector.cpp:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 15 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Data/SQLite/src/sqlite3.h:291:0: information: Skipping configuration 'SQLITE_INT64_TYPE' since the value of 'SQLITE_INT64_TYPE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  typedef SQLITE_INT64_TYPE sqlite_int64;
^
Data/SQLite/src/sqlite3.h:295:0: information: Skipping configuration 'SQLITE_INT64_TYPE' since the value of 'SQLITE_INT64_TYPE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    typedef unsigned SQLITE_INT64_TYPE sqlite_uint64;
^
Data/SQLite/src/sqlite3.h:291:0: information: Skipping configuration 'SQLITE_INT64_TYPE;SQLITE_UINT64_TYPE' since the value of 'SQLITE_INT64_TYPE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  typedef SQLITE_INT64_TYPE sqlite_int64;
^
Data/SQLite/src/sqlite3.h:293:0: information: Skipping configuration 'SQLITE_INT64_TYPE;SQLITE_UINT64_TYPE' since the value of 'SQLITE_UINT64_TYPE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    typedef SQLITE_UINT64_TYPE sqlite_uint64;
^
Data/SQLite/src/Extractor.cpp:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 15 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Data/SQLite/src/SQLiteStatementImpl.cpp:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 15 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Data/SQLite/src/SQLiteStatementImpl.cpp:190:14: style: The scope of the variable 'boundRowCount' can be reduced. [variableScope]
 std::size_t boundRowCount;
             ^
Data/SQLite/src/SessionImpl.cpp:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 15 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Data/SQLite/src/SessionImpl.cpp:171:7: style: The scope of the variable 'rc' can be reduced. [variableScope]
  int rc = 0;
      ^
Data/SQLite/src/Utility.cpp:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Data/SQLite/src/Utility.cpp:253:18: style: The scope of the variable 'pBackup' can be reduced. [variableScope]
 sqlite3_backup* pBackup;
                 ^
Data/SQLite/src/Utility.cpp:278:18: style: The scope of the variable 'pBackup' can be reduced. [variableScope]
 sqlite3_backup* pBackup;
                 ^
Data/SQLite/src/sqlite3.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 478 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Data/SQLite/src/sqlite3.c:24885:3: portability: Returning an integer in a function with pointer return type is not portable. [CastIntegerToAddressAtReturn]
  return pVfs->xDlSym(pVfs, pHdle, zSym);
  ^
Data/SQLite/src/sqlite3.c:50420:3: portability: Returning an integer in a function with pointer return type is not portable. [CastIntegerToAddressAtReturn]
  return ORIGVFS(pVfs)->xDlSym(ORIGVFS(pVfs), p, zSym);
  ^
Data/SQLite/src/sqlite3.c:102890:11: warning: Assert statement calls a function which may have desired side effects: 'sqlite3ExprIsInteger'. [assertWithSideEffect]
  assert( sqlite3ExprIsInteger(pE, &i)==0 );
          ^
Data/SQLite/src/sqlite3.c:106108:15: warning: Assert statement calls a function which may have desired side effects: 'sqlite3GetInt32'. [assertWithSideEffect]
           || sqlite3GetInt32(p->u.zToken, &rc)==0 );
              ^
Data/SQLite/src/sqlite3.c:123464:22: warning: Assert statement calls a function which may have desired side effects: 'sqlite3_value_blob'. [assertWithSideEffect]
      assert( zBlob==sqlite3_value_blob(pValue) ); /* No encoding change */
                     ^
Data/SQLite/src/sqlite3.c:123591:18: warning: Assert statement calls a function which may have desired side effects: 'sqlite3_value_blob'. [assertWithSideEffect]
  assert( pBlob==sqlite3_value_blob(argv[0]) );  /* No encoding change */
                 ^
Data/SQLite/src/sqlite3.c:174794:38: warning: Assert statement modifies 'x'. [assignmentInAssert]
      assert( /*side-effects-ok*/ (x = va_arg(ap,int))!=0 );
                                     ^
Data/SQLite/src/sqlite3.c:135225:3: error: Address of local auto-variable assigned to a function parameter. [autoVariables]
  db->pParse = &sParse;
  ^
Data/SQLite/src/sqlite3.c:136827:7: error: Address of local auto-variable assigned to a function parameter. [autoVariables]
      pSort->pDeferredRowLoad = &sRowLoadInfo;
      ^
Data/SQLite/src/sqlite3.c:143672:3: error: Address of local auto-variable assigned to a function parameter. [autoVariables]
  *pazResult = &res.azResult[1];
  ^
Data/SQLite/src/sqlite3.c:65320:45: style:inconclusive: Boolean expression '*(char*)(&sqlite3one)==0' is used in bitwise operation. Did you mean '||'? [bitwiseOnBoolean]
    sqlite3Put4byte(&aWalHdr[0], (WAL_MAGIC | SQLITE_BIGENDIAN));
                                            ^
Data/SQLite/src/sqlite3.c:22970:39: warning: Either the condition 'op>=0' is redundant or the array 'statMutex[10]' is accessed at index -1, which is out of bounds. [negativeIndex]
  assert( sqlite3_mutex_held(statMutex[op] ? sqlite3Pcache1Mutex()
                                      ^
Data/SQLite/src/sqlite3.c:22972:13: note: Assuming that condition 'op>=0' is not redundant
  assert( op>=0 && op<ArraySize(wsdStat.nowValue) );
            ^
Data/SQLite/src/sqlite3.c:22970:39: note: Negative array index
  assert( sqlite3_mutex_held(statMutex[op] ? sqlite3Pcache1Mutex()
                                      ^
Data/SQLite/src/sqlite3.c:74186:27: error: Array 'pCArray->apEnd[6]' accessed at index 6, which is out of bounds. [arrayIndexOutOfBounds]
  pSrcEnd = pCArray->apEnd[k];
                          ^
Data/SQLite/src/sqlite3.c:74185:3: note: After for loop, k has value 6
  for(k=0; pCArray->ixNx[k]<=i && ALWAYS(k<NB*2); k++){}
  ^
Data/SQLite/src/sqlite3.c:74186:27: note: Array index out of bounds
  pSrcEnd = pCArray->apEnd[k];
                          ^
Data/SQLite/src/sqlite3.c:74269:24: error: Array 'pCArray->apEnd[6]' accessed at index 6, which is out of bounds. [arrayIndexOutOfBounds]
  pEnd = pCArray->apEnd[k];
                       ^
Data/SQLite/src/sqlite3.c:74268:3: note: After for loop, k has value 6
  for(k=0; pCArray->ixNx[k]<=i && ALWAYS(k<NB*2); k++){}
  ^
Data/SQLite/src/sqlite3.c:74269:24: note: Array index out of bounds
  pEnd = pCArray->apEnd[k];
                       ^
Data/SQLite/src/sqlite3.c:75366:22: error: Array 'b.apEnd[6]' accessed at index 6, which is out of bounds. [arrayIndexOutOfBounds]
    pSrcEnd = b.apEnd[k];
                     ^
Data/SQLite/src/sqlite3.c:75365:5: note: After for loop, k has value 6
    for(k=0; b.ixNx[k]<=j && ALWAYS(k<NB*2); k++){}
    ^
Data/SQLite/src/sqlite3.c:75366:22: note: Array index out of bounds
    pSrcEnd = b.apEnd[k];
                     ^
Data/SQLite/src/sqlite3.c:34135:14: style: Array index 'i' is used before limits check. [arrayIndexThenCheck]
    for(i=0; sqlite3Isxdigit(zNum[i]) && i<8; i++){
             ^
Data/SQLite/src/sqlite3.c:74185:25: style: Array index 'k' is used before limits check. [arrayIndexThenCheck]
  for(k=0; pCArray->ixNx[k]<=i && ALWAYS(k<NB*2); k++){}
                        ^
Data/SQLite/src/sqlite3.c:74268:25: style: Array index 'k' is used before limits check. [arrayIndexThenCheck]
  for(k=0; pCArray->ixNx[k]<=i && ALWAYS(k<NB*2); k++){}
                        ^
Data/SQLite/src/sqlite3.c:75365:20: style: Array index 'k' is used before limits check. [arrayIndexThenCheck]
    for(k=0; b.ixNx[k]<=j && ALWAYS(k<NB*2); k++){}
                   ^
Data/SQLite/src/sqlite3.c:34129:17: error: The address of local variable 'z' is accessed at non-zero index. [objectIndex]
        && (zNum[1]=='x' || zNum[1]=='X')
                ^
Data/SQLite/src/sqlite3.c:167875:50: note: Address of variable taken here.
      if( yymsp[0].minor.yy528 ) sqlite3GetInt32(&t.z[1], &yymsp[0].minor.yy528->iTable);
                                                 ^
Data/SQLite/src/sqlite3.c:167875:50: note: Calling function 'sqlite3GetInt32', 1st argument '&t.z[1]' value is lifetime=z
      if( yymsp[0].minor.yy528 ) sqlite3GetInt32(&t.z[1], &yymsp[0].minor.yy528->iTable);
                                                 ^
Data/SQLite/src/sqlite3.c:34129:17: note: The address of local variable 'z' is accessed at non-zero index.
        && (zNum[1]=='x' || zNum[1]=='X')
                ^
Data/SQLite/src/sqlite3.c:34130:12: error: The address of local variable 'z' is accessed at non-zero index. [objectIndex]
        && sqlite3Isxdigit(zNum[2])
           ^
Data/SQLite/src/sqlite3.c:167875:50: note: Address of variable taken here.
      if( yymsp[0].minor.yy528 ) sqlite3GetInt32(&t.z[1], &yymsp[0].minor.yy528->iTable);
                                                 ^
Data/SQLite/src/sqlite3.c:167875:50: note: Calling function 'sqlite3GetInt32', 1st argument '&t.z[1]' value is lifetime=z
      if( yymsp[0].minor.yy528 ) sqlite3GetInt32(&t.z[1], &yymsp[0].minor.yy528->iTable);
                                                 ^
Data/SQLite/src/sqlite3.c:34130:12: note: The address of local variable 'z' is accessed at non-zero index.
        && sqlite3Isxdigit(zNum[2])
           ^
Data/SQLite/src/sqlite3.c:62399:24: warning: The address of local variable 'h1' might be accessed at non-zero index. [objectIndex]
  u32 *aEnd = (u32 *)&a[nByte];
                       ^
Data/SQLite/src/sqlite3.c:64016:28: note: Address of variable taken here.
  walChecksumBytes(1, (u8*)&h1, sizeof(h1)-sizeof(h1.aCksum), 0, aCksum);
                           ^
Data/SQLite/src/sqlite3.c:64016:23: note: Calling function 'walChecksumBytes', 2nd argument '(unsigned char*)&h1' value is lifetime=h1
  walChecksumBytes(1, (u8*)&h1, sizeof(h1)-sizeof(h1.aCksum), 0, aCksum);
                      ^
Data/SQLite/src/sqlite3.c:62399:24: note: The address of local variable 'h1' might be accessed at non-zero index.
  u32 *aEnd = (u32 *)&a[nByte];
                       ^
Data/SQLite/src/sqlite3.c:63329:23: warning: The address of local variable 'aMerge' might be accessed at non-zero index. [objectIndex]
      logpage = aRight[iRight++];
                      ^
Data/SQLite/src/sqlite3.c:63393:46: note: Address of variable taken here.
      walMerge(aContent, p->aList, p->nList, &aMerge, &nMerge, aBuffer);
                                             ^
Data/SQLite/src/sqlite3.c:63393:46: note: Calling function 'walMerge', 4th argument '&aMerge' value is lifetime=aMerge
      walMerge(aContent, p->aList, p->nList, &aMerge, &nMerge, aBuffer);
                                             ^
Data/SQLite/src/sqlite3.c:63329:23: note: The address of local variable 'aMerge' might be accessed at non-zero index.
      logpage = aRight[iRight++];
                      ^
Data/SQLite/src/sqlite3.c:63329:23: warning: The address of local variable 'aMerge' might be accessed at non-zero index. [objectIndex]
      logpage = aRight[iRight++];
                      ^
Data/SQLite/src/sqlite3.c:63406:46: note: Address of variable taken here.
      walMerge(aContent, p->aList, p->nList, &aMerge, &nMerge, aBuffer);
                                             ^
Data/SQLite/src/sqlite3.c:63406:46: note: Calling function 'walMerge', 4th argument '&aMerge' value is lifetime=aMerge
      walMerge(aContent, p->aList, p->nList, &aMerge, &nMerge, aBuffer);
                                             ^
Data/SQLite/src/sqlite3.c:63329:23: note: The address of local variable 'aMerge' might be accessed at non-zero index.
      logpage = aRight[iRight++];
                      ^
Data/SQLite/src/sqlite3.c:63337:46: warning: The address of local variable 'aMerge' might be accessed at non-zero index. [objectIndex]
    assert( iRight>=nRight || aContent[aRight[iRight]]>dbpage );
                                             ^
Data/SQLite/src/sqlite3.c:63393:46: note: Address of variable taken here.
      walMerge(aContent, p->aList, p->nList, &aMerge, &nMerge, aBuffer);
                                             ^
Data/SQLite/src/sqlite3.c:63393:46: note: Calling function 'walMerge', 4th argument '&aMerge' value is lifetime=aMerge
      walMerge(aContent, p->aList, p->nList, &aMerge, &nMerge, aBuffer);
                                             ^
Data/SQLite/src/sqlite3.c:63337:46: note: The address of local variable 'aMerge' might be accessed at non-zero index.
    assert( iRight>=nRight || aContent[aRight[iRight]]>dbpage );
                                             ^
Data/SQLite/src/sqlite3.c:63337:46: warning: The address of local variable 'aMerge' might be accessed at non-zero index. [objectIndex]
    assert( iRight>=nRight || aContent[aRight[iRight]]>dbpage );
                                             ^
Data/SQLite/src/sqlite3.c:63406:46: note: Address of variable taken here.
      walMerge(aContent, p->aList, p->nList, &aMerge, &nMerge, aBuffer);
                                             ^
Data/SQLite/src/sqlite3.c:63406:46: note: Calling function 'walMerge', 4th argument '&aMerge' value is lifetime=aMerge
      walMerge(aContent, p->aList, p->nList, &aMerge, &nMerge, aBuffer);
                                             ^
Data/SQLite/src/sqlite3.c:63337:46: note: The address of local variable 'aMerge' might be accessed at non-zero index.
    assert( iRight>=nRight || aContent[aRight[iRight]]>dbpage );
                                             ^
Data/SQLite/src/sqlite3.c:80396:17: warning: The address of local variable 'zToken' might be accessed at non-zero index. [objectIndex]
    assert( zVal[nVal]=='\'' );
                ^
Data/SQLite/src/sqlite3.c:80394:12: note: Address of variable taken here.
    zVal = &pExpr->u.zToken[2];
           ^
Data/SQLite/src/sqlite3.c:80396:17: note: The address of local variable 'zToken' might be accessed at non-zero index.
    assert( zVal[nVal]=='\'' );
                ^
Data/SQLite/src/sqlite3.c:107880:16: warning: The address of local variable 'zToken' might be accessed at non-zero index. [objectIndex]
      assert( z[n]=='\'' );
               ^
Data/SQLite/src/sqlite3.c:107878:11: note: Address of variable taken here.
      z = &pExpr->u.zToken[2];
          ^
Data/SQLite/src/sqlite3.c:107880:16: note: The address of local variable 'zToken' might be accessed at non-zero index.
      assert( z[n]=='\'' );
               ^
Data/SQLite/src/sqlite3.c:124373:33: error: The address of local variable 'likeInfoAlt' is accessed at non-zero index. [objectIndex]
  assert( &((char*)&likeInfoAlt)[1] == (char*)&likeInfoAlt.matchOne );
                                ^
Data/SQLite/src/sqlite3.c:124373:20: note: Address of variable taken here.
  assert( &((char*)&likeInfoAlt)[1] == (char*)&likeInfoAlt.matchOne );
                   ^
Data/SQLite/src/sqlite3.c:124373:33: note: The address of local variable 'likeInfoAlt' is accessed at non-zero index.
  assert( &((char*)&likeInfoAlt)[1] == (char*)&likeInfoAlt.matchOne );
                                ^
Data/SQLite/src/sqlite3.c:124374:33: error: The address of local variable 'likeInfoAlt' is accessed at non-zero index. [objectIndex]
  assert( &((char*)&likeInfoAlt)[2] == (char*)&likeInfoAlt.matchSet );
                                ^
Data/SQLite/src/sqlite3.c:124374:20: note: Address of variable taken here.
  assert( &((char*)&likeInfoAlt)[2] == (char*)&likeInfoAlt.matchSet );
                   ^
Data/SQLite/src/sqlite3.c:124374:33: note: The address of local variable 'likeInfoAlt' is accessed at non-zero index.
  assert( &((char*)&likeInfoAlt)[2] == (char*)&likeInfoAlt.matchSet );
                                ^
Data/SQLite/src/sqlite3.c:125746:16: warning: The address of local variable 'iCol' might be accessed at non-zero index. [objectIndex]
      if( aiCol[i]==pTab->iPKey ){
               ^
Data/SQLite/src/sqlite3.c:125743:15: note: Address of variable taken here.
      aiCol = &iCol;
              ^
Data/SQLite/src/sqlite3.c:125746:16: note: The address of local variable 'iCol' might be accessed at non-zero index.
      if( aiCol[i]==pTab->iPKey ){
               ^
Data/SQLite/src/sqlite3.c:125747:14: warning: The address of local variable 'iCol' might be accessed at non-zero index. [objectIndex]
        aiCol[i] = -1;
             ^
Data/SQLite/src/sqlite3.c:125743:15: note: Address of variable taken here.
      aiCol = &iCol;
              ^
Data/SQLite/src/sqlite3.c:125747:14: note: The address of local variable 'iCol' might be accessed at non-zero index.
        aiCol[i] = -1;
             ^
Data/SQLite/src/sqlite3.c:128189:18: warning: The address of local variable 'aIdx' might be accessed at non-zero index. [objectIndex]
        if( bUsed[jj] ) continue;
                 ^
Data/SQLite/src/sqlite3.c:128171:20: note: Address of variable taken here.
      bUsed = (u8*)&sIdxIter.u.ax.aIdx[nIdx];
                   ^
Data/SQLite/src/sqlite3.c:128189:18: note: The address of local variable 'aIdx' might be accessed at non-zero index.
        if( bUsed[jj] ) continue;
                 ^
Data/SQLite/src/sqlite3.c:64579:10: warning: Identical condition and return expression 'rc', return value is always 0 [identicalConditionAfterEarlyExit]
  return rc;
         ^
Data/SQLite/src/sqlite3.c:64531:7: note: If condition 'rc' is true, the function will return/exit
  if( rc ){
      ^
Data/SQLite/src/sqlite3.c:64579:10: note: Returning identical expression 'rc'
  return rc;
         ^
Data/SQLite/src/sqlite3.c:41780:7: style: The if condition is the same as the previous if condition [duplicateCondition]
  if( isDelete )                ctrlFlags |= UNIXFILE_DELETE;
      ^
Data/SQLite/src/sqlite3.c:41746:7: note: First condition
  if( isDelete ){
      ^
Data/SQLite/src/sqlite3.c:41780:7: note: Second condition
  if( isDelete )                ctrlFlags |= UNIXFILE_DELETE;
      ^
Data/SQLite/src/sqlite3.c:58771:16: style: The if condition is the same as the previous if condition [duplicateCondition]
  if( nPathname>0 ){
               ^
Data/SQLite/src/sqlite3.c:58760:16: note: First condition
  if( nPathname>0 ){
               ^
Data/SQLite/src/sqlite3.c:58771:16: note: Second condition
  if( nPathname>0 ){
               ^
Data/SQLite/src/sqlite3.c:65484:9: style: The if condition is the same as the previous if condition [duplicateCondition]
    if( isCommit ){
        ^
Data/SQLite/src/sqlite3.c:65479:9: note: First condition
    if( isCommit ){
        ^
Data/SQLite/src/sqlite3.c:65484:9: note: Second condition
    if( isCommit ){
        ^
Data/SQLite/src/sqlite3.c:33134:7: style: Condition 'bom' is always false [knownConditionTrueFalse]
  if( bom ){
      ^
Data/SQLite/src/sqlite3.c:33120:12: note: Assignment 'bom=0', assigned value is 0
  u8 bom = 0;
           ^
Data/SQLite/src/sqlite3.c:33134:7: note: Condition 'bom' is always false
  if( bom ){
      ^
Data/SQLite/src/sqlite3.c:139292:13: style: Condition 'pSplit->pPrior' is always false [knownConditionTrueFalse]
  if( pSplit->pPrior ){
            ^
Data/SQLite/src/sqlite3.c:139135:20: note: Assignment 'pSplit->pPrior=0', assigned value is 0
  pSplit->pPrior = 0;
                   ^
Data/SQLite/src/sqlite3.c:139292:13: note: Condition 'pSplit->pPrior' is always false
  if( pSplit->pPrior ){
            ^
Data/SQLite/src/sqlite3.c:144696:9: style: Condition '!db->mallocFailed' is always true [knownConditionTrueFalse]
     && ALWAYS(!db->mallocFailed)
        ^
Data/SQLite/src/sqlite3.c:144683:7: note: Assuming that condition '!db->mallocFailed' is not redundant
  if( !db->mallocFailed ){
      ^
Data/SQLite/src/sqlite3.c:144696:9: note: Condition '!db->mallocFailed' is always true
     && ALWAYS(!db->mallocFailed)
        ^
Data/SQLite/src/sqlite3.c:150887:13: style: Condition '!db->mallocFailed' is always true [knownConditionTrueFalse]
        if( !db->mallocFailed ){
            ^
Data/SQLite/src/sqlite3.c:150860:11: note: Assuming that condition '!db->mallocFailed' is not redundant
       && !db->mallocFailed
          ^
Data/SQLite/src/sqlite3.c:150887:13: note: Condition '!db->mallocFailed' is always true
        if( !db->mallocFailed ){
            ^
Data/SQLite/src/sqlite3.c:151359:15: style: Condition 'bStopAtNull' is always false [knownConditionTrueFalse]
    }else if( bStopAtNull ){
              ^
Data/SQLite/src/sqlite3.c:151120:22: note: Assignment 'bStopAtNull=0', assigned value is 0
    u8 bStopAtNull = 0;          /* Add condition to terminate at NULLs */
                     ^
Data/SQLite/src/sqlite3.c:151359:15: note: Condition 'bStopAtNull' is always false
    }else if( bStopAtNull ){
              ^
Data/SQLite/src/sqlite3.c:158136:19: style: Condition 'sCur.n==0' is always true [knownConditionTrueFalse]
        if( sCur.n==0 ){
                  ^
Data/SQLite/src/sqlite3.c:158113:18: note: Assignment 'sCur.n=0', assigned value is 0
        sCur.n = 0;
                 ^
Data/SQLite/src/sqlite3.c:158136:19: note: Condition 'sCur.n==0' is always true
        if( sCur.n==0 ){
                  ^
Data/SQLite/src/sqlite3.c:55766:41: style: Expression '(X & 0x4) != 0x1' is always true. [comparisonError]
    assert( (PAGER_JOURNALMODE_MEMORY   & 5)!=1 );
                                        ^
Data/SQLite/src/sqlite3.c:55767:41: style: Expression '(X & 0x2) != 0x1' is always true. [comparisonError]
    assert( (PAGER_JOURNALMODE_OFF      & 5)!=1 );
                                        ^
Data/SQLite/src/sqlite3.c:55769:41: style: Expression '(X & 0x0) != 0x1' is always true. [comparisonError]
    assert( (PAGER_JOURNALMODE_DELETE   & 5)!=1 );
                                        ^
Data/SQLite/src/sqlite3.c:25435:3: error: Common realloc mistake: 'p' nulled but not freed upon failure [memleakOnRealloc]
  p = SQLITE_REALLOC(p, nByte+8 );
  ^
Data/SQLite/src/sqlite3.c:40162:3: warning: Either the condition 'pShmNode==0' is redundant or there is possible null pointer dereference: pShmNode. [nullPointerRedundantCheck]
  pShmNode->nRef++;
  ^
Data/SQLite/src/sqlite3.c:40085:15: note: Assuming that condition 'pShmNode==0' is not redundant
  if( pShmNode==0 ){
              ^
Data/SQLite/src/sqlite3.c:40162:3: note: Null pointer dereference
  pShmNode->nRef++;
  ^
Data/SQLite/src/sqlite3.c:40173:23: warning: Either the condition 'pShmNode==0' is redundant or there is possible null pointer dereference: pShmNode. [nullPointerRedundantCheck]
  sqlite3_mutex_enter(pShmNode->pShmMutex);
                      ^
Data/SQLite/src/sqlite3.c:40085:15: note: Assuming that condition 'pShmNode==0' is not redundant
  if( pShmNode==0 ){
              ^
Data/SQLite/src/sqlite3.c:40173:23: note: Null pointer dereference
  sqlite3_mutex_enter(pShmNode->pShmMutex);
                      ^
Data/SQLite/src/sqlite3.c:40174:14: warning: Either the condition 'pShmNode==0' is redundant or there is possible null pointer dereference: pShmNode. [nullPointerRedundantCheck]
  p->pNext = pShmNode->pFirst;
             ^
Data/SQLite/src/sqlite3.c:40085:15: note: Assuming that condition 'pShmNode==0' is not redundant
  if( pShmNode==0 ){
              ^
Data/SQLite/src/sqlite3.c:40174:14: note: Null pointer dereference
  p->pNext = pShmNode->pFirst;
             ^
Data/SQLite/src/sqlite3.c:40175:3: warning: Either the condition 'pShmNode==0' is redundant or there is possible null pointer dereference: pShmNode. [nullPointerRedundantCheck]
  pShmNode->pFirst = p;
  ^
Data/SQLite/src/sqlite3.c:40085:15: note: Assuming that condition 'pShmNode==0' is not redundant
  if( pShmNode==0 ){
              ^
Data/SQLite/src/sqlite3.c:40175:3: note: Null pointer dereference
  pShmNode->pFirst = p;
  ^
Data/SQLite/src/sqlite3.c:40176:23: warning: Either the condition 'pShmNode==0' is redundant or there is possible null pointer dereference: pShmNode. [nullPointerRedundantCheck]
  sqlite3_mutex_leave(pShmNode->pShmMutex);
                      ^
Data/SQLite/src/sqlite3.c:40085:15: note: Assuming that condition 'pShmNode==0' is not redundant
  if( pShmNode==0 ){
              ^
Data/SQLite/src/sqlite3.c:40176:23: note: Null pointer dereference
  sqlite3_mutex_leave(pShmNode->pShmMutex);
                      ^
Data/SQLite/src/sqlite3.c:40227:14: warning: Either the condition 'pDbFd->pShm==0' is redundant or there is possible null pointer dereference: p. [nullPointerRedundantCheck]
  pShmNode = p->pShmNode;
             ^
Data/SQLite/src/sqlite3.c:40221:18: note: Assuming that condition 'pDbFd->pShm==0' is not redundant
  if( pDbFd->pShm==0 ){
                 ^
Data/SQLite/src/sqlite3.c:40226:12: note: Assignment 'p=pDbFd->pShm', assigned value is 0
  p = pDbFd->pShm;
           ^
Data/SQLite/src/sqlite3.c:40227:14: note: Null pointer dereference
  pShmNode = p->pShmNode;
             ^
Data/SQLite/src/sqlite3.c:50949:10: warning: Either the condition '!pBt->pHasContent' is redundant or there is possible null pointer dereference: p. [nullPointerRedundantCheck]
  return p->iSize;
         ^
Data/SQLite/src/sqlite3.c:67474:9: note: Assuming that condition '!pBt->pHasContent' is not redundant
    if( !pBt->pHasContent ){
        ^
Data/SQLite/src/sqlite3.c:67478:51: note: Calling function 'sqlite3BitvecSize', 1st argument 'pBt->pHasContent' value is 0
  if( rc==SQLITE_OK && pgno<=sqlite3BitvecSize(pBt->pHasContent) ){
                                                  ^
Data/SQLite/src/sqlite3.c:50949:10: note: Null pointer dereference
  return p->iSize;
         ^
Data/SQLite/src/sqlite3.c:135366:4: warning: Either the condition 'ppStmt==0' is redundant or there is possible null pointer dereference: ppStmt. [nullPointerRedundantCheck]
  *ppStmt = 0;
   ^
Data/SQLite/src/sqlite3.c:135486:34: note: Assuming that condition 'ppStmt==0' is not redundant
  assert( rc==SQLITE_OK || ppStmt==0 || *ppStmt==0 );
                                 ^
Data/SQLite/src/sqlite3.c:135485:20: note: Calling function 'sqlite3LockAndPrepare', 6th argument 'ppStmt' value is 0
                 0,ppStmt,pzTail);
                   ^
Data/SQLite/src/sqlite3.c:135366:4: note: Null pointer dereference
  *ppStmt = 0;
   ^
Data/SQLite/src/sqlite3.c:135514:4: warning: Either the condition 'ppStmt==0' is redundant or there is possible null pointer dereference: ppStmt. [nullPointerRedundantCheck]
  *ppStmt = 0;
   ^
Data/SQLite/src/sqlite3.c:135562:34: note: Assuming that condition 'ppStmt==0' is not redundant
  assert( rc==SQLITE_OK || ppStmt==0 || *ppStmt==0 );  /* VERIFY: F13021 */
                                 ^
Data/SQLite/src/sqlite3.c:135561:42: note: Calling function 'sqlite3Prepare16', 5th argument 'ppStmt' value is 0
  rc = sqlite3Prepare16(db,zSql,nBytes,0,ppStmt,pzTail);
                                         ^
Data/SQLite/src/sqlite3.c:135514:4: note: Null pointer dereference
  *ppStmt = 0;
   ^
Data/SQLite/src/sqlite3.c:137801:11: warning: Either the condition 'pColExpr!=0' is redundant or there is possible null pointer dereference: pColExpr. [nullPointerRedundantCheck]
      if( pColExpr->op==TK_COLUMN
          ^
Data/SQLite/src/sqlite3.c:137797:14: note: Assuming that condition 'pColExpr!=0' is not redundant
      while( ALWAYS(pColExpr!=0) && pColExpr->op==TK_DOT ){
             ^
Data/SQLite/src/sqlite3.c:137801:11: note: Null pointer dereference
      if( pColExpr->op==TK_COLUMN
          ^
Data/SQLite/src/sqlite3.c:139391:27: warning: Either the condition 'pSubst->pEList!=0' is redundant or there is possible null pointer dereference: pSubst->pEList. [nullPointerRedundantCheck]
      Expr *pCopy = pSubst->pEList->a[pExpr->iColumn].pExpr;
                          ^
Data/SQLite/src/sqlite3.c:139393:29: note: Assuming that condition 'pSubst->pEList!=0' is not redundant
      assert( pSubst->pEList!=0 && pExpr->iColumn<pSubst->pEList->nExpr );
                            ^
Data/SQLite/src/sqlite3.c:139391:27: note: Null pointer dereference
      Expr *pCopy = pSubst->pEList->a[pExpr->iColumn].pExpr;
                          ^
Data/SQLite/src/sqlite3.c:175258:10: warning: Either the condition 'zFilename' is redundant or there is possible null pointer dereference: zFilename. [nullPointerRedundantCheck]
  return zFilename[0] ? zFilename : 0;
         ^
Data/SQLite/src/sqlite3.c:175254:10: note: Assuming that condition 'zFilename' is not redundant
  while( ALWAYS(zFilename) && zFilename[0] && (N--)>0 ){
         ^
Data/SQLite/src/sqlite3.c:175258:10: note: Null pointer dereference
  return zFilename[0] ? zFilename : 0;
         ^
Data/SQLite/src/sqlite3.c:29085:11: error: Overflow in pointer arithmetic, NULL pointer is subtracted. [nullPointerArithmetic]
  assert( EIGHT_BYTE_ALIGNMENT(p) );  /* IMP: R-11148-40995 */
          ^
Data/SQLite/src/sqlite3.c:29077:9: note: Assignment 'p=0', assigned value is 0
    p = 0;
        ^
Data/SQLite/src/sqlite3.c:29085:11: note: Null pointer subtraction
  assert( EIGHT_BYTE_ALIGNMENT(p) );  /* IMP: R-11148-40995 */
          ^
Data/SQLite/src/sqlite3.c:29295:11: warning: Either the condition 'pNew' is redundant or there is overflow in pointer subtraction. [nullPointerArithmeticRedundantCheck]
  assert( EIGHT_BYTE_ALIGNMENT(pNew) ); /* IMP: R-11148-40995 */
          ^
Data/SQLite/src/sqlite3.c:29287:9: note: Assuming that condition 'pNew' is not redundant
    if( pNew ){
        ^
Data/SQLite/src/sqlite3.c:29295:11: note: Null pointer subtraction
  assert( EIGHT_BYTE_ALIGNMENT(pNew) ); /* IMP: R-11148-40995 */
          ^
Data/SQLite/src/sqlite3.c:83101:11: error: Overflow in pointer arithmetic, NULL pointer is subtracted. [nullPointerArithmetic]
  assert( EIGHT_BYTE_ALIGNMENT(pBuf) );
          ^
Data/SQLite/src/sqlite3.c:83245:28: note: Calling function 'allocSpace', 2nd argument '0' value is 0
  p->aMem = allocSpace(&x, 0, nMem*sizeof(Mem));
                           ^
Data/SQLite/src/sqlite3.c:83094:15: note: Assuming condition is Assuming condition is false
    if( nByte <= p->nFree ){
              ^
Data/SQLite/src/sqlite3.c:83101:11: note: Null pointer subtraction
  assert( EIGHT_BYTE_ALIGNMENT(pBuf) );
          ^
Data/SQLite/src/sqlite3.c:175308:20: warning: Either the condition 'zFilename' is redundant or there is pointer arithmetic with NULL pointer. [nullPointerArithmeticRedundantCheck]
  return zFilename + 1;
                   ^
Data/SQLite/src/sqlite3.c:175304:10: note: Assuming that condition 'zFilename' is not redundant
  while( ALWAYS(zFilename) && zFilename[0] ){
         ^
Data/SQLite/src/sqlite3.c:175308:20: note: Null pointer addition
  return zFilename + 1;
                   ^
Data/SQLite/src/sqlite3.c:107331:51: portability:inconclusive: Casting from double * to unsigned char * is not portable due to different binary data representations on different platforms. [invalidPointerCast]
    sqlite3VdbeAddOp4Dup8(v, OP_Real, 0, iMem, 0, (u8*)&value, P4_REAL);
                                                  ^
Data/SQLite/src/sqlite3.c:33836:34: style: Same value in both branches of ternary operator. [duplicateValueTernary]
    result = sign<0 ? -(double)0 : (double)0;
                                 ^
Data/SQLite/src/sqlite3.c:83093:11: warning: Redundant assignment of 'nByte' to itself. [selfAssignment]
    nByte = ROUND8P(nByte);
          ^
Data/SQLite/src/sqlite3.c:101816:21: style: The comparison 'cnt == 0' is always true. [knownConditionTrueFalse]
  assert( pNC && cnt==0 );
                    ^
Data/SQLite/src/sqlite3.c:101763:13: note: 'cnt' is assigned value '0' here.
  int cnt = 0;                      /* Number of matching column names */
            ^
Data/SQLite/src/sqlite3.c:101816:21: note: The comparison 'cnt == 0' is always true.
  assert( pNC && cnt==0 );
                    ^
Data/SQLite/src/sqlite3.c:139033:18: style: The comparison 'pKeyDup == 0' is always true. [knownConditionTrueFalse]
  assert( pKeyDup==0 ); /* "Managed" code needs this.  Ticket #3382. */
                 ^
Data/SQLite/src/sqlite3.c:139025:22: note: 'pKeyDup' is assigned value '0' here.
  KeyInfo *pKeyDup = 0; /* Comparison information for duplicate removal */
                     ^
Data/SQLite/src/sqlite3.c:139033:18: note: The comparison 'pKeyDup == 0' is always true.
  assert( pKeyDup==0 ); /* "Managed" code needs this.  Ticket #3382. */
                 ^
Data/SQLite/src/sqlite3.c:168138:23: warning: Redundant assignment of 'yymsp[0].minor.yy528' to itself. [selfAssignment]
{yymsp[0].minor.yy528 = yymsp[0].minor.yy528; /*A-overwrites-X*/}
                      ^
Data/SQLite/src/sqlite3.c:170129:15: style: The comparison 'nErr == 0' is always true. [knownConditionTrueFalse]
  assert( nErr==0 );
              ^
Data/SQLite/src/sqlite3.c:170021:14: note: 'nErr' is assigned value '0' here.
  int nErr = 0;                   /* Number of errors encountered */
             ^
Data/SQLite/src/sqlite3.c:170129:15: note: The comparison 'nErr == 0' is always true.
  assert( nErr==0 );
              ^
Data/SQLite/src/sqlite3.c:93194:7: style: Consecutive return, break, continue, goto or throw statements are unnecessary. [duplicateBreak]
      break;
      ^
Data/SQLite/src/sqlite3.c:24204:10: style: The scope of the variable 'n' can be reduced. [variableScope]
  int i, n;
         ^
Data/SQLite/src/sqlite3.c:30981:11: style: The scope of the variable 'ap' can be reduced. [variableScope]
  va_list ap;                             /* Vararg list */
          ^
Data/SQLite/src/sqlite3.c:33232:7: style: The scope of the variable 'c' can be reduced. [variableScope]
  int c;
      ^
Data/SQLite/src/sqlite3.c:33605:10: style: The scope of the variable 'x' can be reduced. [variableScope]
  int c, x;
         ^
Data/SQLite/src/sqlite3.c:34638:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
Data/SQLite/src/sqlite3.c:35184:15: style: The scope of the variable 'pEntry' can be reduced. [variableScope]
  struct _ht *pEntry;
              ^
Data/SQLite/src/sqlite3.c:39378:11: style: The scope of the variable 'nWrite' can be reduced. [variableScope]
      int nWrite = 0;             /* Number of bytes written by seekAndWrite */
          ^
Data/SQLite/src/sqlite3.c:41332:7: style: The scope of the variable 'iLimit' can be reduced. [variableScope]
  int iLimit = 0;
      ^
Data/SQLite/src/sqlite3.c:42126:13: style: The scope of the variable 'got' can be reduced. [variableScope]
    int fd, got;
            ^
Data/SQLite/src/sqlite3.c:50867:18: style: The scope of the variable 'j' can be reduced. [variableScope]
    unsigned int j;
                 ^
Data/SQLite/src/sqlite3.c:50868:9: style: The scope of the variable 'rc' can be reduced. [variableScope]
    int rc;
        ^
Data/SQLite/src/sqlite3.c:52512:16: style: The scope of the variable 'i' can be reduced. [variableScope]
  unsigned int i;
               ^
Data/SQLite/src/sqlite3.c:52788:7: style: The scope of the variable 'n' can be reduced. [variableScope]
  u32 n;
      ^
Data/SQLite/src/sqlite3.c:54992:19: style: The scope of the variable 'p' can be reduced. [variableScope]
  PagerSavepoint *p;
                  ^
Data/SQLite/src/sqlite3.c:55488:17: style: The scope of the variable 'aMagic' can be reduced. [variableScope]
  unsigned char aMagic[8];     /* A buffer to hold the magic header */
                ^
Data/SQLite/src/sqlite3.c:57277:7: style: The scope of the variable 'iHdrOff' can be reduced. [variableScope]
  i64 iHdrOff;             /* End of first segment of main-journal records */
      ^
Data/SQLite/src/sqlite3.c:62491:7: style: The scope of the variable 'nativeCksum' can be reduced. [variableScope]
  int nativeCksum;                /* True for native byte-order checksums */
      ^
Data/SQLite/src/sqlite3.c:65105:7: style: The scope of the variable 'cnt' can be reduced. [variableScope]
  int cnt;
      ^
Data/SQLite/src/sqlite3.c:66744:10: style: The scope of the variable 'p' can be reduced. [variableScope]
  Btree *p;
         ^
Data/SQLite/src/sqlite3.c:66760:10: style: The scope of the variable 'p' can be reduced. [variableScope]
  Btree *p;
         ^
Data/SQLite/src/sqlite3.c:67509:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
Data/SQLite/src/sqlite3.c:68503:7: style: The scope of the variable 'x' can be reduced. [variableScope]
  int x;                                     /* Excess size of the slot */
      ^
Data/SQLite/src/sqlite3.c:68505:7: style: The scope of the variable 'size' can be reduced. [variableScope]
  int size;                                  /* Size of the free slot */
      ^
Data/SQLite/src/sqlite3.c:68672:6: style: The scope of the variable 'nFrag' can be reduced. [variableScope]
  u8 nFrag = 0;                         /* Reduction in fragmentation */
     ^
Data/SQLite/src/sqlite3.c:68921:7: style: The scope of the variable 'sz' can be reduced. [variableScope]
  int sz;            /* Size of a cell */
      ^
Data/SQLite/src/sqlite3.c:68922:7: style: The scope of the variable 'pc' can be reduced. [variableScope]
  int pc;            /* Address of a freeblock within pPage->aData[] */
      ^
Data/SQLite/src/sqlite3.c:70739:8: style: The scope of the variable 'nFreeList' can be reduced. [variableScope]
  Pgno nFreeList;           /* Number of pages still on the free-list */
       ^
Data/SQLite/src/sqlite3.c:70740:7: style: The scope of the variable 'rc' can be reduced. [variableScope]
  int rc;
      ^
Data/SQLite/src/sqlite3.c:72298:8: style: The scope of the variable 'pgno' can be reduced. [variableScope]
  Pgno pgno;
       ^
Data/SQLite/src/sqlite3.c:72323:8: style: The scope of the variable 'pgno' can be reduced. [variableScope]
  Pgno pgno;
       ^
Data/SQLite/src/sqlite3.c:72324:7: style: The scope of the variable 'rc' can be reduced. [variableScope]
  int rc = SQLITE_OK;
      ^
Data/SQLite/src/sqlite3.c:78547:20: style: The scope of the variable 'pp' can be reduced. [variableScope]
  sqlite3_backup **pp;                 /* Ptr to head of pagers backup list */
                   ^
Data/SQLite/src/sqlite3.c:82140:11: style: The scope of the variable 'pOp' can be reduced. [variableScope]
  VdbeOp *pOp;
          ^
Data/SQLite/src/sqlite3.c:83751:9: style: The scope of the variable 'rc2' can be reduced. [variableScope]
    int rc2 = SQLITE_OK;
        ^
Data/SQLite/src/sqlite3.c:83834:7: style: The scope of the variable 'rc' can be reduced. [variableScope]
  int rc;                         /* Used to store transient return codes */
      ^
Data/SQLite/src/sqlite3.c:87492:8: style: The scope of the variable 'pVar' can be reduced. [variableScope]
  Mem *pVar;
       ^
Data/SQLite/src/sqlite3.c:88206:7: style: The scope of the variable 'n' can be reduced. [variableScope]
  int n;
      ^
Data/SQLite/src/sqlite3.c:97464:12: style: The scope of the variable 'db' can be reduced. [variableScope]
  sqlite3 *db;
           ^
Data/SQLite/src/sqlite3.c:98204:7: style: The scope of the variable 'iBuf' can be reduced. [variableScope]
  int iBuf;
      ^
Data/SQLite/src/sqlite3.c:98214:18: style: The scope of the variable 'rc' can be reduced. [variableScope]
      int i = 0, rc;
                 ^
Data/SQLite/src/sqlite3.c:98824:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
Data/SQLite/src/sqlite3.c:99397:7: style: The scope of the variable 'bFlush' can be reduced. [variableScope]
  int bFlush;                     /* True to flush contents of memory to PMA */
      ^
Data/SQLite/src/sqlite3.c:100141:11: style: The scope of the variable 'iTask' can be reduced. [variableScope]
      int iTask;
          ^
Data/SQLite/src/sqlite3.c:101365:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
Data/SQLite/src/sqlite3.c:101366:25: style: The scope of the variable 'pItem' can be reduced. [variableScope]
  struct ExprList_item *pItem;
                        ^
Data/SQLite/src/sqlite3.c:101426:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
Data/SQLite/src/sqlite3.c:101427:12: style: The scope of the variable 'pItem' can be reduced. [variableScope]
  SrcItem *pItem;
           ^
Data/SQLite/src/sqlite3.c:101463:7: style: The scope of the variable 'rc' can be reduced. [variableScope]
  int rc;
      ^
Data/SQLite/src/sqlite3.c:102841:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;             /* Loop counter */
      ^
Data/SQLite/src/sqlite3.c:102959:13: style: The scope of the variable 'pEList' can be reduced. [variableScope]
  ExprList *pEList;
            ^
Data/SQLite/src/sqlite3.c:102985:18: style: The scope of the variable 'pDup' can be reduced. [variableScope]
      Expr *pE, *pDup;
                 ^
Data/SQLite/src/sqlite3.c:108373:11: style: The scope of the variable 'nextCase' can be reduced. [variableScope]
      int nextCase;                     /* GOTO label for next WHEN clause */
          ^
Data/SQLite/src/sqlite3.c:109127:7: style: The scope of the variable 'iVar' can be reduced. [variableScope]
  int iVar;
      ^
Data/SQLite/src/sqlite3.c:109128:18: style: The scope of the variable 'pL' can be reduced. [variableScope]
  sqlite3_value *pL, *pR = 0;
                 ^
Data/SQLite/src/sqlite3.c:109851:31: style: The scope of the variable 'pCol' can be reduced. [variableScope]
          struct AggInfo_col *pCol;
                              ^
Data/SQLite/src/sqlite3.c:109990:25: style: The scope of the variable 'pItem' can be reduced. [variableScope]
  struct ExprList_item *pItem;
                        ^
Data/SQLite/src/sqlite3.c:109991:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
Data/SQLite/src/sqlite3.c:113770:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
Data/SQLite/src/sqlite3.c:115060:7: style: The scope of the variable 'iSrc' can be reduced. [variableScope]
  int iSrc;             /* Index in pTabList->a[] of table being read */
      ^
Data/SQLite/src/sqlite3.c:115354:11: style: The scope of the variable 'addrRewind' can be reduced. [variableScope]
      int addrRewind;
          ^
Data/SQLite/src/sqlite3.c:115355:11: style: The scope of the variable 'i' can be reduced. [variableScope]
      int i;
          ^
Data/SQLite/src/sqlite3.c:115356:11: style: The scope of the variable 'reg' can be reduced. [variableScope]
      int reg;
          ^
Data/SQLite/src/sqlite3.c:115831:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
Data/SQLite/src/sqlite3.c:115965:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
Data/SQLite/src/sqlite3.c:120064:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
Data/SQLite/src/sqlite3.c:120065:12: style: The scope of the variable 'pItem' can be reduced. [variableScope]
  SrcItem *pItem;
           ^
Data/SQLite/src/sqlite3.c:120290:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
Data/SQLite/src/sqlite3.c:120518:7: style: The scope of the variable 'j' can be reduced. [variableScope]
  int j;
      ^
Data/SQLite/src/sqlite3.c:120705:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
Data/SQLite/src/sqlite3.c:120911:12: style: The scope of the variable 'pColl2' can be reduced. [variableScope]
  CollSeq *pColl2;
           ^
Data/SQLite/src/sqlite3.c:121264:7: style: The scope of the variable 'h' can be reduced. [variableScope]
  int h;              /* Hash value */
      ^
Data/SQLite/src/sqlite3.c:122673:7: style: The scope of the variable 'n' can be reduced. [variableScope]
  int n;
      ^
Data/SQLite/src/sqlite3.c:122859:9: style: The scope of the variable 'z1' can be reduced. [variableScope]
  char *z1;
        ^
Data/SQLite/src/sqlite3.c:122861:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i, n;
      ^
Data/SQLite/src/sqlite3.c:122878:9: style: The scope of the variable 'z1' can be reduced. [variableScope]
  char *z1;
        ^
Data/SQLite/src/sqlite3.c:122880:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i, n;
      ^
Data/SQLite/src/sqlite3.c:123135:13: style: The scope of the variable 'bMatch' can be reduced. [variableScope]
        int bMatch;
            ^
Data/SQLite/src/sqlite3.c:123584:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i, n;
      ^
Data/SQLite/src/sqlite3.c:123731:7: style: The scope of the variable 'flags' can be reduced. [variableScope]
  int flags;                        /* 1: trimleft  2: trimright  3: trim */
      ^
Data/SQLite/src/sqlite3.c:123732:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;                            /* Loop counter */
      ^
Data/SQLite/src/sqlite3.c:125255:15: style: The scope of the variable 'zColl' can be reduced. [variableScope]
  const char *zColl;
              ^
Data/SQLite/src/sqlite3.c:125337:14: style: The scope of the variable 'pWInfo' can be reduced. [variableScope]
  WhereInfo *pWInfo;              /* Context used by sqlite3WhereXXX() */
             ^
Data/SQLite/src/sqlite3.c:125399:13: style: The scope of the variable 'pEq' can be reduced. [variableScope]
      Expr *pEq, *pAll = 0;
            ^
Data/SQLite/src/sqlite3.c:126406:10: style: The scope of the variable 'j' can be reduced. [variableScope]
  int i, j;
         ^
Data/SQLite/src/sqlite3.c:126697:7: style: The scope of the variable 'pDb' can be reduced. [variableScope]
  Db *pDb;                   /* Database only autoinc table */
      ^
Data/SQLite/src/sqlite3.c:126698:7: style: The scope of the variable 'memId' can be reduced. [variableScope]
  int memId;                 /* Register holding max rowid */
      ^
Data/SQLite/src/sqlite3.c:132088:26: style: The scope of the variable 'rc' can be reduced. [variableScope]
  int upr, lwr, mid = 0, rc;
                         ^
Data/SQLite/src/sqlite3.c:132326:13: style: The scope of the variable 'aOp' can be reduced. [variableScope]
    VdbeOp *aOp;
            ^
Data/SQLite/src/sqlite3.c:133175:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
Data/SQLite/src/sqlite3.c:135853:10: style: The scope of the variable 'p' can be reduced. [variableScope]
  Token *p;
         ^
Data/SQLite/src/sqlite3.c:135954:7: style: The scope of the variable 'iCol' can be reduced. [variableScope]
  int iCol;            /* Index of column matching zCol */
      ^
Data/SQLite/src/sqlite3.c:137151:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
Data/SQLite/src/sqlite3.c:137883:12: style: The scope of the variable 'pColl' can be reduced. [variableScope]
  CollSeq *pColl;
           ^
Data/SQLite/src/sqlite3.c:137885:9: style: The scope of the variable 'p' can be reduced. [variableScope]
  Expr *p;
        ^
Data/SQLite/src/sqlite3.c:137897:9: style: The scope of the variable 'n' can be reduced. [variableScope]
    i64 n, m;
        ^
Data/SQLite/src/sqlite3.c:137897:12: style: The scope of the variable 'm' can be reduced. [variableScope]
    i64 n, m;
           ^
Data/SQLite/src/sqlite3.c:137999:9: style: The scope of the variable 'v' can be reduced. [variableScope]
  Vdbe *v = 0;
        ^
Data/SQLite/src/sqlite3.c:138000:7: style: The scope of the variable 'iLimit' can be reduced. [variableScope]
  int iLimit = 0;
      ^
Data/SQLite/src/sqlite3.c:138001:7: style: The scope of the variable 'iOffset' can be reduced. [variableScope]
  int iOffset;
      ^
Data/SQLite/src/sqlite3.c:138995:10: style: The scope of the variable 'j' can be reduced. [variableScope]
  int i, j;             /* Loop counters */
         ^
Data/SQLite/src/sqlite3.c:141508:15: style: The scope of the variable 'iDb' can be reduced. [variableScope]
          int iDb;                     /* Schema index for this data src */
              ^
Data/SQLite/src/sqlite3.c:144114:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
Data/SQLite/src/sqlite3.c:146619:7: style: The scope of the variable 'rc' can be reduced. [variableScope]
  int rc;                 /* Result code */
      ^
Data/SQLite/src/sqlite3.c:146620:7: style: The scope of the variable 'iCursor' can be reduced. [variableScope]
  int iCursor;            /* Cursor used by pTab */
      ^
Data/SQLite/src/sqlite3.c:146623:9: style: The scope of the variable 'pTerm' can be reduced. [variableScope]
  Expr *pTerm;            /* One term of the conflict-target clause */
        ^
Data/SQLite/src/sqlite3.c:148196:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
Data/SQLite/src/sqlite3.c:149500:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;                        /* Loop counter */
      ^
Data/SQLite/src/sqlite3.c:150419:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
Data/SQLite/src/sqlite3.c:150864:17: style: The scope of the variable 'pOp' can be reduced. [variableScope]
        VdbeOp *pOp;     /* Opcode to access the value of the IN constraint */
                ^
Data/SQLite/src/sqlite3.c:151667:13: style: The scope of the variable 'jmp1' can be reduced. [variableScope]
        int jmp1 = 0;                   /* Address of jump operation */
            ^
Data/SQLite/src/sqlite3.c:152863:20: style: The scope of the variable 'pAndTerm' can be reduced. [variableScope]
        WhereTerm *pAndTerm;
                   ^
Data/SQLite/src/sqlite3.c:152864:13: style: The scope of the variable 'j' can be reduced. [variableScope]
        int j;
            ^
Data/SQLite/src/sqlite3.c:153451:18: style: The scope of the variable 'pNewTerm' can be reduced. [variableScope]
      WhereTerm *pNewTerm;
                 ^
Data/SQLite/src/sqlite3.c:153640:11: style: The scope of the variable 'idxNew' can be reduced. [variableScope]
      int idxNew;
          ^
Data/SQLite/src/sqlite3.c:153641:18: style: The scope of the variable 'pNewTerm' can be reduced. [variableScope]
      WhereTerm *pNewTerm;
                 ^
Data/SQLite/src/sqlite3.c:153947:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
Data/SQLite/src/sqlite3.c:153991:9: style: The scope of the variable 'pColRef' can be reduced. [variableScope]
  Expr *pColRef;
        ^
Data/SQLite/src/sqlite3.c:153992:9: style: The scope of the variable 'pTerm' can be reduced. [variableScope]
  Expr *pTerm;
        ^
Data/SQLite/src/sqlite3.c:154148:15: style: The scope of the variable 'pInner' can be reduced. [variableScope]
  WhereLevel *pInner;
              ^
Data/SQLite/src/sqlite3.c:155058:7: style: The scope of the variable 'addrTop' can be reduced. [variableScope]
  int addrTop;                         /* Address of OP_Rewind */
      ^
Data/SQLite/src/sqlite3.c:155059:7: style: The scope of the variable 'addrCont' can be reduced. [variableScope]
  int addrCont;                        /* Jump here to skip a row */
      ^
Data/SQLite/src/sqlite3.c:155061:20: style: The scope of the variable 'pWCEnd' can be reduced. [variableScope]
  const WhereTerm *pWCEnd;             /* Last WHERE clause term */
                   ^
Data/SQLite/src/sqlite3.c:155065:7: style: The scope of the variable 'iCur' can be reduced. [variableScope]
  int iCur;                            /* Cursor for table getting the filter */
      ^
Data/SQLite/src/sqlite3.c:162272:9: style: The scope of the variable 'addr' can be reduced. [variableScope]
    int addr;
        ^
Data/SQLite/src/sqlite3.c:163421:9: style: The scope of the variable 'addr' can be reduced. [variableScope]
    int addr = 0;
        ^
Data/SQLite/src/sqlite3.c:196211:13: style: The scope of the variable 'pNode' can be reduced. [variableScope]
  JsonNode *pNode;
            ^
Data/SQLite/src/sqlite3.c:196545:13: style: The scope of the variable 'nKey' can be reduced. [variableScope]
  u32 i, j, nKey;
            ^
Data/SQLite/src/sqlite3.c:196546:15: style: The scope of the variable 'zKey' can be reduced. [variableScope]
  const char *zKey;
              ^
Data/SQLite/src/sqlite3.c:196923:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  u32 i;
      ^
Data/SQLite/src/sqlite3.c:197180:15: style: The scope of the variable 'z' can be reduced. [variableScope]
  const char *z;
              ^
Data/SQLite/src/sqlite3.c:197181:7: style: The scope of the variable 'n' can be reduced. [variableScope]
  u32 n;
      ^
Data/SQLite/src/sqlite3.c:197359:15: style: The scope of the variable 'zPath' can be reduced. [variableScope]
  const char *zPath;
              ^
Data/SQLite/src/sqlite3.c:197510:15: style: The scope of the variable 'z' can be reduced. [variableScope]
  const char *z;
              ^
Data/SQLite/src/sqlite3.c:197511:7: style: The scope of the variable 'n' can be reduced. [variableScope]
  u32 n;
      ^
Data/SQLite/src/sqlite3.c:197585:17: style: The scope of the variable 'pNew' can be reduced. [variableScope]
  sqlite3_vtab *pNew;
                ^
Data/SQLite/src/sqlite3.c:197726:7: style: The scope of the variable 'jj' can be reduced. [variableScope]
  int jj, nn;
      ^
Data/SQLite/src/sqlite3.c:78870:43: style: Checking if unsigned expression 'acc.mxAlloc' is less than zero. [unsignedLessThanZero]
    assert( acc.zText==zBuf && acc.mxAlloc<=0 );
                                          ^
Data/SQLite/src/sqlite3.c:91195:29: style: Unsigned expression 'p2' can't be negative so it is unnecessary to test it. [unsignedPositive]
      assert( pC->nHdrParsed<=p2 );         /* Conditional skipped */
                            ^
Data/SQLite/src/sqlite3.c:91158:22: note: Assignment 'pC->nHdrParsed=0', assigned value is 0
    pC->nHdrParsed = 0;
                     ^
Data/SQLite/src/sqlite3.c:91195:29: note: Unsigned positive
      assert( pC->nHdrParsed<=p2 );         /* Conditional skipped */
                            ^
Data/SQLite/src/sqlite3.c:151135:19: style: Checking if unsigned expression 'pLoop->u.btree.nBtm' is less than zero. [unsignedLessThanZero]
      nExtraReg = MAX(nExtraReg, pLoop->u.btree.nBtm);
                  ^
Data/SQLite/src/sqlite3.c:151115:21: note: Assignment 'nExtraReg=0', assigned value is 0
    int nExtraReg = 0;           /* Number of extra registers needed */
                    ^
Data/SQLite/src/sqlite3.c:151135:19: note: Unsigned less than zero
      nExtraReg = MAX(nExtraReg, pLoop->u.btree.nBtm);
                  ^
Data/SQLite/src/sqlite3.c:23071:8: style:inconclusive: Function 'sqlite3_db_status' argument 3 names different: declaration 'pCur' definition 'pCurrent'. [funcArgNamesDifferent]
  int *pCurrent,        /* Write current value here */
       ^
Data/SQLite/src/sqlite3.c:8649:57: note: Function 'sqlite3_db_status' argument 3 names different: declaration 'pCur' definition 'pCurrent'.
SQLITE_API int sqlite3_db_status(sqlite3*, int op, int *pCur, int *pHiwtr, int resetFlg);
                                                        ^
Data/SQLite/src/sqlite3.c:23071:8: note: Function 'sqlite3_db_status' argument 3 names different: declaration 'pCur' definition 'pCurrent'.
  int *pCurrent,        /* Write current value here */
       ^
Data/SQLite/src/sqlite3.c:23072:8: style:inconclusive: Function 'sqlite3_db_status' argument 4 names different: declaration 'pHiwtr' definition 'pHighwater'. [funcArgNamesDifferent]
  int *pHighwater,      /* Write high-water mark here */
       ^
Data/SQLite/src/sqlite3.c:8649:68: note: Function 'sqlite3_db_status' argument 4 names different: declaration 'pHiwtr' definition 'pHighwater'.
SQLITE_API int sqlite3_db_status(sqlite3*, int op, int *pCur, int *pHiwtr, int resetFlg);
                                                                   ^
Data/SQLite/src/sqlite3.c:23072:8: note: Function 'sqlite3_db_status' argument 4 names different: declaration 'pHiwtr' definition 'pHighwater'.
  int *pHighwater,      /* Write high-water mark here */
       ^
Data/SQLite/src/sqlite3.c:23073:7: style:inconclusive: Function 'sqlite3_db_status' argument 5 names different: declaration 'resetFlg' definition 'resetFlag'. [funcArgNamesDifferent]
  int resetFlag         /* Reset high-water mark if true */
      ^
Data/SQLite/src/sqlite3.c:8649:80: note: Function 'sqlite3_db_status' argument 5 names different: declaration 'resetFlg' definition 'resetFlag'.
SQLITE_API int sqlite3_db_status(sqlite3*, int op, int *pCur, int *pHiwtr, int resetFlg);
                                                                               ^
Data/SQLite/src/sqlite3.c:23073:7: note: Function 'sqlite3_db_status' argument 5 names different: declaration 'resetFlg' definition 'resetFlag'.
  int resetFlag         /* Reset high-water mark if true */
      ^
Data/SQLite/src/sqlite3.c:24980:54: style:inconclusive: Function 'sqlite3_vfs_find' argument 1 names different: declaration 'zVfsName' definition 'zVfs'. [funcArgNamesDifferent]
SQLITE_API sqlite3_vfs *sqlite3_vfs_find(const char *zVfs){
                                                     ^
Data/SQLite/src/sqlite3.c:7944:54: note: Function 'sqlite3_vfs_find' argument 1 names different: declaration 'zVfsName' definition 'zVfs'.
SQLITE_API sqlite3_vfs *sqlite3_vfs_find(const char *zVfsName);
                                                     ^
Data/SQLite/src/sqlite3.c:24980:54: note: Function 'sqlite3_vfs_find' argument 1 names different: declaration 'zVfsName' definition 'zVfs'.
SQLITE_API sqlite3_vfs *sqlite3_vfs_find(const char *zVfs){
                                                     ^
Data/SQLite/src/sqlite3.c:28887:66: style:inconclusive: Function 'sqlite3_soft_heap_limit64' argument 1 names different: declaration 'N' definition 'n'. [funcArgNamesDifferent]
SQLITE_API sqlite3_int64 sqlite3_soft_heap_limit64(sqlite3_int64 n){
                                                                 ^
Data/SQLite/src/sqlite3.c:7022:66: note: Function 'sqlite3_soft_heap_limit64' argument 1 names different: declaration 'N' definition 'n'.
SQLITE_API sqlite3_int64 sqlite3_soft_heap_limit64(sqlite3_int64 N);
                                                                 ^
Data/SQLite/src/sqlite3.c:28887:66: note: Function 'sqlite3_soft_heap_limit64' argument 1 names different: declaration 'N' definition 'n'.
SQLITE_API sqlite3_int64 sqlite3_soft_heap_limit64(sqlite3_int64 n){
                                                                 ^
Data/SQLite/src/sqlite3.c:28912:45: style:inconclusive: Function 'sqlite3_soft_heap_limit' argument 1 names different: declaration 'N' definition 'n'. [funcArgNamesDifferent]
SQLITE_API void sqlite3_soft_heap_limit(int n){
                                            ^
Data/SQLite/src/sqlite3.c:7034:63: note: Function 'sqlite3_soft_heap_limit' argument 1 names different: declaration 'N' definition 'n'.
SQLITE_API SQLITE_DEPRECATED void sqlite3_soft_heap_limit(int N);
                                                              ^
Data/SQLite/src/sqlite3.c:28912:45: note: Function 'sqlite3_soft_heap_limit' argument 1 names different: declaration 'N' definition 'n'.
SQLITE_API void sqlite3_soft_heap_limit(int n){
                                            ^
Data/SQLite/src/sqlite3.c:28929:66: style:inconclusive: Function 'sqlite3_hard_heap_limit64' argument 1 names different: declaration 'N' definition 'n'. [funcArgNamesDifferent]
SQLITE_API sqlite3_int64 sqlite3_hard_heap_limit64(sqlite3_int64 n){
                                                                 ^
Data/SQLite/src/sqlite3.c:7023:66: note: Function 'sqlite3_hard_heap_limit64' argument 1 names different: declaration 'N' definition 'n'.
SQLITE_API sqlite3_int64 sqlite3_hard_heap_limit64(sqlite3_int64 N);
                                                                 ^
Data/SQLite/src/sqlite3.c:28929:66: note: Function 'sqlite3_hard_heap_limit64' argument 1 names different: declaration 'N' definition 'n'.
SQLITE_API sqlite3_int64 sqlite3_hard_heap_limit64(sqlite3_int64 n){
                                                                 ^
Data/SQLite/src/sqlite3.c:29852:15: style:inconclusive: Function 'sqlite3_str_vappendf' argument 2 names different: declaration 'zFormat' definition 'fmt'. [funcArgNamesDifferent]
  const char *fmt,           /* Format string */
              ^
Data/SQLite/src/sqlite3.c:8474:64: note: Function 'sqlite3_str_vappendf' argument 2 names different: declaration 'zFormat' definition 'fmt'.
SQLITE_API void sqlite3_str_vappendf(sqlite3_str*, const char *zFormat, va_list);
                                                               ^
Data/SQLite/src/sqlite3.c:29852:15: note: Function 'sqlite3_str_vappendf' argument 2 names different: declaration 'zFormat' definition 'fmt'.
  const char *fmt,           /* Format string */
              ^
Data/SQLite/src/sqlite3.c:30660:68: style:inconclusive: Function 'sqlite3_str_appendchar' argument 3 names different: declaration 'C' definition 'c'. [funcArgNamesDifferent]
SQLITE_API void sqlite3_str_appendchar(sqlite3_str *p, int N, char c){
                                                                   ^
Data/SQLite/src/sqlite3.c:8477:66: note: Function 'sqlite3_str_appendchar' argument 3 names different: declaration 'C' definition 'c'.
SQLITE_API void sqlite3_str_appendchar(sqlite3_str*, int N, char C);
                                                                 ^
Data/SQLite/src/sqlite3.c:30660:68: note: Function 'sqlite3_str_appendchar' argument 3 names different: declaration 'C' definition 'c'.
SQLITE_API void sqlite3_str_appendchar(sqlite3_str *p, int N, char c){
                                                                   ^
Data/SQLite/src/sqlite3.c:30688:64: style:inconclusive: Function 'sqlite3_str_append' argument 2 names different: declaration 'zIn' definition 'z'. [funcArgNamesDifferent]
SQLITE_API void sqlite3_str_append(sqlite3_str *p, const char *z, int N){
                                                               ^
Data/SQLite/src/sqlite3.c:8475:62: note: Function 'sqlite3_str_append' argument 2 names different: declaration 'zIn' definition 'z'.
SQLITE_API void sqlite3_str_append(sqlite3_str*, const char *zIn, int N);
                                                             ^
Data/SQLite/src/sqlite3.c:30688:64: note: Function 'sqlite3_str_append' argument 2 names different: declaration 'zIn' definition 'z'.
SQLITE_API void sqlite3_str_append(sqlite3_str *p, const char *z, int N){
                                                               ^
Data/SQLite/src/sqlite3.c:30705:67: style:inconclusive: Function 'sqlite3_str_appendall' argument 2 names different: declaration 'zIn' definition 'z'. [funcArgNamesDifferent]
SQLITE_API void sqlite3_str_appendall(sqlite3_str *p, const char *z){
                                                                  ^
Data/SQLite/src/sqlite3.c:8476:65: note: Function 'sqlite3_str_appendall' argument 2 names different: declaration 'zIn' definition 'z'.
SQLITE_API void sqlite3_str_appendall(sqlite3_str*, const char *zIn);
                                                                ^
Data/SQLite/src/sqlite3.c:30705:67: note: Function 'sqlite3_str_appendall' argument 2 names different: declaration 'zIn' definition 'z'.
SQLITE_API void sqlite3_str_appendall(sqlite3_str *p, const char *z){
                                                                  ^
Data/SQLite/src/sqlite3.c:32355:49: style:inconclusive: Function 'sqlite3_randomness' argument 2 names different: declaration 'P' definition 'pBuf'. [funcArgNamesDifferent]
SQLITE_API void sqlite3_randomness(int N, void *pBuf){
                                                ^
Data/SQLite/src/sqlite3.c:3325:49: note: Function 'sqlite3_randomness' argument 2 names different: declaration 'P' definition 'pBuf'.
SQLITE_API void sqlite3_randomness(int N, void *P);
                                                ^
Data/SQLite/src/sqlite3.c:32355:49: note: Function 'sqlite3_randomness' argument 2 names different: declaration 'P' definition 'pBuf'.
SQLITE_API void sqlite3_randomness(int N, void *pBuf){
                                                ^
Data/SQLite/src/sqlite3.c:33156:51: style:inconclusive: Function 'sqlite3Utf8CharLen' argument 1 names different: declaration 'pData' definition 'zIn'. [funcArgNamesDifferent]
SQLITE_PRIVATE int sqlite3Utf8CharLen(const char *zIn, int nByte){
                                                  ^
Data/SQLite/src/sqlite3.c:20209:51: note: Function 'sqlite3Utf8CharLen' argument 1 names different: declaration 'pData' definition 'zIn'.
SQLITE_PRIVATE int sqlite3Utf8CharLen(const char *pData, int nByte);
                                                  ^
Data/SQLite/src/sqlite3.c:33156:51: note: Function 'sqlite3Utf8CharLen' argument 1 names different: declaration 'pData' definition 'zIn'.
SQLITE_PRIVATE int sqlite3Utf8CharLen(const char *zIn, int nByte){
                                                  ^
Data/SQLite/src/sqlite3.c:33231:52: style:inconclusive: Function 'sqlite3Utf16ByteLen' argument 1 names different: declaration 'pData' definition 'zIn'. [funcArgNamesDifferent]
SQLITE_PRIVATE int sqlite3Utf16ByteLen(const void *zIn, int nChar){
                                                   ^
Data/SQLite/src/sqlite3.c:20207:52: note: Function 'sqlite3Utf16ByteLen' argument 1 names different: declaration 'pData' definition 'zIn'.
SQLITE_PRIVATE int sqlite3Utf16ByteLen(const void *pData, int nChar);
                                                   ^
Data/SQLite/src/sqlite3.c:33231:52: note: Function 'sqlite3Utf16ByteLen' argument 1 names different: declaration 'pData' definition 'zIn'.
SQLITE_PRIVATE int sqlite3Utf16ByteLen(const void *zIn, int nChar){
                                                   ^
Data/SQLite/src/sqlite3.c:35234:74: style:inconclusive: Function 'sqlite3HashInsert' argument 3 names different: declaration 'pData' definition 'data'. [funcArgNamesDifferent]
SQLITE_PRIVATE void *sqlite3HashInsert(Hash *pH, const char *pKey, void *data){
                                                                         ^
Data/SQLite/src/sqlite3.c:13829:71: note: Function 'sqlite3HashInsert' argument 3 names different: declaration 'pData' definition 'data'.
SQLITE_PRIVATE void *sqlite3HashInsert(Hash*, const char *pKey, void *pData);
                                                                      ^
Data/SQLite/src/sqlite3.c:35234:74: note: Function 'sqlite3HashInsert' argument 3 names different: declaration 'pData' definition 'data'.
SQLITE_PRIVATE void *sqlite3HashInsert(Hash *pH, const char *pKey, void *data){
                                                                         ^
Data/SQLite/src/sqlite3.c:50261:73: style:inconclusive: Function 'memdbUnfetch' argument 3 names different: declaration 'p' definition 'pPage'. [funcArgNamesDifferent]
static int memdbUnfetch(sqlite3_file *pFile, sqlite3_int64 iOfst, void *pPage){
                                                                        ^
Data/SQLite/src/sqlite3.c:49892:67: note: Function 'memdbUnfetch' argument 3 names different: declaration 'p' definition 'pPage'.
static int memdbUnfetch(sqlite3_file*, sqlite3_int64 iOfst, void *p);
                                                                  ^
Data/SQLite/src/sqlite3.c:50261:73: note: Function 'memdbUnfetch' argument 3 names different: declaration 'p' definition 'pPage'.
static int memdbUnfetch(sqlite3_file *pFile, sqlite3_int64 iOfst, void *pPage){
                                                                        ^
Data/SQLite/src/sqlite3.c:50373:15: style:inconclusive: Function 'memdbAccess' argument 2 names different: declaration 'zName' definition 'zPath'. [funcArgNamesDifferent]
  const char *zPath,
              ^
Data/SQLite/src/sqlite3.c:49899:50: note: Function 'memdbAccess' argument 2 names different: declaration 'zName' definition 'zPath'.
static int memdbAccess(sqlite3_vfs*, const char *zName, int flags, int *);
                                                 ^
Data/SQLite/src/sqlite3.c:50373:15: note: Function 'memdbAccess' argument 2 names different: declaration 'zName' definition 'zPath'.
  const char *zPath,
              ^
Data/SQLite/src/sqlite3.c:50391:15: style:inconclusive: Function 'memdbFullPathname' argument 2 names different: declaration 'zName' definition 'zPath'. [funcArgNamesDifferent]
  const char *zPath,
              ^
Data/SQLite/src/sqlite3.c:49900:56: note: Function 'memdbFullPathname' argument 2 names different: declaration 'zName' definition 'zPath'.
static int memdbFullPathname(sqlite3_vfs*, const char *zName, int, char *zOut);
                                                       ^
Data/SQLite/src/sqlite3.c:50391:15: note: Function 'memdbFullPathname' argument 2 names different: declaration 'zName' definition 'zPath'.
  const char *zPath,
              ^
Data/SQLite/src/sqlite3.c:50403:57: style:inconclusive: Function 'memdbDlOpen' argument 2 names different: declaration 'zFilename' definition 'zPath'. [funcArgNamesDifferent]
static void *memdbDlOpen(sqlite3_vfs *pVfs, const char *zPath){
                                                        ^
Data/SQLite/src/sqlite3.c:49901:52: note: Function 'memdbDlOpen' argument 2 names different: declaration 'zFilename' definition 'zPath'.
static void *memdbDlOpen(sqlite3_vfs*, const char *zFilename);
                                                   ^
Data/SQLite/src/sqlite3.c:50403:57: note: Function 'memdbDlOpen' argument 2 names different: declaration 'zFilename' definition 'zPath'.
static void *memdbDlOpen(sqlite3_vfs *pVfs, const char *zPath){
                                                        ^
Data/SQLite/src/sqlite3.c:50434:64: style:inconclusive: Function 'memdbRandomness' argument 3 names different: declaration 'zOut' definition 'zBufOut'. [funcArgNamesDifferent]
static int memdbRandomness(sqlite3_vfs *pVfs, int nByte, char *zBufOut){
                                                               ^
Data/SQLite/src/sqlite3.c:49905:59: note: Function 'memdbRandomness' argument 3 names different: declaration 'zOut' definition 'zBufOut'.
static int memdbRandomness(sqlite3_vfs*, int nByte, char *zOut);
                                                          ^
Data/SQLite/src/sqlite3.c:50434:64: note: Function 'memdbRandomness' argument 3 names different: declaration 'zOut' definition 'zBufOut'.
static int memdbRandomness(sqlite3_vfs *pVfs, int nByte, char *zBufOut){
                                                               ^
Data/SQLite/src/sqlite3.c:50442:46: style:inconclusive: Function 'memdbSleep' argument 2 names different: declaration 'microseconds' definition 'nMicro'. [funcArgNamesDifferent]
static int memdbSleep(sqlite3_vfs *pVfs, int nMicro){
                                             ^
Data/SQLite/src/sqlite3.c:49906:41: note: Function 'memdbSleep' argument 2 names different: declaration 'microseconds' definition 'nMicro'.
static int memdbSleep(sqlite3_vfs*, int microseconds);
                                        ^
Data/SQLite/src/sqlite3.c:50442:46: note: Function 'memdbSleep' argument 2 names different: declaration 'microseconds' definition 'nMicro'.
static int memdbSleep(sqlite3_vfs *pVfs, int nMicro){
                                             ^
Data/SQLite/src/sqlite3.c:51372:11: style:inconclusive: Function 'sqlite3PcacheOpen' argument 6 names different: declaration 'pToInit' definition 'p'. [funcArgNamesDifferent]
  PCache *p                    /* Preallocated space for the PCache */
          ^
Data/SQLite/src/sqlite3.c:16101:11: note: Function 'sqlite3PcacheOpen' argument 6 names different: declaration 'pToInit' definition 'p'.
  PCache *pToInit                /* Preallocated space for the PCache */
          ^
Data/SQLite/src/sqlite3.c:51372:11: note: Function 'sqlite3PcacheOpen' argument 6 names different: declaration 'pToInit' definition 'p'.
  PCache *p                    /* Preallocated space for the PCache */
          ^
Data/SQLite/src/sqlite3.c:51725:64: style:inconclusive: Function 'sqlite3PcacheTruncate' argument 2 names different: declaration 'x' definition 'pgno'. [funcArgNamesDifferent]
SQLITE_PRIVATE void sqlite3PcacheTruncate(PCache *pCache, Pgno pgno){
                                                               ^
Data/SQLite/src/sqlite3.c:16130:57: note: Function 'sqlite3PcacheTruncate' argument 2 names different: declaration 'x' definition 'pgno'.
SQLITE_PRIVATE void sqlite3PcacheTruncate(PCache*, Pgno x);
                                                        ^
Data/SQLite/src/sqlite3.c:51725:64: note: Function 'sqlite3PcacheTruncate' argument 2 names different: declaration 'x' definition 'pgno'.
SQLITE_PRIVATE void sqlite3PcacheTruncate(PCache *pCache, Pgno pgno){
                                                               ^
Data/SQLite/src/sqlite3.c:59595:7: style:inconclusive: Function 'sqlite3PagerGet' argument 4 names different: declaration 'clrFlag' definition 'flags'. [funcArgNamesDifferent]
  int flags           /* PAGER_GET_XXX flags */
      ^
Data/SQLite/src/sqlite3.c:14867:83: note: Function 'sqlite3PagerGet' argument 4 names different: declaration 'clrFlag' definition 'flags'.
SQLITE_PRIVATE int sqlite3PagerGet(Pager *pPager, Pgno pgno, DbPage **ppPage, int clrFlag);
                                                                                  ^
Data/SQLite/src/sqlite3.c:59595:7: note: Function 'sqlite3PagerGet' argument 4 names different: declaration 'clrFlag' definition 'flags'.
  int flags           /* PAGER_GET_XXX flags */
      ^
Data/SQLite/src/sqlite3.c:60808:65: style:inconclusive: Function 'sqlite3PagerOpenSavepoint' argument 2 names different: declaration 'n' definition 'nSavepoint'. [funcArgNamesDifferent]
SQLITE_PRIVATE int sqlite3PagerOpenSavepoint(Pager *pPager, int nSavepoint){
                                                                ^
Data/SQLite/src/sqlite3.c:14890:65: note: Function 'sqlite3PagerOpenSavepoint' argument 2 names different: declaration 'n' definition 'nSavepoint'.
SQLITE_PRIVATE int sqlite3PagerOpenSavepoint(Pager *pPager, int n);
                                                                ^
Data/SQLite/src/sqlite3.c:60808:65: note: Function 'sqlite3PagerOpenSavepoint' argument 2 names different: declaration 'n' definition 'nSavepoint'.
SQLITE_PRIVATE int sqlite3PagerOpenSavepoint(Pager *pPager, int nSavepoint){
                                                                ^
Data/SQLite/src/sqlite3.c:61465:8: style:inconclusive: Function 'sqlite3PagerOpenWal' argument 2 names different: declaration 'pisOpen' definition 'pbOpen'. [funcArgNamesDifferent]
  int *pbOpen                     /* OUT: Set to true if call is a no-op */
       ^
Data/SQLite/src/sqlite3.c:14898:62: note: Function 'sqlite3PagerOpenWal' argument 2 names different: declaration 'pisOpen' definition 'pbOpen'.
SQLITE_PRIVATE   int sqlite3PagerOpenWal(Pager *pPager, int *pisOpen);
                                                             ^
Data/SQLite/src/sqlite3.c:61465:8: note: Function 'sqlite3PagerOpenWal' argument 2 names different: declaration 'pisOpen' definition 'pbOpen'.
  int *pbOpen                     /* OUT: Set to true if call is a no-op */
       ^
Data/SQLite/src/sqlite3.c:69838:58: style:inconclusive: Function 'sqlite3BtreeSetPageSize' argument 2 names different: declaration 'nPagesize' definition 'pageSize'. [funcArgNamesDifferent]
SQLITE_PRIVATE int sqlite3BtreeSetPageSize(Btree *p, int pageSize, int nReserve, int iFix){
                                                         ^
Data/SQLite/src/sqlite3.c:15040:58: note: Function 'sqlite3BtreeSetPageSize' argument 2 names different: declaration 'nPagesize' definition 'pageSize'.
SQLITE_PRIVATE int sqlite3BtreeSetPageSize(Btree *p, int nPagesize, int nReserve, int eFix);
                                                         ^
Data/SQLite/src/sqlite3.c:69838:58: note: Function 'sqlite3BtreeSetPageSize' argument 2 names different: declaration 'nPagesize' definition 'pageSize'.
SQLITE_PRIVATE int sqlite3BtreeSetPageSize(Btree *p, int pageSize, int nReserve, int iFix){
                                                         ^
Data/SQLite/src/sqlite3.c:69838:86: style:inconclusive: Function 'sqlite3BtreeSetPageSize' argument 4 names different: declaration 'eFix' definition 'iFix'. [funcArgNamesDifferent]
SQLITE_PRIVATE int sqlite3BtreeSetPageSize(Btree *p, int pageSize, int nReserve, int iFix){
                                                                                     ^
Data/SQLite/src/sqlite3.c:15040:87: note: Function 'sqlite3BtreeSetPageSize' argument 4 names different: declaration 'eFix' definition 'iFix'.
SQLITE_PRIVATE int sqlite3BtreeSetPageSize(Btree *p, int nPagesize, int nReserve, int eFix);
                                                                                      ^
Data/SQLite/src/sqlite3.c:69838:86: note: Function 'sqlite3BtreeSetPageSize' argument 4 names different: declaration 'eFix' definition 'iFix'.
SQLITE_PRIVATE int sqlite3BtreeSetPageSize(Btree *p, int pageSize, int nReserve, int iFix){
                                                                                     ^
Data/SQLite/src/sqlite3.c:71474:13: style:inconclusive: Function 'sqlite3BtreeCursor' argument 5 names different: declaration 'pCursor' definition 'pCur'. [funcArgNamesDifferent]
  BtCursor *pCur                              /* Write new cursor here */
            ^
Data/SQLite/src/sqlite3.c:15207:13: note: Function 'sqlite3BtreeCursor' argument 5 names different: declaration 'pCursor' definition 'pCur'.
  BtCursor *pCursor                    /* Space to write cursor structure */
            ^
Data/SQLite/src/sqlite3.c:71474:13: note: Function 'sqlite3BtreeCursor' argument 5 names different: declaration 'pCursor' definition 'pCur'.
  BtCursor *pCur                              /* Write new cursor here */
            ^
Data/SQLite/src/sqlite3.c:72435:7: style:inconclusive: Function 'sqlite3BtreeTableMoveto' argument 3 names different: declaration 'bias' definition 'biasRight'. [funcArgNamesDifferent]
  int biasRight,           /* If true, bias the search to the high end */
      ^
Data/SQLite/src/sqlite3.c:15221:7: note: Function 'sqlite3BtreeTableMoveto' argument 3 names different: declaration 'bias' definition 'biasRight'.
  int bias,
      ^
Data/SQLite/src/sqlite3.c:72435:7: note: Function 'sqlite3BtreeTableMoveto' argument 3 names different: declaration 'bias' definition 'biasRight'.
  int biasRight,           /* If true, bias the search to the high end */
      ^
Data/SQLite/src/sqlite3.c:72665:19: style:inconclusive: Function 'sqlite3BtreeIndexMoveto' argument 2 names different: declaration 'pUnKey' definition 'pIdxKey'. [funcArgNamesDifferent]
  UnpackedRecord *pIdxKey, /* Unpacked index key */
                  ^
Data/SQLite/src/sqlite3.c:15226:19: note: Function 'sqlite3BtreeIndexMoveto' argument 2 names different: declaration 'pUnKey' definition 'pIdxKey'.
  UnpackedRecord *pUnKey,
                  ^
Data/SQLite/src/sqlite3.c:72665:19: note: Function 'sqlite3BtreeIndexMoveto' argument 2 names different: declaration 'pUnKey' definition 'pIdxKey'.
  UnpackedRecord *pIdxKey, /* Unpacked index key */
                  ^
Data/SQLite/src/sqlite3.c:75867:23: style:inconclusive: Function 'sqlite3BtreeInsert' argument 2 names different: declaration 'pPayload' definition 'pX'. [funcArgNamesDifferent]
  const BtreePayload *pX,        /* Content of the row to be inserted */
                      ^
Data/SQLite/src/sqlite3.c:15282:70: note: Function 'sqlite3BtreeInsert' argument 2 names different: declaration 'pPayload' definition 'pX'.
SQLITE_PRIVATE int sqlite3BtreeInsert(BtCursor*, const BtreePayload *pPayload,
                                                                     ^
Data/SQLite/src/sqlite3.c:75867:23: note: Function 'sqlite3BtreeInsert' argument 2 names different: declaration 'pPayload' definition 'pX'.
  const BtreePayload *pX,        /* Content of the row to be inserted */
                      ^
Data/SQLite/src/sqlite3.c:76891:48: style:inconclusive: Function 'sqlite3BtreeGetMeta' argument 1 names different: declaration 'pBtree' definition 'p'. [funcArgNamesDifferent]
SQLITE_PRIVATE void sqlite3BtreeGetMeta(Btree *p, int idx, u32 *pMeta){
                                               ^
Data/SQLite/src/sqlite3.c:15098:48: note: Function 'sqlite3BtreeGetMeta' argument 1 names different: declaration 'pBtree' definition 'p'.
SQLITE_PRIVATE void sqlite3BtreeGetMeta(Btree *pBtree, int idx, u32 *pValue);
                                               ^
Data/SQLite/src/sqlite3.c:76891:48: note: Function 'sqlite3BtreeGetMeta' argument 1 names different: declaration 'pBtree' definition 'p'.
SQLITE_PRIVATE void sqlite3BtreeGetMeta(Btree *p, int idx, u32 *pMeta){
                                               ^
Data/SQLite/src/sqlite3.c:76891:65: style:inconclusive: Function 'sqlite3BtreeGetMeta' argument 3 names different: declaration 'pValue' definition 'pMeta'. [funcArgNamesDifferent]
SQLITE_PRIVATE void sqlite3BtreeGetMeta(Btree *p, int idx, u32 *pMeta){
                                                                ^
Data/SQLite/src/sqlite3.c:15098:70: note: Function 'sqlite3BtreeGetMeta' argument 3 names different: declaration 'pValue' definition 'pMeta'.
SQLITE_PRIVATE void sqlite3BtreeGetMeta(Btree *pBtree, int idx, u32 *pValue);
                                                                     ^
Data/SQLite/src/sqlite3.c:76891:65: note: Function 'sqlite3BtreeGetMeta' argument 3 names different: declaration 'pValue' definition 'pMeta'.
SQLITE_PRIVATE void sqlite3BtreeGetMeta(Btree *p, int idx, u32 *pMeta){
                                                                ^
Data/SQLite/src/sqlite3.c:76921:66: style:inconclusive: Function 'sqlite3BtreeUpdateMeta' argument 3 names different: declaration 'value' definition 'iMeta'. [funcArgNamesDifferent]
SQLITE_PRIVATE int sqlite3BtreeUpdateMeta(Btree *p, int idx, u32 iMeta){
                                                                 ^
Data/SQLite/src/sqlite3.c:15099:64: note: Function 'sqlite3BtreeUpdateMeta' argument 3 names different: declaration 'value' definition 'iMeta'.
SQLITE_PRIVATE int sqlite3BtreeUpdateMeta(Btree*, int idx, u32 value);
                                                               ^
Data/SQLite/src/sqlite3.c:76921:66: note: Function 'sqlite3BtreeUpdateMeta' argument 3 names different: declaration 'value' definition 'iMeta'.
SQLITE_PRIVATE int sqlite3BtreeUpdateMeta(Btree *p, int idx, u32 iMeta){
                                                                 ^
Data/SQLite/src/sqlite3.c:77795:52: style:inconclusive: Function 'sqlite3BtreeSchemaLocked' argument 1 names different: declaration 'pBtree' definition 'p'. [funcArgNamesDifferent]
SQLITE_PRIVATE int sqlite3BtreeSchemaLocked(Btree *p){
                                                   ^
Data/SQLite/src/sqlite3.c:15060:52: note: Function 'sqlite3BtreeSchemaLocked' argument 1 names different: declaration 'pBtree' definition 'p'.
SQLITE_PRIVATE int sqlite3BtreeSchemaLocked(Btree *pBtree);
                                                   ^
Data/SQLite/src/sqlite3.c:77795:52: note: Function 'sqlite3BtreeSchemaLocked' argument 1 names different: declaration 'pBtree' definition 'p'.
SQLITE_PRIVATE int sqlite3BtreeSchemaLocked(Btree *p){
                                                   ^
Data/SQLite/src/sqlite3.c:77812:49: style:inconclusive: Function 'sqlite3BtreeLockTable' argument 1 names different: declaration 'pBtree' definition 'p'. [funcArgNamesDifferent]
SQLITE_PRIVATE int sqlite3BtreeLockTable(Btree *p, int iTab, u8 isWriteLock){
                                                ^
Data/SQLite/src/sqlite3.c:15062:49: note: Function 'sqlite3BtreeLockTable' argument 1 names different: declaration 'pBtree' definition 'p'.
SQLITE_PRIVATE int sqlite3BtreeLockTable(Btree *pBtree, int iTab, u8 isWriteLock);
                                                ^
Data/SQLite/src/sqlite3.c:77812:49: note: Function 'sqlite3BtreeLockTable' argument 1 names different: declaration 'pBtree' definition 'p'.
SQLITE_PRIVATE int sqlite3BtreeLockTable(Btree *p, int iTab, u8 isWriteLock){
                                                ^
Data/SQLite/src/sqlite3.c:77901:50: style:inconclusive: Function 'sqlite3BtreeSetVersion' argument 1 names different: declaration 'pBt' definition 'pBtree'. [funcArgNamesDifferent]
SQLITE_PRIVATE int sqlite3BtreeSetVersion(Btree *pBtree, int iVersion){
                                                 ^
Data/SQLite/src/sqlite3.c:15310:50: note: Function 'sqlite3BtreeSetVersion' argument 1 names different: declaration 'pBt' definition 'pBtree'.
SQLITE_PRIVATE int sqlite3BtreeSetVersion(Btree *pBt, int iVersion);
                                                 ^
Data/SQLite/src/sqlite3.c:77901:50: note: Function 'sqlite3BtreeSetVersion' argument 1 names different: declaration 'pBt' definition 'pBtree'.
SQLITE_PRIVATE int sqlite3BtreeSetVersion(Btree *pBtree, int iVersion){
                                                 ^
Data/SQLite/src/sqlite3.c:77943:50: style:inconclusive: Function 'sqlite3BtreeIsReadonly' argument 1 names different: declaration 'pBt' definition 'p'. [funcArgNamesDifferent]
SQLITE_PRIVATE int sqlite3BtreeIsReadonly(Btree *p){
                                                 ^
Data/SQLite/src/sqlite3.c:15312:50: note: Function 'sqlite3BtreeIsReadonly' argument 1 names different: declaration 'pBt' definition 'p'.
SQLITE_PRIVATE int sqlite3BtreeIsReadonly(Btree *pBt);
                                                 ^
Data/SQLite/src/sqlite3.c:77943:50: note: Function 'sqlite3BtreeIsReadonly' argument 1 names different: declaration 'pBt' definition 'p'.
SQLITE_PRIVATE int sqlite3BtreeIsReadonly(Btree *p){
                                                 ^
Data/SQLite/src/sqlite3.c:78113:12: style:inconclusive: Function 'sqlite3_backup_init' argument 1 names different: declaration 'pDest' definition 'pDestDb'. [funcArgNamesDifferent]
  sqlite3* pDestDb,                     /* Database to write to */
           ^
Data/SQLite/src/sqlite3.c:9305:12: note: Function 'sqlite3_backup_init' argument 1 names different: declaration 'pDest' definition 'pDestDb'.
  sqlite3 *pDest,                        /* Destination database handle */
           ^
Data/SQLite/src/sqlite3.c:78113:12: note: Function 'sqlite3_backup_init' argument 1 names different: declaration 'pDest' definition 'pDestDb'.
  sqlite3* pDestDb,                     /* Database to write to */
           ^
Data/SQLite/src/sqlite3.c:78114:15: style:inconclusive: Function 'sqlite3_backup_init' argument 2 names different: declaration 'zDestName' definition 'zDestDb'. [funcArgNamesDifferent]
  const char *zDestDb,                  /* Name of database within pDestDb */
              ^
Data/SQLite/src/sqlite3.c:9306:15: note: Function 'sqlite3_backup_init' argument 2 names different: declaration 'zDestName' definition 'zDestDb'.
  const char *zDestName,                 /* Destination database name */
              ^
Data/SQLite/src/sqlite3.c:78114:15: note: Function 'sqlite3_backup_init' argument 2 names different: declaration 'zDestName' definition 'zDestDb'.
  const char *zDestDb,                  /* Name of database within pDestDb */
              ^
Data/SQLite/src/sqlite3.c:78115:12: style:inconclusive: Function 'sqlite3_backup_init' argument 3 names different: declaration 'pSource' definition 'pSrcDb'. [funcArgNamesDifferent]
  sqlite3* pSrcDb,                      /* Database connection to read from */
           ^
Data/SQLite/src/sqlite3.c:9307:12: note: Function 'sqlite3_backup_init' argument 3 names different: declaration 'pSource' definition 'pSrcDb'.
  sqlite3 *pSource,                      /* Source database handle */
           ^
Data/SQLite/src/sqlite3.c:78115:12: note: Function 'sqlite3_backup_init' argument 3 names different: declaration 'pSource' definition 'pSrcDb'.
  sqlite3* pSrcDb,                      /* Database connection to read from */
           ^
Data/SQLite/src/sqlite3.c:78116:15: style:inconclusive: Function 'sqlite3_backup_init' argument 4 names different: declaration 'zSourceName' definition 'zSrcDb'. [funcArgNamesDifferent]
  const char *zSrcDb                    /* Name of database within pSrcDb */
              ^
Data/SQLite/src/sqlite3.c:9308:15: note: Function 'sqlite3_backup_init' argument 4 names different: declaration 'zSourceName' definition 'zSrcDb'.
  const char *zSourceName                /* Source database name */
              ^
Data/SQLite/src/sqlite3.c:78116:15: note: Function 'sqlite3_backup_init' argument 4 names different: declaration 'zSourceName' definition 'zSrcDb'.
  const char *zSrcDb                    /* Name of database within pSrcDb */
              ^
Data/SQLite/src/sqlite3.c:78983:77: style:inconclusive: Function 'sqlite3VdbeMemGrow' argument 3 names different: declaration 'preserve' definition 'bPreserve'. [funcArgNamesDifferent]
SQLITE_PRIVATE SQLITE_NOINLINE int sqlite3VdbeMemGrow(Mem *pMem, int n, int bPreserve){
                                                                            ^
Data/SQLite/src/sqlite3.c:22808:61: note: Function 'sqlite3VdbeMemGrow' argument 3 names different: declaration 'preserve' definition 'bPreserve'.
SQLITE_PRIVATE int sqlite3VdbeMemGrow(Mem *pMem, int n, int preserve);
                                                            ^
Data/SQLite/src/sqlite3.c:78983:77: note: Function 'sqlite3VdbeMemGrow' argument 3 names different: declaration 'preserve' definition 'bPreserve'.
SQLITE_PRIVATE SQLITE_NOINLINE int sqlite3VdbeMemGrow(Mem *pMem, int n, int bPreserve){
                                                                            ^
Data/SQLite/src/sqlite3.c:79046:64: style:inconclusive: Function 'sqlite3VdbeMemClearAndResize' argument 2 names different: declaration 'n' definition 'szNew'. [funcArgNamesDifferent]
SQLITE_PRIVATE int sqlite3VdbeMemClearAndResize(Mem *pMem, int szNew){
                                                               ^
Data/SQLite/src/sqlite3.c:22809:64: note: Function 'sqlite3VdbeMemClearAndResize' argument 2 names different: declaration 'n' definition 'szNew'.
SQLITE_PRIVATE int sqlite3VdbeMemClearAndResize(Mem *pMem, int n);
                                                               ^
Data/SQLite/src/sqlite3.c:79046:64: note: Function 'sqlite3VdbeMemClearAndResize' argument 2 names different: declaration 'n' definition 'szNew'.
SQLITE_PRIVATE int sqlite3VdbeMemClearAndResize(Mem *pMem, int szNew){
                                                               ^
Data/SQLite/src/sqlite3.c:81845:64: style:inconclusive: Function 'sqlite3VdbeChangeP1' argument 3 names different: declaration 'P1' definition 'val'. [funcArgNamesDifferent]
SQLITE_PRIVATE void sqlite3VdbeChangeP1(Vdbe *p, int addr, int val){
                                                               ^
Data/SQLite/src/sqlite3.c:15849:62: note: Function 'sqlite3VdbeChangeP1' argument 3 names different: declaration 'P1' definition 'val'.
SQLITE_PRIVATE void sqlite3VdbeChangeP1(Vdbe*, int addr, int P1);
                                                             ^
Data/SQLite/src/sqlite3.c:81845:64: note: Function 'sqlite3VdbeChangeP1' argument 3 names different: declaration 'P1' definition 'val'.
SQLITE_PRIVATE void sqlite3VdbeChangeP1(Vdbe *p, int addr, int val){
                                                               ^
Data/SQLite/src/sqlite3.c:81848:64: style:inconclusive: Function 'sqlite3VdbeChangeP2' argument 3 names different: declaration 'P2' definition 'val'. [funcArgNamesDifferent]
SQLITE_PRIVATE void sqlite3VdbeChangeP2(Vdbe *p, int addr, int val){
                                                               ^
Data/SQLite/src/sqlite3.c:15850:62: note: Function 'sqlite3VdbeChangeP2' argument 3 names different: declaration 'P2' definition 'val'.
SQLITE_PRIVATE void sqlite3VdbeChangeP2(Vdbe*, int addr, int P2);
                                                             ^
Data/SQLite/src/sqlite3.c:81848:64: note: Function 'sqlite3VdbeChangeP2' argument 3 names different: declaration 'P2' definition 'val'.
SQLITE_PRIVATE void sqlite3VdbeChangeP2(Vdbe *p, int addr, int val){
                                                               ^
Data/SQLite/src/sqlite3.c:81851:64: style:inconclusive: Function 'sqlite3VdbeChangeP3' argument 3 names different: declaration 'P3' definition 'val'. [funcArgNamesDifferent]
SQLITE_PRIVATE void sqlite3VdbeChangeP3(Vdbe *p, int addr, int val){
                                                               ^
Data/SQLite/src/sqlite3.c:15851:62: note: Function 'sqlite3VdbeChangeP3' argument 3 names different: declaration 'P3' definition 'val'.
SQLITE_PRIVATE void sqlite3VdbeChangeP3(Vdbe*, int addr, int P3);
                                                             ^
Data/SQLite/src/sqlite3.c:81851:64: note: Function 'sqlite3VdbeChangeP3' argument 3 names different: declaration 'P3' definition 'val'.
SQLITE_PRIVATE void sqlite3VdbeChangeP3(Vdbe *p, int addr, int val){
                                                               ^
Data/SQLite/src/sqlite3.c:81854:54: style:inconclusive: Function 'sqlite3VdbeChangeP5' argument 2 names different: declaration 'P5' definition 'p5'. [funcArgNamesDifferent]
SQLITE_PRIVATE void sqlite3VdbeChangeP5(Vdbe *p, u16 p5){
                                                     ^
Data/SQLite/src/sqlite3.c:15852:52: note: Function 'sqlite3VdbeChangeP5' argument 2 names different: declaration 'P5' definition 'p5'.
SQLITE_PRIVATE void sqlite3VdbeChangeP5(Vdbe*, u16 P5);
                                                   ^
Data/SQLite/src/sqlite3.c:81854:54: note: Function 'sqlite3VdbeChangeP5' argument 2 names different: declaration 'P5' definition 'p5'.
SQLITE_PRIVATE void sqlite3VdbeChangeP5(Vdbe *p, u16 p5){
                                                     ^
Data/SQLite/src/sqlite3.c:82096:81: style:inconclusive: Function 'sqlite3VdbeChangeP4' argument 4 names different: declaration 'N' definition 'n'. [funcArgNamesDifferent]
SQLITE_PRIVATE void sqlite3VdbeChangeP4(Vdbe *p, int addr, const char *zP4, int n){
                                                                                ^
Data/SQLite/src/sqlite3.c:15862:79: note: Function 'sqlite3VdbeChangeP4' argument 4 names different: declaration 'N' definition 'n'.
SQLITE_PRIVATE void sqlite3VdbeChangeP4(Vdbe*, int addr, const char *zP4, int N);
                                                                              ^
Data/SQLite/src/sqlite3.c:82096:81: note: Function 'sqlite3VdbeChangeP4' argument 4 names different: declaration 'N' definition 'n'.
SQLITE_PRIVATE void sqlite3VdbeChangeP4(Vdbe *p, int addr, const char *zP4, int n){
                                                                                ^
Data/SQLite/src/sqlite3.c:82139:65: style:inconclusive: Function 'sqlite3VdbeAppendP4' argument 3 names different: declaration 'p4type' definition 'n'. [funcArgNamesDifferent]
SQLITE_PRIVATE void sqlite3VdbeAppendP4(Vdbe *p, void *pP4, int n){
                                                                ^
Data/SQLite/src/sqlite3.c:15863:63: note: Function 'sqlite3VdbeAppendP4' argument 3 names different: declaration 'p4type' definition 'n'.
SQLITE_PRIVATE void sqlite3VdbeAppendP4(Vdbe*, void *pP4, int p4type);
                                                              ^
Data/SQLite/src/sqlite3.c:82139:65: note: Function 'sqlite3VdbeAppendP4' argument 3 names different: declaration 'p4type' definition 'n'.
SQLITE_PRIVATE void sqlite3VdbeAppendP4(Vdbe *p, void *pP4, int n){
                                                                ^
Data/SQLite/src/sqlite3.c:86506:17: style:inconclusive: Function 'sqlite3_result_text64' argument 5 names different: declaration 'encoding' definition 'enc'. [funcArgNamesDifferent]
  unsigned char enc
                ^
Data/SQLite/src/sqlite3.c:6223:58: note: Function 'sqlite3_result_text64' argument 5 names different: declaration 'encoding' definition 'enc'.
                           void(*)(void*), unsigned char encoding);
                                                         ^
Data/SQLite/src/sqlite3.c:86506:17: note: Function 'sqlite3_result_text64' argument 5 names different: declaration 'encoding' definition 'enc'.
  unsigned char enc
                ^
Data/SQLite/src/sqlite3.c:86996:68: style:inconclusive: Function 'sqlite3_aggregate_context' argument 2 names different: declaration 'nBytes' definition 'nByte'. [funcArgNamesDifferent]
SQLITE_API void *sqlite3_aggregate_context(sqlite3_context *p, int nByte){
                                                                   ^
Data/SQLite/src/sqlite3.c:5955:66: note: Function 'sqlite3_aggregate_context' argument 2 names different: declaration 'nBytes' definition 'nByte'.
SQLITE_API void *sqlite3_aggregate_context(sqlite3_context*, int nBytes);
                                                                 ^
Data/SQLite/src/sqlite3.c:86996:68: note: Function 'sqlite3_aggregate_context' argument 2 names different: declaration 'nBytes' definition 'nByte'.
SQLITE_API void *sqlite3_aggregate_context(sqlite3_context *p, int nByte){
                                                                   ^
Data/SQLite/src/sqlite3.c:87017:65: style:inconclusive: Function 'sqlite3_get_auxdata' argument 2 names different: declaration 'N' definition 'iArg'. [funcArgNamesDifferent]
SQLITE_API void *sqlite3_get_auxdata(sqlite3_context *pCtx, int iArg){
                                                                ^
Data/SQLite/src/sqlite3.c:6041:60: note: Function 'sqlite3_get_auxdata' argument 2 names different: declaration 'N' definition 'iArg'.
SQLITE_API void *sqlite3_get_auxdata(sqlite3_context*, int N);
                                                           ^
Data/SQLite/src/sqlite3.c:87017:65: note: Function 'sqlite3_get_auxdata' argument 2 names different: declaration 'N' definition 'iArg'.
SQLITE_API void *sqlite3_get_auxdata(sqlite3_context *pCtx, int iArg){
                                                                ^
Data/SQLite/src/sqlite3.c:87047:7: style:inconclusive: Function 'sqlite3_set_auxdata' argument 2 names different: declaration 'N' definition 'iArg'. [funcArgNamesDifferent]
  int iArg,
      ^
Data/SQLite/src/sqlite3.c:6042:59: note: Function 'sqlite3_set_auxdata' argument 2 names different: declaration 'N' definition 'iArg'.
SQLITE_API void sqlite3_set_auxdata(sqlite3_context*, int N, void*, void (*)(void*));
                                                          ^
Data/SQLite/src/sqlite3.c:87047:7: note: Function 'sqlite3_set_auxdata' argument 2 names different: declaration 'N' definition 'iArg'.
  int iArg,
      ^
Data/SQLite/src/sqlite3.c:87220:69: style:inconclusive: Function 'sqlite3_column_blob' argument 2 names different: declaration 'iCol' definition 'i'. [funcArgNamesDifferent]
SQLITE_API const void *sqlite3_column_blob(sqlite3_stmt *pStmt, int i){
                                                                    ^
Data/SQLite/src/sqlite3.c:5402:63: note: Function 'sqlite3_column_blob' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API const void *sqlite3_column_blob(sqlite3_stmt*, int iCol);
                                                              ^
Data/SQLite/src/sqlite3.c:87220:69: note: Function 'sqlite3_column_blob' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API const void *sqlite3_column_blob(sqlite3_stmt *pStmt, int i){
                                                                    ^
Data/SQLite/src/sqlite3.c:87230:62: style:inconclusive: Function 'sqlite3_column_bytes' argument 2 names different: declaration 'iCol' definition 'i'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_column_bytes(sqlite3_stmt *pStmt, int i){
                                                             ^
Data/SQLite/src/sqlite3.c:5409:56: note: Function 'sqlite3_column_bytes' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API int sqlite3_column_bytes(sqlite3_stmt*, int iCol);
                                                       ^
Data/SQLite/src/sqlite3.c:87230:62: note: Function 'sqlite3_column_bytes' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API int sqlite3_column_bytes(sqlite3_stmt *pStmt, int i){
                                                             ^
Data/SQLite/src/sqlite3.c:87235:64: style:inconclusive: Function 'sqlite3_column_bytes16' argument 2 names different: declaration 'iCol' definition 'i'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_column_bytes16(sqlite3_stmt *pStmt, int i){
                                                               ^
Data/SQLite/src/sqlite3.c:5410:58: note: Function 'sqlite3_column_bytes16' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API int sqlite3_column_bytes16(sqlite3_stmt*, int iCol);
                                                         ^
Data/SQLite/src/sqlite3.c:87235:64: note: Function 'sqlite3_column_bytes16' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API int sqlite3_column_bytes16(sqlite3_stmt *pStmt, int i){
                                                               ^
Data/SQLite/src/sqlite3.c:87240:66: style:inconclusive: Function 'sqlite3_column_double' argument 2 names different: declaration 'iCol' definition 'i'. [funcArgNamesDifferent]
SQLITE_API double sqlite3_column_double(sqlite3_stmt *pStmt, int i){
                                                                 ^
Data/SQLite/src/sqlite3.c:5403:60: note: Function 'sqlite3_column_double' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API double sqlite3_column_double(sqlite3_stmt*, int iCol);
                                                           ^
Data/SQLite/src/sqlite3.c:87240:66: note: Function 'sqlite3_column_double' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API double sqlite3_column_double(sqlite3_stmt *pStmt, int i){
                                                                 ^
Data/SQLite/src/sqlite3.c:87245:60: style:inconclusive: Function 'sqlite3_column_int' argument 2 names different: declaration 'iCol' definition 'i'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_column_int(sqlite3_stmt *pStmt, int i){
                                                           ^
Data/SQLite/src/sqlite3.c:5404:54: note: Function 'sqlite3_column_int' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API int sqlite3_column_int(sqlite3_stmt*, int iCol);
                                                     ^
Data/SQLite/src/sqlite3.c:87245:60: note: Function 'sqlite3_column_int' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API int sqlite3_column_int(sqlite3_stmt *pStmt, int i){
                                                           ^
Data/SQLite/src/sqlite3.c:87250:71: style:inconclusive: Function 'sqlite3_column_int64' argument 2 names different: declaration 'iCol' definition 'i'. [funcArgNamesDifferent]
SQLITE_API sqlite_int64 sqlite3_column_int64(sqlite3_stmt *pStmt, int i){
                                                                      ^
Data/SQLite/src/sqlite3.c:5405:66: note: Function 'sqlite3_column_int64' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API sqlite3_int64 sqlite3_column_int64(sqlite3_stmt*, int iCol);
                                                                 ^
Data/SQLite/src/sqlite3.c:87250:71: note: Function 'sqlite3_column_int64' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API sqlite_int64 sqlite3_column_int64(sqlite3_stmt *pStmt, int i){
                                                                      ^
Data/SQLite/src/sqlite3.c:87255:78: style:inconclusive: Function 'sqlite3_column_text' argument 2 names different: declaration 'iCol' definition 'i'. [funcArgNamesDifferent]
SQLITE_API const unsigned char *sqlite3_column_text(sqlite3_stmt *pStmt, int i){
                                                                             ^
Data/SQLite/src/sqlite3.c:5406:72: note: Function 'sqlite3_column_text' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API const unsigned char *sqlite3_column_text(sqlite3_stmt*, int iCol);
                                                                       ^
Data/SQLite/src/sqlite3.c:87255:78: note: Function 'sqlite3_column_text' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API const unsigned char *sqlite3_column_text(sqlite3_stmt *pStmt, int i){
                                                                             ^
Data/SQLite/src/sqlite3.c:87260:73: style:inconclusive: Function 'sqlite3_column_value' argument 2 names different: declaration 'iCol' definition 'i'. [funcArgNamesDifferent]
SQLITE_API sqlite3_value *sqlite3_column_value(sqlite3_stmt *pStmt, int i){
                                                                        ^
Data/SQLite/src/sqlite3.c:5408:67: note: Function 'sqlite3_column_value' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API sqlite3_value *sqlite3_column_value(sqlite3_stmt*, int iCol);
                                                                  ^
Data/SQLite/src/sqlite3.c:87260:73: note: Function 'sqlite3_column_value' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API sqlite3_value *sqlite3_column_value(sqlite3_stmt *pStmt, int i){
                                                                        ^
Data/SQLite/src/sqlite3.c:87270:71: style:inconclusive: Function 'sqlite3_column_text16' argument 2 names different: declaration 'iCol' definition 'i'. [funcArgNamesDifferent]
SQLITE_API const void *sqlite3_column_text16(sqlite3_stmt *pStmt, int i){
                                                                      ^
Data/SQLite/src/sqlite3.c:5407:65: note: Function 'sqlite3_column_text16' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API const void *sqlite3_column_text16(sqlite3_stmt*, int iCol);
                                                                ^
Data/SQLite/src/sqlite3.c:87270:71: note: Function 'sqlite3_column_text16' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API const void *sqlite3_column_text16(sqlite3_stmt *pStmt, int i){
                                                                      ^
Data/SQLite/src/sqlite3.c:87276:61: style:inconclusive: Function 'sqlite3_column_type' argument 2 names different: declaration 'iCol' definition 'i'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_column_type(sqlite3_stmt *pStmt, int i){
                                                            ^
Data/SQLite/src/sqlite3.c:5411:55: note: Function 'sqlite3_column_type' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API int sqlite3_column_type(sqlite3_stmt*, int iCol);
                                                      ^
Data/SQLite/src/sqlite3.c:87276:61: note: Function 'sqlite3_column_type' argument 2 names different: declaration 'iCol' definition 'i'.
SQLITE_API int sqlite3_column_type(sqlite3_stmt *pStmt, int i){
                                                            ^
Data/SQLite/src/sqlite3.c:87523:7: style:inconclusive: Function 'sqlite3_bind_blob' argument 4 names different: declaration 'n' definition 'nData'. [funcArgNamesDifferent]
  int nData,
      ^
Data/SQLite/src/sqlite3.c:4831:71: note: Function 'sqlite3_bind_blob' argument 4 names different: declaration 'n' definition 'nData'.
SQLITE_API int sqlite3_bind_blob(sqlite3_stmt*, int, const void*, int n, void(*)(void*));
                                                                      ^
Data/SQLite/src/sqlite3.c:87523:7: note: Function 'sqlite3_bind_blob' argument 4 names different: declaration 'n' definition 'nData'.
  int nData,
      ^
Data/SQLite/src/sqlite3.c:87606:17: style:inconclusive: Function 'sqlite3_bind_text64' argument 6 names different: declaration 'encoding' definition 'enc'. [funcArgNamesDifferent]
  unsigned char enc
                ^
Data/SQLite/src/sqlite3.c:4841:56: note: Function 'sqlite3_bind_text64' argument 6 names different: declaration 'encoding' definition 'enc'.
                         void(*)(void*), unsigned char encoding);
                                                       ^
Data/SQLite/src/sqlite3.c:87606:17: note: Function 'sqlite3_bind_text64' argument 6 names different: declaration 'encoding' definition 'enc'.
  unsigned char enc
                ^
Data/SQLite/src/sqlite3.c:87829:69: style:inconclusive: Function 'sqlite3_stmt_status' argument 3 names different: declaration 'resetFlg' definition 'resetFlag'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_stmt_status(sqlite3_stmt *pStmt, int op, int resetFlag){
                                                                    ^
Data/SQLite/src/sqlite3.c:8802:62: note: Function 'sqlite3_stmt_status' argument 3 names different: declaration 'resetFlg' definition 'resetFlag'.
SQLITE_API int sqlite3_stmt_status(sqlite3_stmt*, int op,int resetFlg);
                                                             ^
Data/SQLite/src/sqlite3.c:87829:69: note: Function 'sqlite3_stmt_status' argument 3 names different: declaration 'resetFlg' definition 'resetFlag'.
SQLITE_API int sqlite3_stmt_status(sqlite3_stmt *pStmt, int op, int resetFlag){
                                                                    ^
Data/SQLite/src/sqlite3.c:97232:7: style:inconclusive: Function 'sqlite3_blob_open' argument 6 names different: declaration 'flags' definition 'wrFlag'. [funcArgNamesDifferent]
  int wrFlag,             /* True -> read/write access, false -> read-only */
      ^
Data/SQLite/src/sqlite3.c:7776:7: note: Function 'sqlite3_blob_open' argument 6 names different: declaration 'flags' definition 'wrFlag'.
  int flags,
      ^
Data/SQLite/src/sqlite3.c:97232:7: note: Function 'sqlite3_blob_open' argument 6 names different: declaration 'flags' definition 'wrFlag'.
  int wrFlag,             /* True -> read/write access, false -> read-only */
      ^
Data/SQLite/src/sqlite3.c:97557:61: style:inconclusive: Function 'sqlite3_blob_read' argument 2 names different: declaration 'Z' definition 'z'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_blob_read(sqlite3_blob *pBlob, void *z, int n, int iOffset){
                                                            ^
Data/SQLite/src/sqlite3.c:7871:56: note: Function 'sqlite3_blob_read' argument 2 names different: declaration 'Z' definition 'z'.
SQLITE_API int sqlite3_blob_read(sqlite3_blob *, void *Z, int N, int iOffset);
                                                       ^
Data/SQLite/src/sqlite3.c:97557:61: note: Function 'sqlite3_blob_read' argument 2 names different: declaration 'Z' definition 'z'.
SQLITE_API int sqlite3_blob_read(sqlite3_blob *pBlob, void *z, int n, int iOffset){
                                                            ^
Data/SQLite/src/sqlite3.c:97557:68: style:inconclusive: Function 'sqlite3_blob_read' argument 3 names different: declaration 'N' definition 'n'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_blob_read(sqlite3_blob *pBlob, void *z, int n, int iOffset){
                                                                   ^
Data/SQLite/src/sqlite3.c:7871:63: note: Function 'sqlite3_blob_read' argument 3 names different: declaration 'N' definition 'n'.
SQLITE_API int sqlite3_blob_read(sqlite3_blob *, void *Z, int N, int iOffset);
                                                              ^
Data/SQLite/src/sqlite3.c:97557:68: note: Function 'sqlite3_blob_read' argument 3 names different: declaration 'N' definition 'n'.
SQLITE_API int sqlite3_blob_read(sqlite3_blob *pBlob, void *z, int n, int iOffset){
                                                                   ^
Data/SQLite/src/sqlite3.c:107540:56: style:inconclusive: Function 'exprCodeVector' argument 3 names different: declaration 'piToFree' definition 'piFreeable'. [funcArgNamesDifferent]
static int exprCodeVector(Parse *pParse, Expr *p, int *piFreeable){
                                                       ^
Data/SQLite/src/sqlite3.c:103679:56: note: Function 'exprCodeVector' argument 3 names different: declaration 'piToFree' definition 'piFreeable'.
static int exprCodeVector(Parse *pParse, Expr *p, int *piToFree);
                                                       ^
Data/SQLite/src/sqlite3.c:107540:56: note: Function 'exprCodeVector' argument 3 names different: declaration 'piToFree' definition 'piFreeable'.
static int exprCodeVector(Parse *pParse, Expr *p, int *piFreeable){
                                                       ^
Data/SQLite/src/sqlite3.c:114234:57: style:inconclusive: Function 'sqlite3AnalysisLoad' argument 2 names different: declaration 'iDB' definition 'iDb'. [funcArgNamesDifferent]
SQLITE_PRIVATE int sqlite3AnalysisLoad(sqlite3 *db, int iDb){
                                                        ^
Data/SQLite/src/sqlite3.c:20373:53: note: Function 'sqlite3AnalysisLoad' argument 2 names different: declaration 'iDB' definition 'iDb'.
SQLITE_PRIVATE int sqlite3AnalysisLoad(sqlite3*,int iDB);
                                                    ^
Data/SQLite/src/sqlite3.c:114234:57: note: Function 'sqlite3AnalysisLoad' argument 2 names different: declaration 'iDB' definition 'iDb'.
SQLITE_PRIVATE int sqlite3AnalysisLoad(sqlite3 *db, int iDb){
                                                        ^
Data/SQLite/src/sqlite3.c:114985:9: style:inconclusive: Function 'sqlite3_set_authorizer' argument 3 names different: declaration 'pUserData' definition 'pArg'. [funcArgNamesDifferent]
  void *pArg
        ^
Data/SQLite/src/sqlite3.c:3419:9: note: Function 'sqlite3_set_authorizer' argument 3 names different: declaration 'pUserData' definition 'pArg'.
  void *pUserData
        ^
Data/SQLite/src/sqlite3.c:114985:9: note: Function 'sqlite3_set_authorizer' argument 3 names different: declaration 'pUserData' definition 'pArg'.
  void *pArg
        ^
Data/SQLite/src/sqlite3.c:123215:44: style:inconclusive: Function 'sqlite3_strglob' argument 1 names different: declaration 'zGlob' definition 'zGlobPattern'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_strglob(const char *zGlobPattern, const char *zString){
                                           ^
Data/SQLite/src/sqlite3.c:9463:44: note: Function 'sqlite3_strglob' argument 1 names different: declaration 'zGlob' definition 'zGlobPattern'.
SQLITE_API int sqlite3_strglob(const char *zGlob, const char *zStr);
                                           ^
Data/SQLite/src/sqlite3.c:123215:44: note: Function 'sqlite3_strglob' argument 1 names different: declaration 'zGlob' definition 'zGlobPattern'.
SQLITE_API int sqlite3_strglob(const char *zGlobPattern, const char *zString){
                                           ^
Data/SQLite/src/sqlite3.c:123215:70: style:inconclusive: Function 'sqlite3_strglob' argument 2 names different: declaration 'zStr' definition 'zString'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_strglob(const char *zGlobPattern, const char *zString){
                                                                     ^
Data/SQLite/src/sqlite3.c:9463:63: note: Function 'sqlite3_strglob' argument 2 names different: declaration 'zStr' definition 'zString'.
SQLITE_API int sqlite3_strglob(const char *zGlob, const char *zStr);
                                                              ^
Data/SQLite/src/sqlite3.c:123215:70: note: Function 'sqlite3_strglob' argument 2 names different: declaration 'zStr' definition 'zString'.
SQLITE_API int sqlite3_strglob(const char *zGlobPattern, const char *zString){
                                                                     ^
Data/SQLite/src/sqlite3.c:123223:44: style:inconclusive: Function 'sqlite3_strlike' argument 1 names different: declaration 'zGlob' definition 'zPattern'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_strlike(const char *zPattern, const char *zStr, unsigned int esc){
                                           ^
Data/SQLite/src/sqlite3.c:9486:44: note: Function 'sqlite3_strlike' argument 1 names different: declaration 'zGlob' definition 'zPattern'.
SQLITE_API int sqlite3_strlike(const char *zGlob, const char *zStr, unsigned int cEsc);
                                           ^
Data/SQLite/src/sqlite3.c:123223:44: note: Function 'sqlite3_strlike' argument 1 names different: declaration 'zGlob' definition 'zPattern'.
SQLITE_API int sqlite3_strlike(const char *zPattern, const char *zStr, unsigned int esc){
                                           ^
Data/SQLite/src/sqlite3.c:123223:85: style:inconclusive: Function 'sqlite3_strlike' argument 3 names different: declaration 'cEsc' definition 'esc'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_strlike(const char *zPattern, const char *zStr, unsigned int esc){
                                                                                    ^
Data/SQLite/src/sqlite3.c:9486:82: note: Function 'sqlite3_strlike' argument 3 names different: declaration 'cEsc' definition 'esc'.
SQLITE_API int sqlite3_strlike(const char *zGlob, const char *zStr, unsigned int cEsc);
                                                                                 ^
Data/SQLite/src/sqlite3.c:123223:85: note: Function 'sqlite3_strlike' argument 3 names different: declaration 'cEsc' definition 'esc'.
SQLITE_API int sqlite3_strlike(const char *zPattern, const char *zStr, unsigned int esc){
                                                                                    ^
Data/SQLite/src/sqlite3.c:129427:15: style:inconclusive: Function 'sqlite3_exec' argument 2 names different: declaration 'sql' definition 'zSql'. [funcArgNamesDifferent]
  const char *zSql,           /* The SQL to be executed */
              ^
Data/SQLite/src/sqlite3.c:733:15: note: Function 'sqlite3_exec' argument 2 names different: declaration 'sql' definition 'zSql'.
  const char *sql,                           /* SQL to be evaluated */
              ^
Data/SQLite/src/sqlite3.c:129427:15: note: Function 'sqlite3_exec' argument 2 names different: declaration 'sql' definition 'zSql'.
  const char *zSql,           /* The SQL to be executed */
              ^
Data/SQLite/src/sqlite3.c:129430:10: style:inconclusive: Function 'sqlite3_exec' argument 5 names different: declaration 'errmsg' definition 'pzErrMsg'. [funcArgNamesDifferent]
  char **pzErrMsg             /* Write error messages here */
         ^
Data/SQLite/src/sqlite3.c:736:10: note: Function 'sqlite3_exec' argument 5 names different: declaration 'errmsg' definition 'pzErrMsg'.
  char **errmsg                              /* Error msg written here */
         ^
Data/SQLite/src/sqlite3.c:129430:10: note: Function 'sqlite3_exec' argument 5 names different: declaration 'errmsg' definition 'pzErrMsg'.
  char **pzErrMsg             /* Write error messages here */
         ^
Data/SQLite/src/sqlite3.c:135440:7: style:inconclusive: Function 'sqlite3_prepare' argument 3 names different: declaration 'nByte' definition 'nBytes'. [funcArgNamesDifferent]
  int nBytes,               /* Length of zSql in bytes. */
      ^
Data/SQLite/src/sqlite3.c:4462:7: note: Function 'sqlite3_prepare' argument 3 names different: declaration 'nByte' definition 'nBytes'.
  int nByte,              /* Maximum length of zSql in bytes. */
      ^
Data/SQLite/src/sqlite3.c:135440:7: note: Function 'sqlite3_prepare' argument 3 names different: declaration 'nByte' definition 'nBytes'.
  int nBytes,               /* Length of zSql in bytes. */
      ^
Data/SQLite/src/sqlite3.c:135452:7: style:inconclusive: Function 'sqlite3_prepare_v2' argument 3 names different: declaration 'nByte' definition 'nBytes'. [funcArgNamesDifferent]
  int nBytes,               /* Length of zSql in bytes. */
      ^
Data/SQLite/src/sqlite3.c:4469:7: note: Function 'sqlite3_prepare_v2' argument 3 names different: declaration 'nByte' definition 'nBytes'.
  int nByte,              /* Maximum length of zSql in bytes. */
      ^
Data/SQLite/src/sqlite3.c:135452:7: note: Function 'sqlite3_prepare_v2' argument 3 names different: declaration 'nByte' definition 'nBytes'.
  int nBytes,               /* Length of zSql in bytes. */
      ^
Data/SQLite/src/sqlite3.c:135470:7: style:inconclusive: Function 'sqlite3_prepare_v3' argument 3 names different: declaration 'nByte' definition 'nBytes'. [funcArgNamesDifferent]
  int nBytes,               /* Length of zSql in bytes. */
      ^
Data/SQLite/src/sqlite3.c:4476:7: note: Function 'sqlite3_prepare_v3' argument 3 names different: declaration 'nByte' definition 'nBytes'.
  int nByte,              /* Maximum length of zSql in bytes. */
      ^
Data/SQLite/src/sqlite3.c:135470:7: note: Function 'sqlite3_prepare_v3' argument 3 names different: declaration 'nByte' definition 'nBytes'.
  int nBytes,               /* Length of zSql in bytes. */
      ^
Data/SQLite/src/sqlite3.c:135556:7: style:inconclusive: Function 'sqlite3_prepare16' argument 3 names different: declaration 'nByte' definition 'nBytes'. [funcArgNamesDifferent]
  int nBytes,               /* Length of zSql in bytes. */
      ^
Data/SQLite/src/sqlite3.c:4484:7: note: Function 'sqlite3_prepare16' argument 3 names different: declaration 'nByte' definition 'nBytes'.
  int nByte,              /* Maximum length of zSql in bytes. */
      ^
Data/SQLite/src/sqlite3.c:135556:7: note: Function 'sqlite3_prepare16' argument 3 names different: declaration 'nByte' definition 'nBytes'.
  int nBytes,               /* Length of zSql in bytes. */
      ^
Data/SQLite/src/sqlite3.c:135568:7: style:inconclusive: Function 'sqlite3_prepare16_v2' argument 3 names different: declaration 'nByte' definition 'nBytes'. [funcArgNamesDifferent]
  int nBytes,               /* Length of zSql in bytes. */
      ^
Data/SQLite/src/sqlite3.c:4491:7: note: Function 'sqlite3_prepare16_v2' argument 3 names different: declaration 'nByte' definition 'nBytes'.
  int nByte,              /* Maximum length of zSql in bytes. */
      ^
Data/SQLite/src/sqlite3.c:135568:7: note: Function 'sqlite3_prepare16_v2' argument 3 names different: declaration 'nByte' definition 'nBytes'.
  int nBytes,               /* Length of zSql in bytes. */
      ^
Data/SQLite/src/sqlite3.c:135580:7: style:inconclusive: Function 'sqlite3_prepare16_v3' argument 3 names different: declaration 'nByte' definition 'nBytes'. [funcArgNamesDifferent]
  int nBytes,               /* Length of zSql in bytes. */
      ^
Data/SQLite/src/sqlite3.c:4498:7: note: Function 'sqlite3_prepare16_v3' argument 3 names different: declaration 'nByte' definition 'nBytes'.
  int nByte,              /* Maximum length of zSql in bytes. */
      ^
Data/SQLite/src/sqlite3.c:135580:7: note: Function 'sqlite3_prepare16_v3' argument 3 names different: declaration 'nByte' definition 'nBytes'.
  int nBytes,               /* Length of zSql in bytes. */
      ^
Data/SQLite/src/sqlite3.c:143618:10: style:inconclusive: Function 'sqlite3_get_table' argument 6 names different: declaration 'pzErrmsg' definition 'pzErrMsg'. [funcArgNamesDifferent]
  char **pzErrMsg             /* Write error messages here */
         ^
Data/SQLite/src/sqlite3.c:3147:10: note: Function 'sqlite3_get_table' argument 6 names different: declaration 'pzErrmsg' definition 'pzErrMsg'.
  char **pzErrmsg       /* Error msg written here */
         ^
Data/SQLite/src/sqlite3.c:143618:10: note: Function 'sqlite3_get_table' argument 6 names different: declaration 'pzErrmsg' definition 'pzErrMsg'.
  char **pzErrMsg             /* Write error messages here */
         ^
Data/SQLite/src/sqlite3.c:143682:10: style:inconclusive: Function 'sqlite3_free_table' argument 1 names different: declaration 'result' definition 'azResult'. [funcArgNamesDifferent]
  char **azResult            /* Result returned from sqlite3_get_table() */
         ^
Data/SQLite/src/sqlite3.c:3149:43: note: Function 'sqlite3_free_table' argument 1 names different: declaration 'result' definition 'azResult'.
SQLITE_API void sqlite3_free_table(char **result);
                                          ^
Data/SQLite/src/sqlite3.c:143682:10: note: Function 'sqlite3_free_table' argument 1 names different: declaration 'result' definition 'azResult'.
  char **azResult            /* Result returned from sqlite3_get_table() */
         ^
Data/SQLite/src/sqlite3.c:146361:9: style:inconclusive: Function 'updateVirtualTable' argument 5 names different: declaration 'pRowidExpr' definition 'pRowid'. [funcArgNamesDifferent]
  Expr *pRowid,        /* Expression used to recompute the rowid */
        ^
Data/SQLite/src/sqlite3.c:145199:9: note: Function 'updateVirtualTable' argument 5 names different: declaration 'pRowidExpr' definition 'pRowid'.
  Expr *pRowidExpr,    /* Expression used to recompute the rowid */
        ^
Data/SQLite/src/sqlite3.c:146361:9: note: Function 'updateVirtualTable' argument 5 names different: declaration 'pRowidExpr' definition 'pRowid'.
  Expr *pRowid,        /* Expression used to recompute the rowid */
        ^
Data/SQLite/src/sqlite3.c:147362:25: style:inconclusive: Function 'sqlite3_create_module' argument 3 names different: declaration 'p' definition 'pModule'. [funcArgNamesDifferent]
  const sqlite3_module *pModule,  /* The definition of the module */
                        ^
Data/SQLite/src/sqlite3.c:7559:25: note: Function 'sqlite3_create_module' argument 3 names different: declaration 'p' definition 'pModule'.
  const sqlite3_module *p,   /* Methods for the module */
                        ^
Data/SQLite/src/sqlite3.c:147362:25: note: Function 'sqlite3_create_module' argument 3 names different: declaration 'p' definition 'pModule'.
  const sqlite3_module *pModule,  /* The definition of the module */
                        ^
Data/SQLite/src/sqlite3.c:147363:9: style:inconclusive: Function 'sqlite3_create_module' argument 4 names different: declaration 'pClientData' definition 'pAux'. [funcArgNamesDifferent]
  void *pAux                      /* Context pointer for xCreate/xConnect */
        ^
Data/SQLite/src/sqlite3.c:7560:9: note: Function 'sqlite3_create_module' argument 4 names different: declaration 'pClientData' definition 'pAux'.
  void *pClientData          /* Client data for xCreate/xConnect */
        ^
Data/SQLite/src/sqlite3.c:147363:9: note: Function 'sqlite3_create_module' argument 4 names different: declaration 'pClientData' definition 'pAux'.
  void *pAux                      /* Context pointer for xCreate/xConnect */
        ^
Data/SQLite/src/sqlite3.c:147377:25: style:inconclusive: Function 'sqlite3_create_module_v2' argument 3 names different: declaration 'p' definition 'pModule'. [funcArgNamesDifferent]
  const sqlite3_module *pModule,  /* The definition of the module */
                        ^
Data/SQLite/src/sqlite3.c:7565:25: note: Function 'sqlite3_create_module_v2' argument 3 names different: declaration 'p' definition 'pModule'.
  const sqlite3_module *p,   /* Methods for the module */
                        ^
Data/SQLite/src/sqlite3.c:147377:25: note: Function 'sqlite3_create_module_v2' argument 3 names different: declaration 'p' definition 'pModule'.
  const sqlite3_module *pModule,  /* The definition of the module */
                        ^
Data/SQLite/src/sqlite3.c:147378:9: style:inconclusive: Function 'sqlite3_create_module_v2' argument 4 names different: declaration 'pClientData' definition 'pAux'. [funcArgNamesDifferent]
  void *pAux,                     /* Context pointer for xCreate/xConnect */
        ^
Data/SQLite/src/sqlite3.c:7566:9: note: Function 'sqlite3_create_module_v2' argument 4 names different: declaration 'pClientData' definition 'pAux'.
  void *pClientData,         /* Client data for xCreate/xConnect */
        ^
Data/SQLite/src/sqlite3.c:147378:9: note: Function 'sqlite3_create_module_v2' argument 4 names different: declaration 'pClientData' definition 'pAux'.
  void *pAux,                     /* Context pointer for xCreate/xConnect */
        ^
Data/SQLite/src/sqlite3.c:147391:63: style:inconclusive: Function 'sqlite3_drop_modules' argument 2 names different: declaration 'azKeep' definition 'azNames'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_drop_modules(sqlite3 *db, const char** azNames){
                                                              ^
Data/SQLite/src/sqlite3.c:7584:16: note: Function 'sqlite3_drop_modules' argument 2 names different: declaration 'azKeep' definition 'azNames'.
  const char **azKeep         /* Except, do not remove the ones named here */
               ^
Data/SQLite/src/sqlite3.c:147391:63: note: Function 'sqlite3_drop_modules' argument 2 names different: declaration 'azKeep' definition 'azNames'.
SQLITE_API int sqlite3_drop_modules(sqlite3 *db, const char** azNames){
                                                              ^
Data/SQLite/src/sqlite3.c:148057:62: style:inconclusive: Function 'sqlite3_declare_vtab' argument 2 names different: declaration 'zSQL' definition 'zCreateTable'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_declare_vtab(sqlite3 *db, const char *zCreateTable){
                                                             ^
Data/SQLite/src/sqlite3.c:7642:59: note: Function 'sqlite3_declare_vtab' argument 2 names different: declaration 'zSQL' definition 'zCreateTable'.
SQLITE_API int sqlite3_declare_vtab(sqlite3*, const char *zSQL);
                                                          ^
Data/SQLite/src/sqlite3.c:148057:62: note: Function 'sqlite3_declare_vtab' argument 2 names different: declaration 'zSQL' definition 'zCreateTable'.
SQLITE_API int sqlite3_declare_vtab(sqlite3 *db, const char *zCreateTable){
                                                             ^
Data/SQLite/src/sqlite3.c:170413:45: style:inconclusive: Function 'sqlite3_complete' argument 1 names different: declaration 'sql' definition 'zSql'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_complete(const char *zSql){
                                            ^
Data/SQLite/src/sqlite3.c:2981:45: note: Function 'sqlite3_complete' argument 1 names different: declaration 'sql' definition 'zSql'.
SQLITE_API int sqlite3_complete(const char *sql);
                                            ^
Data/SQLite/src/sqlite3.c:170413:45: note: Function 'sqlite3_complete' argument 1 names different: declaration 'sql' definition 'zSql'.
SQLITE_API int sqlite3_complete(const char *zSql){
                                            ^
Data/SQLite/src/sqlite3.c:170578:47: style:inconclusive: Function 'sqlite3_complete16' argument 1 names different: declaration 'sql' definition 'zSql'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_complete16(const void *zSql){
                                              ^
Data/SQLite/src/sqlite3.c:2982:47: note: Function 'sqlite3_complete16' argument 1 names different: declaration 'sql' definition 'zSql'.
SQLITE_API int sqlite3_complete16(const void *sql);
                                              ^
Data/SQLite/src/sqlite3.c:170578:47: note: Function 'sqlite3_complete16' argument 1 names different: declaration 'sql' definition 'zSql'.
SQLITE_API int sqlite3_complete16(const void *zSql){
                                              ^
Data/SQLite/src/sqlite3.c:172693:15: style:inconclusive: Function 'sqlite3_create_function' argument 2 names different: declaration 'zFunctionName' definition 'zFunc'. [funcArgNamesDifferent]
  const char *zFunc,
              ^
Data/SQLite/src/sqlite3.c:5593:15: note: Function 'sqlite3_create_function' argument 2 names different: declaration 'zFunctionName' definition 'zFunc'.
  const char *zFunctionName,
              ^
Data/SQLite/src/sqlite3.c:172693:15: note: Function 'sqlite3_create_function' argument 2 names different: declaration 'zFunctionName' definition 'zFunc'.
  const char *zFunc,
              ^
Data/SQLite/src/sqlite3.c:172695:7: style:inconclusive: Function 'sqlite3_create_function' argument 4 names different: declaration 'eTextRep' definition 'enc'. [funcArgNamesDifferent]
  int enc,
      ^
Data/SQLite/src/sqlite3.c:5595:7: note: Function 'sqlite3_create_function' argument 4 names different: declaration 'eTextRep' definition 'enc'.
  int eTextRep,
      ^
Data/SQLite/src/sqlite3.c:172695:7: note: Function 'sqlite3_create_function' argument 4 names different: declaration 'eTextRep' definition 'enc'.
  int enc,
      ^
Data/SQLite/src/sqlite3.c:172696:9: style:inconclusive: Function 'sqlite3_create_function' argument 5 names different: declaration 'pApp' definition 'p'. [funcArgNamesDifferent]
  void *p,
        ^
Data/SQLite/src/sqlite3.c:5596:9: note: Function 'sqlite3_create_function' argument 5 names different: declaration 'pApp' definition 'p'.
  void *pApp,
        ^
Data/SQLite/src/sqlite3.c:172696:9: note: Function 'sqlite3_create_function' argument 5 names different: declaration 'pApp' definition 'p'.
  void *p,
        ^
Data/SQLite/src/sqlite3.c:172706:15: style:inconclusive: Function 'sqlite3_create_function_v2' argument 2 names different: declaration 'zFunctionName' definition 'zFunc'. [funcArgNamesDifferent]
  const char *zFunc,
              ^
Data/SQLite/src/sqlite3.c:5613:15: note: Function 'sqlite3_create_function_v2' argument 2 names different: declaration 'zFunctionName' definition 'zFunc'.
  const char *zFunctionName,
              ^
Data/SQLite/src/sqlite3.c:172706:15: note: Function 'sqlite3_create_function_v2' argument 2 names different: declaration 'zFunctionName' definition 'zFunc'.
  const char *zFunc,
              ^
Data/SQLite/src/sqlite3.c:172708:7: style:inconclusive: Function 'sqlite3_create_function_v2' argument 4 names different: declaration 'eTextRep' definition 'enc'. [funcArgNamesDifferent]
  int enc,
      ^
Data/SQLite/src/sqlite3.c:5615:7: note: Function 'sqlite3_create_function_v2' argument 4 names different: declaration 'eTextRep' definition 'enc'.
  int eTextRep,
      ^
Data/SQLite/src/sqlite3.c:172708:7: note: Function 'sqlite3_create_function_v2' argument 4 names different: declaration 'eTextRep' definition 'enc'.
  int enc,
      ^
Data/SQLite/src/sqlite3.c:172709:9: style:inconclusive: Function 'sqlite3_create_function_v2' argument 5 names different: declaration 'pApp' definition 'p'. [funcArgNamesDifferent]
  void *p,
        ^
Data/SQLite/src/sqlite3.c:5616:9: note: Function 'sqlite3_create_function_v2' argument 5 names different: declaration 'pApp' definition 'p'.
  void *pApp,
        ^
Data/SQLite/src/sqlite3.c:172709:9: note: Function 'sqlite3_create_function_v2' argument 5 names different: declaration 'pApp' definition 'p'.
  void *p,
        ^
Data/SQLite/src/sqlite3.c:172720:15: style:inconclusive: Function 'sqlite3_create_window_function' argument 2 names different: declaration 'zFunctionName' definition 'zFunc'. [funcArgNamesDifferent]
  const char *zFunc,
              ^
Data/SQLite/src/sqlite3.c:5624:15: note: Function 'sqlite3_create_window_function' argument 2 names different: declaration 'zFunctionName' definition 'zFunc'.
  const char *zFunctionName,
              ^
Data/SQLite/src/sqlite3.c:172720:15: note: Function 'sqlite3_create_window_function' argument 2 names different: declaration 'zFunctionName' definition 'zFunc'.
  const char *zFunc,
              ^
Data/SQLite/src/sqlite3.c:172722:7: style:inconclusive: Function 'sqlite3_create_window_function' argument 4 names different: declaration 'eTextRep' definition 'enc'. [funcArgNamesDifferent]
  int enc,
      ^
Data/SQLite/src/sqlite3.c:5626:7: note: Function 'sqlite3_create_window_function' argument 4 names different: declaration 'eTextRep' definition 'enc'.
  int eTextRep,
      ^
Data/SQLite/src/sqlite3.c:172722:7: note: Function 'sqlite3_create_window_function' argument 4 names different: declaration 'eTextRep' definition 'enc'.
  int enc,
      ^
Data/SQLite/src/sqlite3.c:172723:9: style:inconclusive: Function 'sqlite3_create_window_function' argument 5 names different: declaration 'pApp' definition 'p'. [funcArgNamesDifferent]
  void *p,
        ^
Data/SQLite/src/sqlite3.c:5627:9: note: Function 'sqlite3_create_window_function' argument 5 names different: declaration 'pApp' definition 'p'.
  void *pApp,
        ^
Data/SQLite/src/sqlite3.c:172723:9: note: Function 'sqlite3_create_window_function' argument 5 names different: declaration 'pApp' definition 'p'.
  void *p,
        ^
Data/SQLite/src/sqlite3.c:172740:9: style:inconclusive: Function 'sqlite3_create_function16' argument 5 names different: declaration 'pApp' definition 'p'. [funcArgNamesDifferent]
  void *p,
        ^
Data/SQLite/src/sqlite3.c:5606:9: note: Function 'sqlite3_create_function16' argument 5 names different: declaration 'pApp' definition 'p'.
  void *pApp,
        ^
Data/SQLite/src/sqlite3.c:172740:9: note: Function 'sqlite3_create_function16' argument 5 names different: declaration 'pApp' definition 'p'.
  void *p,
        ^
Data/SQLite/src/sqlite3.c:172799:15: style:inconclusive: Function 'sqlite3_overload_function' argument 2 names different: declaration 'zFuncName' definition 'zName'. [funcArgNamesDifferent]
  const char *zName,
              ^
Data/SQLite/src/sqlite3.c:7661:64: note: Function 'sqlite3_overload_function' argument 2 names different: declaration 'zFuncName' definition 'zName'.
SQLITE_API int sqlite3_overload_function(sqlite3*, const char *zFuncName, int nArg);
                                                               ^
Data/SQLite/src/sqlite3.c:172799:15: note: Function 'sqlite3_overload_function' argument 2 names different: declaration 'zFuncName' definition 'zName'.
  const char *zName,
              ^
Data/SQLite/src/sqlite3.c:172853:12: style:inconclusive: Function 'sqlite3_trace_v2' argument 2 names different: declaration 'uMask' definition 'mTrace'. [funcArgNamesDifferent]
  unsigned mTrace,                           /* Mask of events to be traced */
           ^
Data/SQLite/src/sqlite3.c:3617:12: note: Function 'sqlite3_trace_v2' argument 2 names different: declaration 'uMask' definition 'mTrace'.
  unsigned uMask,
           ^
Data/SQLite/src/sqlite3.c:172853:12: note: Function 'sqlite3_trace_v2' argument 2 names different: declaration 'uMask' definition 'mTrace'.
  unsigned mTrace,                           /* Mask of events to be traced */
           ^
Data/SQLite/src/sqlite3.c:172855:9: style:inconclusive: Function 'sqlite3_trace_v2' argument 4 names different: declaration 'pCtx' definition 'pArg'. [funcArgNamesDifferent]
  void *pArg                                 /* Context */
        ^
Data/SQLite/src/sqlite3.c:3619:9: note: Function 'sqlite3_trace_v2' argument 4 names different: declaration 'pCtx' definition 'pArg'.
  void *pCtx
        ^
Data/SQLite/src/sqlite3.c:172855:9: note: Function 'sqlite3_trace_v2' argument 4 names different: declaration 'pCtx' definition 'pArg'.
  void *pArg                                 /* Context */
        ^
Data/SQLite/src/sqlite3.c:173064:60: style:inconclusive: Function 'sqlite3_wal_autocheckpoint' argument 2 names different: declaration 'N' definition 'nFrame'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_wal_autocheckpoint(sqlite3 *db, int nFrame){
                                                           ^
Data/SQLite/src/sqlite3.c:9581:60: note: Function 'sqlite3_wal_autocheckpoint' argument 2 names different: declaration 'N' definition 'nFrame'.
SQLITE_API int sqlite3_wal_autocheckpoint(sqlite3 *db, int N);
                                                           ^
Data/SQLite/src/sqlite3.c:173064:60: note: Function 'sqlite3_wal_autocheckpoint' argument 2 names different: declaration 'N' definition 'nFrame'.
SQLITE_API int sqlite3_wal_autocheckpoint(sqlite3 *db, int nFrame){
                                                           ^
Data/SQLite/src/sqlite3.c:173528:47: style:inconclusive: Function 'sqlite3_limit' argument 2 names different: declaration 'id' definition 'limitId'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_limit(sqlite3 *db, int limitId, int newLimit){
                                              ^
Data/SQLite/src/sqlite3.c:4249:44: note: Function 'sqlite3_limit' argument 2 names different: declaration 'id' definition 'limitId'.
SQLITE_API int sqlite3_limit(sqlite3*, int id, int newVal);
                                           ^
Data/SQLite/src/sqlite3.c:173528:47: note: Function 'sqlite3_limit' argument 2 names different: declaration 'id' definition 'limitId'.
SQLITE_API int sqlite3_limit(sqlite3 *db, int limitId, int newLimit){
                                              ^
Data/SQLite/src/sqlite3.c:173528:60: style:inconclusive: Function 'sqlite3_limit' argument 3 names different: declaration 'newVal' definition 'newLimit'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_limit(sqlite3 *db, int limitId, int newLimit){
                                                           ^
Data/SQLite/src/sqlite3.c:4249:52: note: Function 'sqlite3_limit' argument 3 names different: declaration 'newVal' definition 'newLimit'.
SQLITE_API int sqlite3_limit(sqlite3*, int id, int newVal);
                                                   ^
Data/SQLite/src/sqlite3.c:173528:60: note: Function 'sqlite3_limit' argument 3 names different: declaration 'newVal' definition 'newLimit'.
SQLITE_API int sqlite3_limit(sqlite3 *db, int limitId, int newLimit){
                                                           ^
Data/SQLite/src/sqlite3.c:174191:15: style:inconclusive: Function 'sqlite3_open' argument 1 names different: declaration 'filename' definition 'zFilename'. [funcArgNamesDifferent]
  const char *zFilename,
              ^
Data/SQLite/src/sqlite3.c:3927:15: note: Function 'sqlite3_open' argument 1 names different: declaration 'filename' definition 'zFilename'.
  const char *filename,   /* Database filename (UTF-8) */
              ^
Data/SQLite/src/sqlite3.c:174191:15: note: Function 'sqlite3_open' argument 1 names different: declaration 'filename' definition 'zFilename'.
  const char *zFilename,
              ^
Data/SQLite/src/sqlite3.c:174211:15: style:inconclusive: Function 'sqlite3_open16' argument 1 names different: declaration 'filename' definition 'zFilename'. [funcArgNamesDifferent]
  const void *zFilename,
              ^
Data/SQLite/src/sqlite3.c:3931:15: note: Function 'sqlite3_open16' argument 1 names different: declaration 'filename' definition 'zFilename'.
  const void *filename,   /* Database filename (UTF-16) */
              ^
Data/SQLite/src/sqlite3.c:174211:15: note: Function 'sqlite3_open16' argument 1 names different: declaration 'filename' definition 'zFilename'.
  const void *zFilename,
              ^
Data/SQLite/src/sqlite3.c:174252:7: style:inconclusive: Function 'sqlite3_create_collation' argument 3 names different: declaration 'eTextRep' definition 'enc'. [funcArgNamesDifferent]
  int enc,
      ^
Data/SQLite/src/sqlite3.c:6331:7: note: Function 'sqlite3_create_collation' argument 3 names different: declaration 'eTextRep' definition 'enc'.
  int eTextRep,
      ^
Data/SQLite/src/sqlite3.c:174252:7: note: Function 'sqlite3_create_collation' argument 3 names different: declaration 'eTextRep' definition 'enc'.
  int enc,
      ^
Data/SQLite/src/sqlite3.c:174253:9: style:inconclusive: Function 'sqlite3_create_collation' argument 4 names different: declaration 'pArg' definition 'pCtx'. [funcArgNamesDifferent]
  void* pCtx,
        ^
Data/SQLite/src/sqlite3.c:6332:9: note: Function 'sqlite3_create_collation' argument 4 names different: declaration 'pArg' definition 'pCtx'.
  void *pArg,
        ^
Data/SQLite/src/sqlite3.c:174253:9: note: Function 'sqlite3_create_collation' argument 4 names different: declaration 'pArg' definition 'pCtx'.
  void* pCtx,
        ^
Data/SQLite/src/sqlite3.c:174265:7: style:inconclusive: Function 'sqlite3_create_collation_v2' argument 3 names different: declaration 'eTextRep' definition 'enc'. [funcArgNamesDifferent]
  int enc,
      ^
Data/SQLite/src/sqlite3.c:6338:7: note: Function 'sqlite3_create_collation_v2' argument 3 names different: declaration 'eTextRep' definition 'enc'.
  int eTextRep,
      ^
Data/SQLite/src/sqlite3.c:174265:7: note: Function 'sqlite3_create_collation_v2' argument 3 names different: declaration 'eTextRep' definition 'enc'.
  int enc,
      ^
Data/SQLite/src/sqlite3.c:174266:9: style:inconclusive: Function 'sqlite3_create_collation_v2' argument 4 names different: declaration 'pArg' definition 'pCtx'. [funcArgNamesDifferent]
  void* pCtx,
        ^
Data/SQLite/src/sqlite3.c:6339:9: note: Function 'sqlite3_create_collation_v2' argument 4 names different: declaration 'pArg' definition 'pCtx'.
  void *pArg,
        ^
Data/SQLite/src/sqlite3.c:174266:9: note: Function 'sqlite3_create_collation_v2' argument 4 names different: declaration 'pArg' definition 'pCtx'.
  void* pCtx,
        ^
Data/SQLite/src/sqlite3.c:174290:7: style:inconclusive: Function 'sqlite3_create_collation16' argument 3 names different: declaration 'eTextRep' definition 'enc'. [funcArgNamesDifferent]
  int enc,
      ^
Data/SQLite/src/sqlite3.c:6346:7: note: Function 'sqlite3_create_collation16' argument 3 names different: declaration 'eTextRep' definition 'enc'.
  int eTextRep,
      ^
Data/SQLite/src/sqlite3.c:174290:7: note: Function 'sqlite3_create_collation16' argument 3 names different: declaration 'eTextRep' definition 'enc'.
  int enc,
      ^
Data/SQLite/src/sqlite3.c:174291:9: style:inconclusive: Function 'sqlite3_create_collation16' argument 4 names different: declaration 'pArg' definition 'pCtx'. [funcArgNamesDifferent]
  void* pCtx,
        ^
Data/SQLite/src/sqlite3.c:6347:9: note: Function 'sqlite3_create_collation16' argument 4 names different: declaration 'pArg' definition 'pCtx'.
  void *pArg,
        ^
Data/SQLite/src/sqlite3.c:174291:9: note: Function 'sqlite3_create_collation16' argument 4 names different: declaration 'pArg' definition 'pCtx'.
  void* pCtx,
        ^
Data/SQLite/src/sqlite3.c:175264:48: style:inconclusive: Function 'sqlite3_uri_boolean' argument 1 names different: declaration 'zFile' definition 'zFilename'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_uri_boolean(const char *zFilename, const char *zParam, int bDflt){
                                               ^
Data/SQLite/src/sqlite3.c:4008:48: note: Function 'sqlite3_uri_boolean' argument 1 names different: declaration 'zFile' definition 'zFilename'.
SQLITE_API int sqlite3_uri_boolean(const char *zFile, const char *zParam, int bDefault);
                                               ^
Data/SQLite/src/sqlite3.c:175264:48: note: Function 'sqlite3_uri_boolean' argument 1 names different: declaration 'zFile' definition 'zFilename'.
SQLITE_API int sqlite3_uri_boolean(const char *zFilename, const char *zParam, int bDflt){
                                               ^
Data/SQLite/src/sqlite3.c:175264:83: style:inconclusive: Function 'sqlite3_uri_boolean' argument 3 names different: declaration 'bDefault' definition 'bDflt'. [funcArgNamesDifferent]
SQLITE_API int sqlite3_uri_boolean(const char *zFilename, const char *zParam, int bDflt){
                                                                                  ^
Data/SQLite/src/sqlite3.c:4008:79: note: Function 'sqlite3_uri_boolean' argument 3 names different: declaration 'bDefault' definition 'bDflt'.
SQLITE_API int sqlite3_uri_boolean(const char *zFile, const char *zParam, int bDefault);
                                                                              ^
Data/SQLite/src/sqlite3.c:175264:83: note: Function 'sqlite3_uri_boolean' argument 3 names different: declaration 'bDefault' definition 'bDflt'.
SQLITE_API int sqlite3_uri_boolean(const char *zFilename, const char *zParam, int bDflt){
                                                                                  ^
Data/SQLite/src/sqlite3.c:117371:10: warning: Size of pointer 'zExtra' used instead of size of its data. [pointerSize]
  memcpy(zExtra, pIdx->azColl, sizeof(char*)*pIdx->nColumn);
         ^
Data/SQLite/src/sqlite3.c:159535:16: warning: Expression 'nTabList-1' can have a negative value. That is converted to an unsigned value and used in an unsigned calculation. [signConversionCond]
  nByteWInfo = ROUND8P(sizeof(WhereInfo)+(nTabList-1)*sizeof(WhereLevel));
               ^
Data/SQLite/src/sqlite3.c:159582:15: note: Assuming that condition 'nTabList==0' is not redundant
  if( nTabList==0 ){
              ^
Data/SQLite/src/sqlite3.c:159535:16: note: Negative value is converted to an unsigned value
  nByteWInfo = ROUND8P(sizeof(WhereInfo)+(nTabList-1)*sizeof(WhereLevel));
               ^
Data/SQLite/src/sqlite3.c:10777:9: style: struct member 'sqlite3_rtree_geometry::pContext' is never used. [unusedStructMember]
  void *pContext;                 /* Copy of pContext passed to s_r_g_c() */
        ^
Data/SQLite/src/sqlite3.c:10779:22: style: struct member 'sqlite3_rtree_geometry::aParam' is never used. [unusedStructMember]
  sqlite3_rtree_dbl *aParam;      /* Parameters passed to SQL geom function */
                     ^
Data/SQLite/src/sqlite3.c:10781:10: style: struct member 'sqlite3_rtree_geometry::xDelUser' is never used. [unusedStructMember]
  void (*xDelUser)(void *);       /* Called by SQLite to clean up pUser */
         ^
Data/SQLite/src/sqlite3.c:10809:9: style: struct member 'sqlite3_rtree_query_info::pContext' is never used. [unusedStructMember]
  void *pContext;                   /* pContext from when function registered */
        ^
Data/SQLite/src/sqlite3.c:10811:22: style: struct member 'sqlite3_rtree_query_info::aParam' is never used. [unusedStructMember]
  sqlite3_rtree_dbl *aParam;        /* value of function parameters */
                     ^
Data/SQLite/src/sqlite3.c:10813:10: style: struct member 'sqlite3_rtree_query_info::xDelUser' is never used. [unusedStructMember]
  void (*xDelUser)(void*);          /* function to free pUser */
         ^
Data/SQLite/src/sqlite3.c:10814:22: style: struct member 'sqlite3_rtree_query_info::aCoord' is never used. [unusedStructMember]
  sqlite3_rtree_dbl *aCoord;        /* Coordinates of node or entry to check */
                     ^
Data/SQLite/src/sqlite3.c:10815:17: style: struct member 'sqlite3_rtree_query_info::anQueue' is never used. [unusedStructMember]
  unsigned int *anQueue;            /* Number of pending entries in the queue */
                ^
Data/SQLite/src/sqlite3.c:10816:7: style: struct member 'sqlite3_rtree_query_info::nCoord' is never used. [unusedStructMember]
  int nCoord;                       /* Number of coordinates */
      ^
Data/SQLite/src/sqlite3.c:10817:7: style: struct member 'sqlite3_rtree_query_info::iLevel' is never used. [unusedStructMember]
  int iLevel;                       /* Level of current node or entry */
      ^
Data/SQLite/src/sqlite3.c:10818:7: style: struct member 'sqlite3_rtree_query_info::mxLevel' is never used. [unusedStructMember]
  int mxLevel;                      /* The largest iLevel value in the tree */
      ^
Data/SQLite/src/sqlite3.c:10820:21: style: struct member 'sqlite3_rtree_query_info::rParentScore' is never used. [unusedStructMember]
  sqlite3_rtree_dbl rParentScore;   /* Score of parent node */
                    ^
Data/SQLite/src/sqlite3.c:10821:7: style: struct member 'sqlite3_rtree_query_info::eParentWithin' is never used. [unusedStructMember]
  int eParentWithin;                /* Visibility of parent node */
      ^
Data/SQLite/src/sqlite3.c:10822:7: style: struct member 'sqlite3_rtree_query_info::eWithin' is never used. [unusedStructMember]
  int eWithin;                      /* OUT: Visibility */
      ^
Data/SQLite/src/sqlite3.c:10823:21: style: struct member 'sqlite3_rtree_query_info::rScore' is never used. [unusedStructMember]
  sqlite3_rtree_dbl rScore;         /* OUT: Write the score here */
                    ^
Data/SQLite/src/sqlite3.c:10825:19: style: struct member 'sqlite3_rtree_query_info::apSqlParam' is never used. [unusedStructMember]
  sqlite3_value **apSqlParam;       /* Original SQL values of parameters */
                  ^
Data/SQLite/src/sqlite3.c:12833:11: style: struct member 'Fts5ExtensionApi::xUserData' is never used. [unusedStructMember]
  void *(*xUserData)(Fts5Context*);
          ^
Data/SQLite/src/sqlite3.c:12835:9: style: struct member 'Fts5ExtensionApi::xColumnCount' is never used. [unusedStructMember]
  int (*xColumnCount)(Fts5Context*);
        ^
Data/SQLite/src/sqlite3.c:12836:9: style: struct member 'Fts5ExtensionApi::xRowCount' is never used. [unusedStructMember]
  int (*xRowCount)(Fts5Context*, sqlite3_int64 *pnRow);
        ^
Data/SQLite/src/sqlite3.c:12837:9: style: struct member 'Fts5ExtensionApi::xColumnTotalSize' is never used. [unusedStructMember]
  int (*xColumnTotalSize)(Fts5Context*, int iCol, sqlite3_int64 *pnToken);
        ^
Data/SQLite/src/sqlite3.c:12839:9: style: struct member 'Fts5ExtensionApi::xTokenize' is never used. [unusedStructMember]
  int (*xTokenize)(Fts5Context*,
        ^
Data/SQLite/src/sqlite3.c:12845:9: style: struct member 'Fts5ExtensionApi::xPhraseCount' is never used. [unusedStructMember]
  int (*xPhraseCount)(Fts5Context*);
        ^
Data/SQLite/src/sqlite3.c:12846:9: style: struct member 'Fts5ExtensionApi::xPhraseSize' is never used. [unusedStructMember]
  int (*xPhraseSize)(Fts5Context*, int iPhrase);
        ^
Data/SQLite/src/sqlite3.c:12848:9: style: struct member 'Fts5ExtensionApi::xInstCount' is never used. [unusedStructMember]
  int (*xInstCount)(Fts5Context*, int *pnInst);
        ^
Data/SQLite/src/sqlite3.c:12849:9: style: struct member 'Fts5ExtensionApi::xInst' is never used. [unusedStructMember]
  int (*xInst)(Fts5Context*, int iIdx, int *piPhrase, int *piCol, int *piOff);
        ^
Data/SQLite/src/sqlite3.c:12852:9: style: struct member 'Fts5ExtensionApi::xColumnText' is never used. [unusedStructMember]
  int (*xColumnText)(Fts5Context*, int iCol, const char **pz, int *pn);
        ^
Data/SQLite/src/sqlite3.c:12853:9: style: struct member 'Fts5ExtensionApi::xColumnSize' is never used. [unusedStructMember]
  int (*xColumnSize)(Fts5Context*, int iCol, int *pnToken);
        ^
Data/SQLite/src/sqlite3.c:12855:9: style: struct member 'Fts5ExtensionApi::xQueryPhrase' is never used. [unusedStructMember]
  int (*xQueryPhrase)(Fts5Context*, int iPhrase, void *pUserData,
        ^
Data/SQLite/src/sqlite3.c:12858:9: style: struct member 'Fts5ExtensionApi::xSetAuxdata' is never used. [unusedStructMember]
  int (*xSetAuxdata)(Fts5Context*, void *pAux, void(*xDelete)(void*));
        ^
Data/SQLite/src/sqlite3.c:12859:11: style: struct member 'Fts5ExtensionApi::xGetAuxdata' is never used. [unusedStructMember]
  void *(*xGetAuxdata)(Fts5Context*, int bClear);
          ^
Data/SQLite/src/sqlite3.c:12861:9: style: struct member 'Fts5ExtensionApi::xPhraseFirst' is never used. [unusedStructMember]
  int (*xPhraseFirst)(Fts5Context*, int iPhrase, Fts5PhraseIter*, int*, int*);
        ^
Data/SQLite/src/sqlite3.c:12862:10: style: struct member 'Fts5ExtensionApi::xPhraseNext' is never used. [unusedStructMember]
  void (*xPhraseNext)(Fts5Context*, Fts5PhraseIter*, int *piCol, int *piOff);
         ^
Data/SQLite/src/sqlite3.c:12864:9: style: struct member 'Fts5ExtensionApi::xPhraseFirstColumn' is never used. [unusedStructMember]
  int (*xPhraseFirstColumn)(Fts5Context*, int iPhrase, Fts5PhraseIter*, int*);
        ^
Data/SQLite/src/sqlite3.c:12865:10: style: struct member 'Fts5ExtensionApi::xPhraseNextColumn' is never used. [unusedStructMember]
  void (*xPhraseNextColumn)(Fts5Context*, Fts5PhraseIter*, int *piCol);
         ^
Data/SQLite/src/sqlite3.c:13069:9: style: struct member 'fts5_tokenizer::xTokenize' is never used. [unusedStructMember]
  int (*xTokenize)(Fts5Tokenizer*,
        ^
Data/SQLite/src/sqlite3.c:13106:9: style: struct member 'fts5_api::xCreateTokenizer' is never used. [unusedStructMember]
  int (*xCreateTokenizer)(
        ^
Data/SQLite/src/sqlite3.c:13115:9: style: struct member 'fts5_api::xFindTokenizer' is never used. [unusedStructMember]
  int (*xFindTokenizer)(
        ^
Data/SQLite/src/sqlite3.c:13123:9: style: struct member 'fts5_api::xCreateFunction' is never used. [unusedStructMember]
  int (*xCreateFunction)(
        ^
Data/SQLite/src/sqlite3.c:16929:12: style: union member 'Anonymous1::notUsed1' is never used. [unusedStructMember]
    double notUsed1;            /* Spacer */
           ^
Data/SQLite/src/sqlite3.c:17963:12: style: struct member 'IndexSample::anLt' is never used. [unusedStructMember]
  tRowcnt *anLt;    /* Est. number of rows where key is less than this sample */
           ^
Data/SQLite/src/sqlite3.c:18320:16: style: struct member 'Anonymous13::bSorterRef' is never used. [unusedStructMember]
      unsigned bSorterRef :1; /* Defer evaluation until after sorting */
               ^
Data/SQLite/src/sqlite3.c:19268:7: style: struct member 'Sqlite3Config::mxStrlen' is never used. [unusedStructMember]
  int mxStrlen;                     /* Maximum string length */
      ^
Data/SQLite/src/sqlite3.c:19276:9: style: struct member 'Sqlite3Config::pHeap' is never used. [unusedStructMember]
  void *pHeap;                      /* Heap storage space */
        ^
Data/SQLite/src/sqlite3.c:19277:7: style: struct member 'Sqlite3Config::nHeap' is never used. [unusedStructMember]
  int nHeap;                        /* Size of pHeap[] */
      ^
Data/SQLite/src/sqlite3.c:19278:7: style: struct member 'Sqlite3Config::mnReq' is never used. [unusedStructMember]
  int mnReq, mxReq;                 /* Min and max heap requests sizes */
      ^
Data/SQLite/src/sqlite3.c:19278:14: style: struct member 'Sqlite3Config::mxReq' is never used. [unusedStructMember]
  int mnReq, mxReq;                 /* Min and max heap requests sizes */
             ^
Data/SQLite/src/sqlite3.c:19284:7: style: struct member 'Sqlite3Config::mxParserStack' is never used. [unusedStructMember]
  int mxParserStack;                /* maximum depth of the parser stack */
      ^
Data/SQLite/src/sqlite3.c:19318:7: style: struct member 'Sqlite3Config::szSorterRef' is never used. [unusedStructMember]
  u32 szSorterRef;                  /* Min size in bytes to use sorter-refs */
      ^
Data/SQLite/src/sqlite3.c:19359:22: style: union member 'Anonymous23::pCCurHint' is never used. [unusedStructMember]
    struct CCurHint *pCCurHint;               /* Used by codeCursorHint() */
                     ^
Data/SQLite/src/sqlite3.c:22573:7: style: struct member 'ScanStatus::addrLoop' is never used. [unusedStructMember]
  int addrLoop;                   /* Address of "loops" counter */
      ^
Data/SQLite/src/sqlite3.c:22574:7: style: struct member 'ScanStatus::addrVisit' is never used. [unusedStructMember]
  int addrVisit;                  /* Address of "rows visited" counter */
      ^
Data/SQLite/src/sqlite3.c:22575:7: style: struct member 'ScanStatus::iSelectID' is never used. [unusedStructMember]
  int iSelectID;                  /* The "Select-ID" for this loop */
      ^
Data/SQLite/src/sqlite3.c:22589:16: style: struct member 'DblquoteStr::pNextStr' is never used. [unusedStructMember]
  DblquoteStr *pNextStr;   /* Next string literal in the list */
               ^
Data/SQLite/src/sqlite3.c:22687:7: style: struct member 'PreUpdate::aRecord' is never used. [unusedStructMember]
  u8 *aRecord;                    /* old.* database record */
      ^
Data/SQLite/src/sqlite3.c:22690:19: style: struct member 'PreUpdate::pNewUnpacked' is never used. [unusedStructMember]
  UnpackedRecord *pNewUnpacked;   /* Unpacked version of new.* record */
                  ^
Data/SQLite/src/sqlite3.c:22691:7: style: struct member 'PreUpdate::iNewReg' is never used. [unusedStructMember]
  int iNewReg;                    /* Register for new.* values */
      ^
Data/SQLite/src/sqlite3.c:22692:7: style: struct member 'PreUpdate::iBlobWrite' is never used. [unusedStructMember]
  int iBlobWrite;                 /* Value returned by preupdate_blobwrite() */
      ^
Data/SQLite/src/sqlite3.c:22693:7: style: struct member 'PreUpdate::iKey1' is never used. [unusedStructMember]
  i64 iKey1;                      /* First key value passed to hook */
      ^
Data/SQLite/src/sqlite3.c:22694:7: style: struct member 'PreUpdate::iKey2' is never used. [unusedStructMember]
  i64 iKey2;                      /* Second key value passed to hook */
      ^
Data/SQLite/src/sqlite3.c:22695:8: style: struct member 'PreUpdate::aNew' is never used. [unusedStructMember]
  Mem *aNew;                      /* Array of new.* values */
       ^
Data/SQLite/src/sqlite3.c:22697:10: style: struct member 'PreUpdate::pPk' is never used. [unusedStructMember]
  Index *pPk;                     /* PK index if pTab is WITHOUT ROWID */
         ^
Data/SQLite/src/sqlite3.c:36384:9: style: struct member 'vxworksFileId::zCanonicalName' is never used. [unusedStructMember]
  char *zCanonicalName;         /* Canonical filename */
        ^
Data/SQLite/src/sqlite3.c:39378:18: style: Variable 'nWrite' is assigned a value that is never used. [unreadVariable]
      int nWrite = 0;             /* Number of bytes written by seekAndWrite */
                 ^
Data/SQLite/src/sqlite3.c:59410:10: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
  int rc = SQLITE_OK;
         ^
Data/SQLite/src/sqlite3.c:67701:13: style: Variable 'pIdxKey' is assigned a value that is never used. [unreadVariable]
    pIdxKey = 0;
            ^
Data/SQLite/src/sqlite3.c:72324:10: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
  int rc = SQLITE_OK;
         ^
Data/SQLite/src/sqlite3.c:78295:15: style: Variable 'pgszSrc' is assigned a value that is never used. [unreadVariable]
  int pgszSrc = 0;    /* Source page size */
              ^
Data/SQLite/src/sqlite3.c:78296:16: style: Variable 'pgszDest' is assigned a value that is never used. [unreadVariable]
  int pgszDest = 0;   /* Destination page size */
               ^
Data/SQLite/src/sqlite3.c:83668:12: style: Variable 'zSuper' is assigned a value that is never used. [unreadVariable]
    zSuper = 0;
           ^
Data/SQLite/src/sqlite3.c:99742:10: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
  int rc = SQLITE_OK;             /* Return code */
         ^
Data/SQLite/src/sqlite3.c:101606:10: style: Variable 'pDup' is assigned a value that is never used. [unreadVariable]
    pDup = 0;
         ^
Data/SQLite/src/sqlite3.c:136365:9: style: Variable 'pOp' is assigned a value that is never used. [unreadVariable]
    pOp = 0; /* Ensure pOp not used after sqltie3VdbeAddOp3() */
        ^
Data/SQLite/src/sqlite3.c:137999:11: style: Variable 'v' is assigned a value that is never used. [unreadVariable]
  Vdbe *v = 0;
          ^
Data/SQLite/src/sqlite3.c:138000:14: style: Variable 'iLimit' is assigned a value that is never used. [unreadVariable]
  int iLimit = 0;
             ^
Data/SQLite/src/sqlite3.c:144856:15: style: Variable 'pWhen' is assigned a value that is never used. [unreadVariable]
  Expr *pWhen = 0;            /* Duplicate of trigger WHEN expression */
              ^
Data/SQLite/src/sqlite3.c:170023:9: style: Variable 'n' is assigned a value that is never used. [unreadVariable]
  int n = 0;                      /* Length of the next token token */
        ^
Data/SQLite/src/sqlite3.c:197952:21: style: Variable 'zRoot' is assigned a value that is never used. [unreadVariable]
  const char *zRoot = 0;
                    ^
Data/SQLite/src/sqlite3.c:38867:0: information: Skipping configuration 'EDEVERR' since the value of 'EDEVERR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      case EDEVERR:
^
Data/SQLite/src/sqlite3.c:36160:0: information: Skipping configuration 'EINTR' since the value of 'EINTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      if( errno==EINTR ) continue;
^
Data/SQLite/src/sqlite3.c:36324:0: information: Skipping configuration 'EINTR' since the value of 'EINTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  do{ rc = osFtruncate(h,sz); }while( rc<0 && errno==EINTR );
^
Data/SQLite/src/sqlite3.c:36348:0: information: Skipping configuration 'EINTR' since the value of 'EINTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  case EINTR:
^
Data/SQLite/src/sqlite3.c:38789:0: information: Skipping configuration 'EINTR' since the value of 'EINTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      if( errno==EINTR ){ got = 1; continue; }
^
Data/SQLite/src/sqlite3.c:38915:0: information: Skipping configuration 'EINTR' since the value of 'EINTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  }while( rc<0 && errno==EINTR );
^
Data/SQLite/src/sqlite3.c:42136:0: information: Skipping configuration 'EINTR' since the value of 'EINTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      do{ got = osRead(fd, zBuf, nBuf); }while( got<0 && errno==EINTR );
^
Data/SQLite/src/sqlite3.c:38864:0: information: Skipping configuration 'ENXIO' since the value of 'ENXIO' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      case ENXIO:
^
Data/SQLite/src/sqlite3.c:36856:0: information: Skipping configuration 'EOVERFLOW;SQLITE_DISABLE_LFS' since the value of 'EOVERFLOW' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if( pFile->lastErrno==EOVERFLOW ) return SQLITE_NOLFS;
^
Data/SQLite/src/sqlite3.c:36155:0: information: Skipping configuration 'FD_CLOEXEC;O_CLOEXEC' since the value of 'O_CLOEXEC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    fd = osOpen(z,f|O_CLOEXEC,m2);
^
Data/SQLite/src/sqlite3.c:39116:0: information: Skipping configuration 'F_FULLFSYNC' since the value of 'F_FULLFSYNC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    rc = osFcntl(fd, F_FULLFSYNC, 0);
^
Data/SQLite/src/sqlite3.c:121473:12: error: Null pointer dereference: (VTable*)0 [nullPointer]
    return sqlite3GetVTable(pParse->db, pTab)->pMod->pModule->xUpdate==0;
           ^
Data/SQLite/src/sqlite3.c:10819:17: style: struct member 'sqlite3_rtree_query_info::iRowid' is never used. [unusedStructMember]
  sqlite3_int64 iRowid;             /* Rowid for current entry */
                ^
Data/SQLite/src/sqlite3.c:12851:19: style: struct member 'Fts5ExtensionApi::xRowid' is never used. [unusedStructMember]
  sqlite3_int64 (*xRowid)(Fts5Context*);
                  ^
Data/SQLite/src/sqlite3.c:15443:13: style: union member 'p4union::pVtab' is never used. [unusedStructMember]
    VTable *pVtab;         /* Used when p4type is P4_VTAB */
            ^
Data/SQLite/src/sqlite3.c:17596:11: style: struct member 'Anonymous4::addColOffset' is never used. [unusedStructMember]
      int addColOffset;    /* Offset in CREATE TABLE stmt to add a new column */
          ^
Data/SQLite/src/sqlite3.c:17606:14: style: struct member 'Anonymous6::azArg' is never used. [unusedStructMember]
      char **azArg;        /* 0: module 1: schema 2: vtab name 3...: args */
             ^
Data/SQLite/src/sqlite3.c:19368:23: style: union member 'Anonymous23::pRename' is never used. [unusedStructMember]
    struct RenameCtx *pRename;                /* RENAME COLUMN context */
                      ^
Data/SQLite/src/sqlite3.c:22293:26: style: union member 'Anonymous25::pVCur' is never used. [unusedStructMember]
    sqlite3_vtab_cursor *pVCur; /* CURTYPE_VTAB.              Vtab cursor */
                         ^
Data/SQLite/src/sqlite3.c:148768:11: style: struct member 'Anonymous38::idxNum' is never used. [unusedStructMember]
      int idxNum;            /* Index number */
          ^
Data/SQLite/src/sqlite3.c:148770:11: style: struct member 'Anonymous38::bOmitOffset' is never used. [unusedStructMember]
      u32 bOmitOffset : 1;   /* True to let virtual table handle offset */
          ^
Data/SQLite/src/sqlite3.c:148772:11: style: struct member 'Anonymous38::omitMask' is never used. [unusedStructMember]
      u16 omitMask;          /* Terms that may be omitted */
          ^
Data/SQLite/src/sqlite3.c:148774:11: style: struct member 'Anonymous38::mHandleIn' is never used. [unusedStructMember]
      u32 mHandleIn;         /* Terms to handle as IN(...) instead of == */
          ^
Data/SQLite/src/sqlite3.c:154064:7: style: struct member 'HiddenIndexInfo::mIn' is never used. [unusedStructMember]
  u32 mIn;                 /* Mask of terms that are <col> IN (...) */
      ^
Data/SQLite/src/sqlite3.c:154065:7: style: struct member 'HiddenIndexInfo::mHandleIn' is never used. [unusedStructMember]
  u32 mHandleIn;           /* Terms that vtab will handle as <col> IN (...) */
      ^
Data/SQLite/src/sqlite3.c:94160:17: style: Unused variable: pVtab [unusedVariable]
  sqlite3_vtab *pVtab;
                ^
Data/SQLite/src/sqlite3.c:94161:25: style: Unused variable: pModule [unusedVariable]
  const sqlite3_module *pModule;
                        ^
Data/SQLite/src/sqlite3.c:101402:18: style: Variable 'pParse' is assigned a value that is never used. [unreadVariable]
     || ((pParse = pWalker->pParse)!=0 && IN_RENAME_OBJECT)
                 ^
Data/SQLite/src/sqlite3.c:153241:22: style: Variable 'eOp2' is assigned a value that is never used. [unreadVariable]
  unsigned char eOp2 = 0;          /* op2 value for LIKE/REGEXP/GLOB */
                     ^
Data/SQLite/src/sqlite3.c:39136:0: information: Skipping configuration 'HAVE_FDATASYNC=0;fdatasync' since the value of 'fdatasync' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  rc = fdatasync(fd);
^
Data/SQLite/testsuite/src/SQLiteTest.cpp:245:13: warning: Member variable 'SQLiteTest::_commitCounter' is not initialized in the constructor. [uninitMemberVar]
SQLiteTest::SQLiteTest(const std::string& name): CppUnit::TestCase(name)
            ^
Data/SQLite/testsuite/src/SQLiteTest.cpp:245:13: warning: Member variable 'SQLiteTest::_rollbackCounter' is not initialized in the constructor. [uninitMemberVar]
SQLiteTest::SQLiteTest(const std::string& name): CppUnit::TestCase(name)
            ^
Data/SQLite/testsuite/src/SQLiteTest.h:32:2: style: Class 'SQLiteTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 SQLiteTest(const std::string& name);
 ^
Data/SQLite/testsuite/src/SQLiteTest.cpp:2798:6: style: Variable 'val' is reassigned a value before the old one has been used. [redundantAssignment]
 val = 3;
     ^
Data/SQLite/testsuite/src/SQLiteTest.cpp:2787:6: note: val is assigned
 val = 2;
     ^
Data/SQLite/testsuite/src/SQLiteTest.cpp:2798:6: note: val is overwritten
 val = 3;
     ^
Data/SQLite/testsuite/src/SQLiteTest.cpp:2805:6: style: Variable 'val' is reassigned a value before the old one has been used. [redundantAssignment]
 val =4;
     ^
Data/SQLite/testsuite/src/SQLiteTest.cpp:2798:6: note: val is assigned
 val = 3;
     ^
Data/SQLite/testsuite/src/SQLiteTest.cpp:2805:6: note: val is overwritten
 val =4;
     ^
Data/SQLite/testsuite/src/SQLiteTest.cpp:2320:14: style: The scope of the variable 'rows' can be reduced. [variableScope]
 std::size_t rows = 0;
             ^
Data/SQLite/testsuite/src/SQLiteTest.cpp:489:23: style: Variable 'tableName' is assigned a value that is never used. [unreadVariable]
 std::string tableName("Person");
                      ^
Data/SQLite/testsuite/src/SQLiteTest.cpp:491:23: style: Variable 'firstName' is assigned a value that is never used. [unreadVariable]
 std::string firstName("firstname");
                      ^
Data/SQLite/testsuite/src/SQLiteTest.cpp:492:21: style: Variable 'address' is assigned a value that is never used. [unreadVariable]
 std::string address("Address");
                    ^
Data/SQLite/testsuite/src/SQLiteTest.cpp:557:23: style: Variable 'tableName' is assigned a value that is never used. [unreadVariable]
 std::string tableName("Person");
                      ^
Data/SQLite/testsuite/src/SQLiteTest.cpp:567:14: style: Unused variable: result [unusedVariable]
 std::string result;
             ^
Data/SQLite/testsuite/src/SQLiteTest.cpp:904:23: style: Variable 'tableName' is assigned a value that is never used. [unreadVariable]
 std::string tableName("Person");
                      ^
Data/SQLite/testsuite/src/SQLiteTest.cpp:914:14: style: Unused variable: result [unusedVariable]
 std::string result;
             ^
Data/SQLite/testsuite/src/SQLiteTest.cpp:986:23: style: Variable 'tableName' is assigned a value that is never used. [unreadVariable]
 std::string tableName("Person");
                      ^
Data/SQLite/testsuite/src/SQLiteTest.cpp:996:14: style: Unused variable: result [unusedVariable]
 std::string result;
             ^
Data/SQLite/testsuite/src/SQLiteTest.cpp:2320:19: style: Variable 'rows' is assigned a value that is never used. [unreadVariable]
 std::size_t rows = 0;
                  ^
Data/SQLite/testsuite/src/SQLiteTest.cpp:2868:23: style: Variable 'tableName' is assigned a value that is never used. [unreadVariable]
 std::string tableName("Person");
                      ^
Data/SQLite/testsuite/src/SQLiteTest.cpp:2873:14: style: Unused variable: result [unusedVariable]
 std::string result;
             ^
Data/SQLite/testsuite/src/SQLiteTest.cpp:2909:23: style: Variable 'tableName' is assigned a value that is never used. [unreadVariable]
 std::string tableName("Person");
                      ^
Data/SQLite/testsuite/src/SQLiteTest.cpp:2914:14: style: Unused variable: result [unusedVariable]
 std::string result;
             ^
Data/SQLite/testsuite/src/SQLiteTest.cpp:3116:20: style: Variable 'funct' is assigned a value that is never used. [unreadVariable]
 std::string funct = "transaction()";
                   ^
Data/SQLite/testsuite/src/SQLiteTest.cpp:3121:23: style: Variable 'tableName' is assigned a value that is never used. [unreadVariable]
 std::string tableName("Person");
                      ^
Data/SQLite/testsuite/src/SQLiteTest.cpp:3162:18: style: Variable 'stmt1' is assigned a value that is never used. [unreadVariable]
 Statement stmt1 = (local << "SELECT COUNT(*) FROM Person", into(locCount), now);
                 ^
Data/SQLite/testsuite/src/SQLiteTest.cpp:3131:14: style: Unused variable: result [unusedVariable]
 std::string result;
             ^
Data/SQLite/testsuite/src/SQLiteTest.cpp:3205:20: style: Variable 'funct' is assigned a value that is never used. [unreadVariable]
 std::string funct = "transaction()";
                   ^
Data/SQLite/testsuite/src/SQLiteTest.cpp:3210:23: style: Variable 'tableName' is assigned a value that is never used. [unreadVariable]
 std::string tableName("Person");
                      ^
Data/SQLite/testsuite/src/SQLiteTest.cpp:3252:19: style: Variable 'stmt1' is assigned a value that is never used. [unreadVariable]
  Statement stmt1 = (local << "SELECT COUNT(*) FROM Person", into(locCount), now);
                  ^
Data/SQLite/testsuite/src/SQLiteTest.cpp:3284:18: style: Variable 'stmt2' is assigned a value that is never used. [unreadVariable]
 Statement stmt2 = (local << "SELECT COUNT(*) FROM Person", into(locCount), now);
                 ^
Data/SQLite/testsuite/src/SQLiteTest.cpp:3294:18: style: Variable 'stmt3' is assigned a value that is never used. [unreadVariable]
 Statement stmt3 = (local << "SELECT COUNT(*) FROM Person", into(locCount), now);
                 ^
Data/SQLite/testsuite/src/SQLiteTest.cpp:3220:14: style: Unused variable: result [unusedVariable]
 std::string result;
             ^
Data/samples/WebNotifier/src/WebNotifier.cpp:235:2: style: Class 'DBEventHandler' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 DBEventHandler(RequestHandlerFactory& factory):
 ^
Data/src/RecordSet.cpp:311:18: style: Checking if unsigned expression 'currentRow' is less than zero. [unsignedLessThanZero]
  if (currentRow <= 0) return false;
                 ^
Data/src/RecordSet.cpp:333:19: style: Checking if unsigned expression 'currentRow' is less than zero. [unsignedLessThanZero]
   if (currentRow <= 0) return false;
                  ^
Data/src/RecordSet.cpp:375:14: style: Unused variable: val [unusedVariable]
 std::string val;
             ^
Data/testsuite/src/SessionImpl.h:32:2: style: Class 'SessionImpl' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 SessionImpl(const std::string& init,
 ^
Data/testsuite/src/DataTest.h:27:2: style: Class 'DataTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 DataTest(const std::string& name);
 ^
Data/testsuite/src/DataTest.cpp:1175:21: style: Same expression on both sides of '<'. [duplicateExpression]
 assertTrue (!(row1 < row1)); // irreflexive
                    ^
Data/testsuite/src/DataTest.cpp:1419:27: style: Variable 'pL2E' is assigned a value that is never used. [unreadVariable]
 Latin1Encoding::Ptr pL2E = new Latin1Encoding();
                          ^
Data/testsuite/src/SessionPoolTest.h:24:2: style: Class 'SessionPoolTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 SessionPoolTest(const std::string& name);
 ^
Data/testsuite/src/TestStatementImpl.h:37:2: style: Class 'TestStatementImpl' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 TestStatementImpl(SessionImpl& rSession, bool throwOnHasNext = false);
 ^
Encodings/testsuite/src/DoubleByteEncodingTest.h:23:2: style: Class 'DoubleByteEncodingTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 DoubleByteEncodingTest(const std::string& name);
 ^
Foundation/samples/ActiveMethod/src/ActiveMethod.cpp:39:6: performance:inconclusive: Technically the member function 'ActiveMethodExample::activeAddImp' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 int activeAddImp(const AddArgs& args)
     ^
Foundation/samples/NotificationQueue/src/NotificationQueue.cpp:40:2: style: Class 'WorkNotification' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 WorkNotification(int data):
 ^
Foundation/src/ActiveDispatcher.cpp:28:3: style: Class 'MethodNotification' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  MethodNotification(ActiveRunnableBase::Ptr pRunnable):
  ^
Foundation/src/AsyncChannel.cpp:33:2: style: Class 'MessageNotification' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 MessageNotification(const Message& msg):
 ^
Foundation/src/Base32Decoder.cpp:72:7: style: The scope of the variable 'c' can be reduced. [variableScope]
  int c;
      ^
Foundation/src/Checksum.cpp:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 45 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/Clock.cpp:122:0: information: Skipping configuration 'CLOCK_MONOTONIC;POCO_VXWORKS' since the value of 'CLOCK_MONOTONIC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 if (clock_gettime(CLOCK_MONOTONIC, &ts))
^
Foundation/src/Clock.cpp:175:0: information: Skipping configuration 'CLOCK_MONOTONIC;POCO_VXWORKS' since the value of 'CLOCK_MONOTONIC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 if (clock_getres(CLOCK_MONOTONIC, &ts))
^
Foundation/src/Clock.cpp:125:0: information: Skipping configuration 'CLOCK_REALTIME;POCO_VXWORKS;_POSIX_TIMERS;__QNX__' since the value of 'CLOCK_REALTIME' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 if (clock_gettime(CLOCK_REALTIME, &ts))
^
Foundation/src/Clock.cpp:178:0: information: Skipping configuration 'CLOCK_REALTIME;POCO_VXWORKS;_POSIX_TIMERS;__QNX__' since the value of 'CLOCK_REALTIME' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 if (clock_getres(CLOCK_REALTIME, &ts))
^
Foundation/src/Clock.cpp:168:17: error: Uninitialized variable: nanosecs [uninitvar]
 ClockVal acc = nanosecs/1000;
                ^
Foundation/src/Clock.cpp:161:6: style: Variable 'nanosecs' is not assigned a value. [unassignedVariable]
 int nanosecs;
     ^
Foundation/src/DateTime.cpp:214:13: style: The scope of the variable 'daysOfMonthTable' can be reduced. [variableScope]
 static int daysOfMonthTable[] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
            ^
Foundation/src/DirectoryWatcher.cpp:162:3: performance: Variable '_hStopped' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
  _hStopped = CreateEventW(NULL, FALSE, FALSE, NULL);
  ^
Foundation/src/DirectoryWatcher.cpp:159:2: style: Class 'WindowsDirectoryWatcherStrategy' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 WindowsDirectoryWatcherStrategy(DirectoryWatcher& owner):
 ^
Foundation/src/DirectoryWatcher.cpp:172:7: style: The function 'run' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void run()
      ^
Foundation/src/DirectoryWatcher.cpp:65:15: note: Virtual function in base class
 virtual void run() = 0;
              ^
Foundation/src/DirectoryWatcher.cpp:172:7: note: Function in derived class
 void run()
      ^
Foundation/src/DirectoryWatcher.cpp:236:7: style: The function 'stop' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void stop()
      ^
Foundation/src/DirectoryWatcher.cpp:66:15: note: Virtual function in base class
 virtual void stop() = 0;
              ^
Foundation/src/DirectoryWatcher.cpp:236:7: note: Function in derived class
 void stop()
      ^
Foundation/src/DirectoryWatcher.cpp:241:7: style: The function 'supportsMoveEvents' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 bool supportsMoveEvents() const
      ^
Foundation/src/DirectoryWatcher.cpp:67:15: note: Virtual function in base class
 virtual bool supportsMoveEvents() const = 0;
              ^
Foundation/src/DirectoryWatcher.cpp:241:7: note: Function in derived class
 bool supportsMoveEvents() const
      ^
Foundation/src/DirectoryWatcher.cpp:468:2: style: Class 'PollingDirectoryWatcherStrategy' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 PollingDirectoryWatcherStrategy(DirectoryWatcher& owner):
 ^
Foundation/src/DirectoryWatcher.cpp:477:7: style: The function 'run' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void run()
      ^
Foundation/src/DirectoryWatcher.cpp:65:15: note: Virtual function in base class
 virtual void run() = 0;
              ^
Foundation/src/DirectoryWatcher.cpp:477:7: note: Function in derived class
 void run()
      ^
Foundation/src/DirectoryWatcher.cpp:497:7: style: The function 'stop' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void stop()
      ^
Foundation/src/DirectoryWatcher.cpp:66:15: note: Virtual function in base class
 virtual void stop() = 0;
              ^
Foundation/src/DirectoryWatcher.cpp:497:7: note: Function in derived class
 void stop()
      ^
Foundation/src/DirectoryWatcher.cpp:502:7: style: The function 'supportsMoveEvents' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 bool supportsMoveEvents() const
      ^
Foundation/src/DirectoryWatcher.cpp:67:15: note: Virtual function in base class
 virtual bool supportsMoveEvents() const = 0;
              ^
Foundation/src/DirectoryWatcher.cpp:502:7: note: Function in derived class
 bool supportsMoveEvents() const
      ^
Foundation/src/Environment.cpp:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 14 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/Environment_WIN32U.cpp:206:28: style: Variable 'pAdapter' is assigned a value that is never used. [unreadVariable]
 PIP_ADAPTER_INFO pAdapter = 0;
                           ^
Foundation/src/Environment_UNIX.cpp:115:0: information: Skipping configuration '_SC_NPROCESSORS_ONLN' since the value of '_SC_NPROCESSORS_ONLN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 int count = sysconf(_SC_NPROCESSORS_ONLN);
^
Foundation/src/Environment_WIN32U.cpp:181:0: information: Skipping configuration 'PROCESSOR_ARCHITECTURE_AMD64' since the value of 'PROCESSOR_ARCHITECTURE_AMD64' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 case PROCESSOR_ARCHITECTURE_AMD64:
^
Foundation/src/Environment_WIN32U.cpp:177:0: information: Skipping configuration 'PROCESSOR_ARCHITECTURE_IA32_ON_WIN64' since the value of 'PROCESSOR_ARCHITECTURE_IA32_ON_WIN64' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 case PROCESSOR_ARCHITECTURE_IA32_ON_WIN64:
^
Foundation/src/Environment_WINCE.cpp:107:0: information: Skipping configuration 'PROCESSOR_ARCHITECTURE_AMD64' since the value of 'PROCESSOR_ARCHITECTURE_AMD64' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 case PROCESSOR_ARCHITECTURE_AMD64:
^
Foundation/src/Environment_WINCE.cpp:103:0: information: Skipping configuration 'PROCESSOR_ARCHITECTURE_IA32_ON_WIN64' since the value of 'PROCESSOR_ARCHITECTURE_IA32_ON_WIN64' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 case PROCESSOR_ARCHITECTURE_IA32_ON_WIN64:
^
Foundation/src/EventLogChannel.cpp:213:17: style: Condition 'path.empty()' is always true [knownConditionTrueFalse]
  if (path.empty())
                ^
Foundation/src/File_UNIX.cpp:444:8: style: Condition 'n==-1' is always true [knownConditionTrueFalse]
 if (n == -1 && errno == EEXIST)
       ^
Foundation/src/File_UNIX.cpp:439:8: note: Assuming that condition 'n!=-1' is not redundant
 if (n != -1)
       ^
Foundation/src/File_UNIX.cpp:444:8: note: Condition 'n==-1' is always true
 if (n == -1 && errno == EEXIST)
       ^
Foundation/src/File_WIN32U.cpp:30:3: performance: Variable '_h' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
  _h = CreateFileW(upath.c_str(), access, share, 0, disp, 0, 0);
  ^
Foundation/src/File_WINCE.cpp:31:3: performance: Variable '_h' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
  _h = CreateFileW(upath.c_str(), access, share, 0, disp, 0, 0);
  ^
Foundation/src/File_VX.cpp:328:8: style: Condition 'n==-1' is always true [knownConditionTrueFalse]
 if (n == -1 && errno == EEXIST)
       ^
Foundation/src/File_VX.cpp:323:8: note: Assuming that condition 'n!=-1' is not redundant
 if (n != -1)
       ^
Foundation/src/File_VX.cpp:328:8: note: Condition 'n==-1' is always true
 if (n == -1 && errno == EEXIST)
       ^
Foundation/src/JSONString.cpp:31:47: style: Parameter 'obj' can be declared with const [constParameter]
void writeString(const std::string &value, T& obj, typename WriteFunc<T, S>::Type write, int options)
                                              ^
Foundation/src/LocalDateTime.cpp:276:16: portability: Assigning a pointer to an integer is not portable. [AssignmentAddressToInteger]
   errno_t err = localtime_s(broken, &epochTime);
               ^
Foundation/src/Logger.cpp:371:10: style: Consider using std::transform algorithm instead of a raw loop. [useStlAlgorithm]
   names.push_back(p.first);
         ^
Foundation/src/Mutex_POSIX.cpp:60:0: information: Skipping configuration 'PTHREAD_MUTEX_RECURSIVE_NP' since the value of 'PTHREAD_MUTEX_RECURSIVE_NP' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 pthread_mutexattr_settype_np(&attr, PTHREAD_MUTEX_RECURSIVE_NP);
^
Foundation/src/Mutex_POSIX.cpp:85:0: information: Skipping configuration 'PTHREAD_MUTEX_RECURSIVE_NP' since the value of 'PTHREAD_MUTEX_RECURSIVE_NP' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 pthread_mutexattr_settype_np(&attr, fast ? PTHREAD_MUTEX_NORMAL_NP : PTHREAD_MUTEX_RECURSIVE_NP);
^
Foundation/src/NamedEvent_UNIX.cpp:38:23: style: union member 'semun::buf' is never used. [unusedStructMember]
  struct semid_ds*    buf;
                      ^
Foundation/src/NamedEvent_UNIX.cpp:39:23: style: union member 'semun::array' is never used. [unusedStructMember]
  unsigned short int* array;
                      ^
Foundation/src/NamedEvent_UNIX.cpp:40:23: style: union member 'semun::__buf' is never used. [unusedStructMember]
  struct seminfo*     __buf;
                      ^
Foundation/src/NamedEvent_UNIX.cpp:37:23: style: union member 'semun::val' is never used. [unusedStructMember]
  int                 val;
                      ^
Foundation/src/NamedMutex_UNIX.cpp:38:23: style: union member 'semun::buf' is never used. [unusedStructMember]
  struct semid_ds*    buf;
                      ^
Foundation/src/NamedMutex_UNIX.cpp:39:23: style: union member 'semun::array' is never used. [unusedStructMember]
  unsigned short int* array;
                      ^
Foundation/src/NamedMutex_UNIX.cpp:40:23: style: union member 'semun::__buf' is never used. [unusedStructMember]
  struct seminfo*     __buf;
                      ^
Foundation/src/NamedMutex_UNIX.cpp:37:23: style: union member 'semun::val' is never used. [unusedStructMember]
  int                 val;
                      ^
Foundation/src/NotificationCenter.cpp:61:0: style: Consider using std::any_of algorithm instead of a raw loop. [useStlAlgorithm]
  if (observer.equals(*p)) return true;
^
Foundation/src/NumericString.cpp:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 22 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/bignum.cc:523:5: warning: Assert statement calls a function which may have desired side effects: 'RawBigit'. [assertWithSideEffect]
    DOUBLE_CONVERSION_ASSERT(RawBigit(used_bigits_ - 1) < 0x10000);
    ^
Foundation/src/bignum.h:42:3: warning: Member variable 'Bignum::bigits_buffer_' is not initialized in the constructor. [uninitMemberVar]
  Bignum() : used_bigits_(0), exponent_(0) {}
  ^
Foundation/src/utils.h:273:6: style:inconclusive: Technically the member function 'Vector < const char >::first' can be const. [functionConst]
  T& first() { return start_[0]; }
     ^
Foundation/src/utils.h:275:6: style:inconclusive: Technically the member function 'Vector < const char >::last' can be const. [functionConst]
  T& last() { return start_[length_ - 1]; }
     ^
Foundation/src/double-to-string.cc:208:3: style: The comparison 'kMaxFixedDigitsBeforePoint == 60' is always true. [knownConditionTrueFalse]
  DOUBLE_CONVERSION_ASSERT(kMaxFixedDigitsBeforePoint == 60);
  ^
Foundation/src/double-to-string.h:40:49: note: 'kMaxFixedDigitsBeforePoint' is assigned value '60' here.
  static const int kMaxFixedDigitsBeforePoint = 60;
                                                ^
Foundation/src/double-to-string.cc:208:3: note: The comparison 'kMaxFixedDigitsBeforePoint == 60' is always true.
  DOUBLE_CONVERSION_ASSERT(kMaxFixedDigitsBeforePoint == 60);
  ^
Foundation/src/string-to-double.cc:156:22: style: Same value in both branches of ternary operator. [duplicateValueTernary]
  return sign ? -0.0 : 0.0;
                     ^
Foundation/src/strtod.cc:508:10: style: The scope of the variable 'half_max_finite_infinity' can be reduced. [variableScope]
  double half_max_finite_infinity =
         ^
Foundation/src/fast-dtoa.cc:379:3: style: Checking if unsigned expression 'one.f()' is less than zero. [unsignedLessThanZero]
  DOUBLE_CONVERSION_ASSERT(DOUBLE_CONVERSION_UINT64_2PART_C(0xFFFFFFFF, FFFFFFFF) / 10 >= one.f());
  ^
Foundation/src/fast-dtoa.cc:489:3: style: Checking if unsigned expression 'one.f()' is less than zero. [unsignedLessThanZero]
  DOUBLE_CONVERSION_ASSERT(DOUBLE_CONVERSION_UINT64_2PART_C(0xFFFFFFFF, FFFFFFFF) / 10 >= one.f());
  ^
Foundation/src/bignum-dtoa.cc:90:56: style:inconclusive: Function 'BignumDtoa' argument 6 names different: declaration 'point' definition 'decimal_point'. [funcArgNamesDifferent]
                Vector<char> buffer, int* length, int* decimal_point) {
                                                       ^
Foundation/src/bignum-dtoa.h:80:56: note: Function 'BignumDtoa' argument 6 names different: declaration 'point' definition 'decimal_point'.
                Vector<char> buffer, int* length, int* point);
                                                       ^
Foundation/src/bignum-dtoa.cc:90:56: note: Function 'BignumDtoa' argument 6 names different: declaration 'point' definition 'decimal_point'.
                Vector<char> buffer, int* length, int* decimal_point) {
                                                       ^
Foundation/src/bignum.cc:426:57: style:inconclusive: Function 'AssignPowerUInt16' argument 2 names different: declaration 'exponent' definition 'power_exponent'. [funcArgNamesDifferent]
void Bignum::AssignPowerUInt16(uint16_t base, const int power_exponent) {
                                                        ^
Foundation/src/bignum.h:51:51: note: Function 'AssignPowerUInt16' argument 2 names different: declaration 'exponent' definition 'power_exponent'.
  void AssignPowerUInt16(uint16_t base, const int exponent);
                                                  ^
Foundation/src/bignum.cc:426:57: note: Function 'AssignPowerUInt16' argument 2 names different: declaration 'exponent' definition 'power_exponent'.
void Bignum::AssignPowerUInt16(uint16_t base, const int power_exponent) {
                                                        ^
Foundation/src/fast-dtoa.cc:635:22: style:inconclusive: Function 'FastDtoa' argument 1 names different: declaration 'd' definition 'v'. [funcArgNamesDifferent]
bool FastDtoa(double v,
                     ^
Foundation/src/fast-dtoa.h:79:22: note: Function 'FastDtoa' argument 1 names different: declaration 'd' definition 'v'.
bool FastDtoa(double d,
                     ^
Foundation/src/fast-dtoa.cc:635:22: note: Function 'FastDtoa' argument 1 names different: declaration 'd' definition 'v'.
bool FastDtoa(double v,
                     ^
Foundation/src/string-to-double.cc:420:14: style:inconclusive: Function 'StringToIeee' argument 1 names different: declaration 'start_pointer' definition 'input'. [funcArgNamesDifferent]
    Iterator input,
             ^
Foundation/src/string-to-double.h:228:32: note: Function 'StringToIeee' argument 1 names different: declaration 'start_pointer' definition 'input'.
  double StringToIeee(Iterator start_pointer,
                               ^
Foundation/src/string-to-double.cc:420:14: note: Function 'StringToIeee' argument 1 names different: declaration 'start_pointer' definition 'input'.
    Iterator input,
             ^
Foundation/src/string-to-double.cc:113:44: style: Modulo of one is always equal to zero [moduloofone]
static const int kWhitespaceTable7Length = DOUBLE_CONVERSION_ARRAY_SIZE(kWhitespaceTable7);
                                           ^
Foundation/src/double-to-string.cc:399:15: style: Variable 'vector[0]' is assigned a value that is never used. [unreadVariable]
    vector[0] = '\0';
              ^
Foundation/src/double-to-string.cc:406:15: style: Variable 'vector[1]' is assigned a value that is never used. [unreadVariable]
    vector[1] = '\0';
              ^
Foundation/src/double-to-string.cc:437:19: style: Variable 'vector[*length]' is assigned a value that is never used. [unreadVariable]
  vector[*length] = '\0';
                  ^
Foundation/src/diy-fp.h:122:12: performance:inconclusive: Technically the member function 'poco_double_conversion::DiyFp::f' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  uint64_t f() const { return f_; }
           ^
Foundation/src/diy-fp.h:125:8: performance:inconclusive: Technically the member function 'poco_double_conversion::DiyFp::set_f' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  void set_f(uint64_t new_value) { f_ = new_value; }
       ^
Foundation/src/ieee.h:86:12: performance:inconclusive: Technically the member function 'poco_double_conversion::Double::AsUint64' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  uint64_t AsUint64() const {
           ^
Foundation/src/ieee.h:220:10: performance:inconclusive: Technically the member function 'poco_double_conversion::Double::value' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  double value() const { return uint64_to_double(d64_); }
         ^
Foundation/src/fixed-dtoa.cc:42:8: performance:inconclusive: Technically the member function 'poco_double_conversion::UInt128::Multiply' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  void Multiply(uint32_t multiplicand) {
       ^
Foundation/src/fixed-dtoa.cc:59:8: performance:inconclusive: Technically the member function 'poco_double_conversion::UInt128::Shift' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  void Shift(int shift_amount) {
       ^
Foundation/src/fixed-dtoa.cc:82:7: performance:inconclusive: Technically the member function 'poco_double_conversion::UInt128::DivModPowerOf2' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  int DivModPowerOf2(int power) {
      ^
Foundation/src/fixed-dtoa.cc:97:8: performance:inconclusive: Technically the member function 'poco_double_conversion::UInt128::IsZero' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  bool IsZero() const {
       ^
Foundation/src/fixed-dtoa.cc:101:7: performance:inconclusive: Technically the member function 'poco_double_conversion::UInt128::BitAt' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  int BitAt(int position) const {
      ^
Foundation/src/Path.cpp:924:7: style: The scope of the variable 'hasOpenBracket' can be reduced. [variableScope]
 bool hasOpenBracket = false;
      ^
Foundation/src/Path_WINCE.cpp:131:18: style: Local variable 'name' shadows outer variable [shadowVariable]
     std::string name;
                 ^
Foundation/src/Path_WINCE.cpp:124:18: note: Shadowed declaration
    std::wstring name(fd.cFileName);
                 ^
Foundation/src/Path_WINCE.cpp:131:18: note: Shadow variable
     std::string name;
                 ^
Foundation/src/Process_UNIX.cpp:242:13: style: Local variable 'i' shadows outer variable [shadowVariable]
  for (long i = 3; i < fdMax; ++i)
            ^
Foundation/src/Process_UNIX.cpp:189:6: note: Shadowed declaration
 int i = 0;
     ^
Foundation/src/Process_UNIX.cpp:242:13: note: Shadow variable
  for (long i = 3; i < fdMax; ++i)
            ^
Foundation/src/RandomStream.cpp:60:8: style: The comparison 'n <= 0' is always true. [knownConditionTrueFalse]
 if (n <= 0)
       ^
Foundation/src/RandomStream.cpp:43:10: note: 'n' is assigned value '0' here.
 int n = 0;
         ^
Foundation/src/RandomStream.cpp:60:8: note: The comparison 'n <= 0' is always true.
 if (n <= 0)
       ^
Foundation/src/RegularExpression.cpp:32:3: style: Class 'MatchData' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  MatchData(pcre2_code_8* code):
  ^
Foundation/src/RegularExpression.cpp:147:24: style: Checking if unsigned expression 'ovec[0]' is less than zero. [unsignedLessThanZero]
 mtch.offset = ovec[0] < 0 ? std::string::npos : ovec[0];
                       ^
Foundation/src/RegularExpression.cpp:186:24: style: Checking if unsigned expression 'ovec[i*2]' is less than zero. [unsignedLessThanZero]
  m.offset = ovec[i*2] < 0 ? std::string::npos : ovec[i*2] ;
                       ^
Foundation/src/SharedLibrary.cpp:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 13 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/SharedLibrary_UNIX.cpp:50:0: information: Skipping configuration 'RTLD_LOCAL;__CYGWIN__' since the value of 'RTLD_LOCAL' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  realFlags |= RTLD_LOCAL;
^
Foundation/src/StreamConverter.cpp:91:22: style: The if condition is the same as the previous if condition [duplicateCondition]
 if (_sequenceLength == 0)
                     ^
Foundation/src/StreamConverter.cpp:89:22: note: First condition
 if (_sequenceLength == 0)
                     ^
Foundation/src/StreamConverter.cpp:91:22: note: Second condition
 if (_sequenceLength == 0)
                     ^
Foundation/src/StreamConverter.cpp:114:8: style: Local variable 'n' shadows outer variable [shadowVariable]
   int n = _outEncoding.convert(uc, _buffer, sizeof(_buffer));
       ^
Foundation/src/StreamConverter.cpp:105:7: note: Shadowed declaration
  int n = _inEncoding.queryConvert(_buffer, _pos);
      ^
Foundation/src/StreamConverter.cpp:114:8: note: Shadow variable
   int n = _outEncoding.convert(uc, _buffer, sizeof(_buffer));
       ^
Foundation/src/SyslogChannel.cpp:205:8: style: Condition '!result.empty()' is always false [knownConditionTrueFalse]
   if (!result.empty()) result.append("|");
       ^
Foundation/src/Thread.cpp:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 14 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/Thread.cpp:45:2: style: Class 'RunnableHolder' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 RunnableHolder(Runnable& target):
 ^
Foundation/src/Thread_POSIX.cpp:88:4: style:inconclusive: Consecutive return, break, continue, goto or throw statements are unnecessary. [duplicateBreak]
   throw Poco::SystemException("cannot set thread name");
   ^
Foundation/src/Thread_POSIX.cpp:231:0: information: Skipping configuration 'POCO_OS_FAMILY_BSD;PTHREAD_STACK_MIN' since the value of 'PTHREAD_STACK_MIN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   if (size < PTHREAD_STACK_MIN)
^
Foundation/src/Thread_POSIX.cpp:232:0: information: Skipping configuration 'POCO_OS_FAMILY_BSD;PTHREAD_STACK_MIN' since the value of 'PTHREAD_STACK_MIN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    size = PTHREAD_STACK_MIN;
^
Foundation/src/Thread_WIN32.cpp:250:16: style: Variable 'old' is assigned a value that is never used. [unreadVariable]
 DWORD_PTR old = 0;
               ^
Foundation/src/Thread_POSIX.cpp:210:0: information: Skipping configuration 'POCO_THREAD_PRIORITY_MAX' since the value of 'POCO_THREAD_PRIORITY_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 return POCO_THREAD_PRIORITY_MAX;
^
Foundation/src/Thread_POSIX.cpp:198:0: information: Skipping configuration 'POCO_THREAD_PRIORITY_MIN' since the value of 'POCO_THREAD_PRIORITY_MIN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 return POCO_THREAD_PRIORITY_MIN;
^
Foundation/src/Thread_POSIX.cpp:231:0: information: Skipping configuration 'PTHREAD_STACK_MIN' since the value of 'PTHREAD_STACK_MIN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   if (size < PTHREAD_STACK_MIN)
^
Foundation/src/Thread_POSIX.cpp:232:0: information: Skipping configuration 'PTHREAD_STACK_MIN' since the value of 'PTHREAD_STACK_MIN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    size = PTHREAD_STACK_MIN;
^
Foundation/src/ThreadPool.cpp:34:2: style: Class 'PooledThread' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 PooledThread(const std::string& name, int stackSize = POCO_THREAD_STACK_SIZE);
 ^
Foundation/src/Timestamp.cpp:239:0: information: Skipping configuration 'CLOCK_REALTIME;POCO_VXWORKS;_POSIX_TIMERS;__QNX__' since the value of 'CLOCK_REALTIME' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 if (clock_gettime(CLOCK_REALTIME, &ts))
^
Foundation/src/Timestamp.cpp:114:7: style:inconclusive: Technically the member function '::TickOffset::systemTime' can be const. [functionConst]
 void systemTime(SYSTEMTIME* pST)
      ^
Foundation/src/Timezone_WIN32.cpp:28:16: style: Variable 'dstFlag' is assigned a value that is never used. [unreadVariable]
 DWORD dstFlag = GetTimeZoneInformation(&tzInfo);
               ^
Foundation/src/Timezone_WIN32.cpp:78:16: style: Variable 'dstFlag' is assigned a value that is never used. [unreadVariable]
 DWORD dstFlag = GetTimeZoneInformation(&tzInfo);
               ^
Foundation/src/Timezone_WIN32.cpp:89:16: style: Variable 'dstFlag' is assigned a value that is never used. [unreadVariable]
 DWORD dstFlag = GetTimeZoneInformation(&tzInfo);
               ^
Foundation/src/Timezone_WINCE.cpp:33:16: style: Variable 'dstFlag' is assigned a value that is never used. [unreadVariable]
 DWORD dstFlag = GetTimeZoneInformation(&tzInfo);
               ^
Foundation/src/Timezone_WINCE.cpp:86:16: style: Variable 'dstFlag' is assigned a value that is never used. [unreadVariable]
 DWORD dstFlag = GetTimeZoneInformation(&tzInfo);
               ^
Foundation/src/Timezone_WINCE.cpp:97:16: style: Variable 'dstFlag' is assigned a value that is never used. [unreadVariable]
 DWORD dstFlag = GetTimeZoneInformation(&tzInfo);
               ^
Foundation/src/UTF8Encoding.cpp:157:6: style: The scope of the variable 'uc' can be reduced. [variableScope]
 int uc;
     ^
Foundation/src/UTF8String.cpp:275:5: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
    it++;
    ^
Foundation/src/UTF8String.cpp:289:5: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
    it++;
    ^
Foundation/src/UTF8String.cpp:295:5: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
    it++;
    ^
Foundation/src/UTF8String.cpp:301:5: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
    it++;
    ^
Foundation/src/UTF8String.cpp:307:5: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
    it++;
    ^
Foundation/src/UTF8String.cpp:313:5: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
    it++;
    ^
Foundation/src/UTF8String.cpp:319:5: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
    it++;
    ^
Foundation/src/UTF8String.cpp:325:5: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
    it++;
    ^
Foundation/src/UTF8String.cpp:331:5: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
    it++;
    ^
Foundation/src/UTF8String.cpp:340:5: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
    it++;
    ^
Foundation/src/UTF8String.cpp:356:7: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
      it++;
      ^
Foundation/src/UTF8String.cpp:363:8: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
       it++;
       ^
Foundation/src/Unicode.cpp:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/pcre2_intmodedep.h:655:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR       subject;       /* The subject that was matched */
^
Foundation/src/pcre2_intmodedep.h:656:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR       mark;          /* Pointer to last mark */
^
Foundation/src/pcre2_intmodedep.h:679:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR group;
^
Foundation/src/pcre2_intmodedep.h:690:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR group;
^
Foundation/src/pcre2_intmodedep.h:706:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR   name;          /* Points to the name in the pattern */
^
Foundation/src/pcre2_intmodedep.h:721:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR start_workspace;      /* The start of working space */
^
Foundation/src/pcre2_intmodedep.h:722:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR start_code;           /* The start of the compiled code */
^
Foundation/src/pcre2_intmodedep.h:723:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR start_pattern;        /* The start of the pattern */
^
Foundation/src/pcre2_intmodedep.h:724:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR end_pattern;          /* The end of the pattern */
^
Foundation/src/pcre2_intmodedep.h:771:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR subject_position;
^
Foundation/src/pcre2_intmodedep.h:787:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR ecode;          /* The current position in the pattern */
^
Foundation/src/pcre2_intmodedep.h:788:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR temp_sptr[2];   /* Used for short-term PCRE_SPTR values */
^
Foundation/src/pcre2_intmodedep.h:825:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR eptr;           /* MUST BE FIRST */
^
Foundation/src/pcre2_intmodedep.h:826:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR start_match;    /* Can be adjusted by \K */
^
Foundation/src/pcre2_intmodedep.h:827:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR mark;           /* Most recent mark on the success path */
^
Foundation/src/pcre2_intmodedep.h:877:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR name_table;          /* Table of group names */
^
Foundation/src/pcre2_intmodedep.h:878:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR start_code;          /* For use when recursing */
^
Foundation/src/pcre2_intmodedep.h:879:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR start_subject;       /* Start of the subject string */
^
Foundation/src/pcre2_intmodedep.h:880:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR check_subject;       /* Where UTF-checked from */
^
Foundation/src/pcre2_intmodedep.h:881:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR end_subject;         /* End of the subject string */
^
Foundation/src/pcre2_intmodedep.h:882:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR end_match_ptr;       /* Subject position at end match */
^
Foundation/src/pcre2_intmodedep.h:883:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR start_used_ptr;      /* Earliest consulted character */
^
Foundation/src/pcre2_intmodedep.h:884:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR last_used_ptr;       /* Latest consulted character */
^
Foundation/src/pcre2_intmodedep.h:885:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR mark;                /* Mark pointer to pass back on success */
^
Foundation/src/pcre2_intmodedep.h:886:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR nomatch_mark;        /* Mark pointer to pass back on failure */
^
Foundation/src/pcre2_intmodedep.h:887:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR verb_ecode_ptr;      /* For passing back info */
^
Foundation/src/pcre2_intmodedep.h:888:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR verb_skip_ptr;       /* For passing back a (*SKIP) name */
^
Foundation/src/pcre2_intmodedep.h:907:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR start_code;          /* Start of the compiled pattern */
^
Foundation/src/pcre2_intmodedep.h:908:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR start_subject ;      /* Start of the subject string */
^
Foundation/src/pcre2_intmodedep.h:909:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR end_subject;         /* End of subject string */
^
Foundation/src/pcre2_intmodedep.h:910:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR start_used_ptr;      /* Earliest consulted character */
^
Foundation/src/pcre2_intmodedep.h:911:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR last_used_ptr;       /* Latest consulted character */
^
Foundation/src/pcre2_internal.h:2012:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
extern int          _pcre2_check_escape(PCRE2_SPTR *, PCRE2_SPTR, uint32_t *,
^
Foundation/src/pcre2_internal.h:2014:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
extern PCRE2_SPTR   _pcre2_extuni(uint32_t, PCRE2_SPTR, PCRE2_SPTR, PCRE2_SPTR,
^
Foundation/src/pcre2_internal.h:2016:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
extern PCRE2_SPTR   _pcre2_find_bracket(PCRE2_SPTR, BOOL, int);
^
Foundation/src/pcre2_internal.h:2017:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
extern BOOL         _pcre2_is_newline(PCRE2_SPTR, uint32_t, PCRE2_SPTR,
^
Foundation/src/pcre2_internal.h:2025:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
extern BOOL         _pcre2_script_run(PCRE2_SPTR, PCRE2_SPTR, BOOL);
^
Foundation/src/pcre2_internal.h:2026:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
extern int          _pcre2_strcmp(PCRE2_SPTR, PCRE2_SPTR);
^
Foundation/src/pcre2_internal.h:2027:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
extern int          _pcre2_strcmp_c8(PCRE2_SPTR, const char *);
^
Foundation/src/pcre2_internal.h:2029:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
extern PCRE2_SIZE   _pcre2_strlen(PCRE2_SPTR);
^
Foundation/src/pcre2_internal.h:2030:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
extern int          _pcre2_strncmp(PCRE2_SPTR, PCRE2_SPTR, size_t);
^
Foundation/src/pcre2_internal.h:2031:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
extern int          _pcre2_strncmp_c8(PCRE2_SPTR, const char *, size_t);
^
Foundation/src/pcre2_internal.h:2033:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
extern int          _pcre2_valid_utf(PCRE2_SPTR, PCRE2_SIZE, PCRE2_SIZE *);
^
Foundation/src/pcre2_internal.h:2034:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
extern BOOL         _pcre2_was_newline(PCRE2_SPTR, uint32_t, PCRE2_SPTR,
^
Foundation/src/pcre2_internal.h:2036:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
extern BOOL         _pcre2_xclass(uint32_t, PCRE2_SPTR, BOOL);
^
Foundation/src/Var.cpp:467:12: style: Array index 'pos' is used before limits check. [arrayIndexThenCheck]
 while (val[pos] != '}' && pos < val.size())
           ^
Foundation/src/Var.cpp:496:12: style: Array index 'pos' is used before limits check. [arrayIndexThenCheck]
 while (val[pos] != ']' && pos < val.size())
           ^
Foundation/src/Var.cpp:595:25: style: Array index 'pos' is used before limits check. [arrayIndexThenCheck]
 while (std::isspace(val[pos]) && pos < val.size())
                        ^
Foundation/src/adler32.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 69 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/adler32.c:69:14: style: The scope of the variable 'n' can be reduced. [variableScope]
    unsigned n;
             ^
Foundation/src/bignum-dtoa.cc:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 20 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/diy-fp.h:122:12: performance:inconclusive: Technically the member function 'double_conversion::DiyFp::f' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  uint64_t f() const { return f_; }
           ^
Foundation/src/diy-fp.h:125:8: performance:inconclusive: Technically the member function 'double_conversion::DiyFp::set_f' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  void set_f(uint64_t new_value) { f_ = new_value; }
       ^
Foundation/src/ieee.h:86:12: performance:inconclusive: Technically the member function 'double_conversion::Double::AsUint64' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  uint64_t AsUint64() const {
           ^
Foundation/src/ieee.h:220:10: performance:inconclusive: Technically the member function 'double_conversion::Double::value' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  double value() const { return uint64_to_double(d64_); }
         ^
Foundation/src/bignum.cc:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/cached-powers.cc:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/compress.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 41 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/zconf.h:248:0: information: Skipping configuration 'NO_SIZE_T' since the value of 'NO_SIZE_T' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
     typedef unsigned NO_SIZE_T z_size_t;
^
Foundation/src/crc32.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 76 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/deflate.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 73 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/deflate.c:584:9: style: The scope of the variable 'put' can be reduced. [variableScope]
    int put;
        ^
Foundation/src/deflate.c:2091:9: style: Variable 'bflush' is assigned a value that is never used. [unreadVariable]
        _tr_tally_lit(s, s->window[s->strstart - 1], bflush);
        ^
Foundation/src/deflate.c:211:7: style: Variable 'n' is assigned a value that is never used. [unreadVariable]
    n = wsize;
      ^
Foundation/src/double-to-string.cc:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 20 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/fast-dtoa.cc:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 20 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/fast-dtoa.cc:434:3: style: The comparison 'kMinimalTargetExponent >= -60' is always true. [knownConditionTrueFalse]
  DOUBLE_CONVERSION_ASSERT(kMinimalTargetExponent >= -60);
  ^
Foundation/src/fast-dtoa.cc:42:44: note: 'kMinimalTargetExponent' is assigned value '-60' here.
static const int kMinimalTargetExponent = -60;
                                           ^
Foundation/src/fast-dtoa.cc:434:3: note: The comparison 'kMinimalTargetExponent >= -60' is always true.
  DOUBLE_CONVERSION_ASSERT(kMinimalTargetExponent >= -60);
  ^
Foundation/src/fast-dtoa.cc:435:3: style: The comparison 'kMaximalTargetExponent <= -32' is always true. [knownConditionTrueFalse]
  DOUBLE_CONVERSION_ASSERT(kMaximalTargetExponent <= -32);
  ^
Foundation/src/fast-dtoa.cc:43:44: note: 'kMaximalTargetExponent' is assigned value '-32' here.
static const int kMaximalTargetExponent = -32;
                                           ^
Foundation/src/fast-dtoa.cc:435:3: note: The comparison 'kMaximalTargetExponent <= -32' is always true.
  DOUBLE_CONVERSION_ASSERT(kMaximalTargetExponent <= -32);
  ^
Foundation/src/fixed-dtoa.cc:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 20 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/fixed-dtoa.cc:42:8: performance:inconclusive: Technically the member function 'double_conversion::UInt128::Multiply' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  void Multiply(uint32_t multiplicand) {
       ^
Foundation/src/fixed-dtoa.cc:59:8: performance:inconclusive: Technically the member function 'double_conversion::UInt128::Shift' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  void Shift(int shift_amount) {
       ^
Foundation/src/fixed-dtoa.cc:82:7: performance:inconclusive: Technically the member function 'double_conversion::UInt128::DivModPowerOf2' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  int DivModPowerOf2(int power) {
      ^
Foundation/src/fixed-dtoa.cc:97:8: performance:inconclusive: Technically the member function 'double_conversion::UInt128::IsZero' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  bool IsZero() const {
       ^
Foundation/src/fixed-dtoa.cc:101:7: performance:inconclusive: Technically the member function 'double_conversion::UInt128::BitAt' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  int BitAt(int position) const {
      ^
Foundation/src/infback.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 69 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/inffast.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 71 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/inffast.c:125:17: style: Condition 'op' is always true [knownConditionTrueFalse]
            if (op) {
                ^
Foundation/src/inffast.c:116:16: note: Assuming that condition 'op==0' is not redundant
        if (op == 0) {                          /* literal */
               ^
Foundation/src/inffast.c:124:13: note: Compound assignment '&=', assigned value is 0
            op &= 15;                           /* number of extra bits */
            ^
Foundation/src/inffast.c:125:17: note: Condition 'op' is always true
            if (op) {
                ^
Foundation/src/inffast.c:247:33: style: Condition 'len>1' is always false [knownConditionTrueFalse]
                        if (len > 1)
                                ^
Foundation/src/inffast.c:245:25: note: Assuming condition 'len' is true
                    if (len) {
                        ^
Foundation/src/inffast.c:247:33: note: Condition 'len>1' is always false
                        if (len > 1)
                                ^
Foundation/src/inffast.c:261:33: style: Condition 'len>1' is always false [knownConditionTrueFalse]
                        if (len > 1)
                                ^
Foundation/src/inffast.c:259:25: note: Assuming condition 'len' is true
                    if (len) {
                        ^
Foundation/src/inffast.c:261:33: note: Condition 'len>1' is always false
                        if (len > 1)
                                ^
Foundation/src/inflate.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 72 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/inflate.c:405:14: style: The scope of the variable 'dist' can be reduced. [variableScope]
    unsigned dist;
             ^
Foundation/src/inflate.c:1347:19: style: The scope of the variable 'dictid' can be reduced. [variableScope]
    unsigned long dictid;
                  ^
Foundation/src/inflate.c:1433:19: style: The scope of the variable 'buf' can be reduced. [variableScope]
    unsigned char buf[4];       /* to restore bit buffer to byte string */
                  ^
Foundation/src/inflate.c:1502:14: style: The scope of the variable 'wsize' can be reduced. [variableScope]
    unsigned wsize;
             ^
Foundation/src/inftrees.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 68 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/inftrees.c:50:14: style: The scope of the variable 'fill' can be reduced. [variableScope]
    unsigned fill;              /* index for replicating entries */
             ^
Foundation/src/pcre2_auto_possess.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 20 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/pcre2_auto_possess.c:320:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static PCRE2_SPTR
^
Foundation/src/pcre2_auto_possess.c:321:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
get_chr_property_list(PCRE2_SPTR code, BOOL utf, BOOL ucp, const uint8_t *fcc,
^
Foundation/src/pcre2_auto_possess.c:326:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR end;
^
Foundation/src/pcre2_auto_possess.c:532:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
compare_opcodes(PCRE2_SPTR code, BOOL utf, BOOL ucp, const compile_block *cb,
^
Foundation/src/pcre2_auto_possess.c:533:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  const uint32_t *base_list, PCRE2_SPTR base_end, int *rec_limit)
^
Foundation/src/pcre2_auto_possess.c:540:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR next_code;
^
Foundation/src/pcre2_auto_possess.c:542:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR xclass_flags;
^
Foundation/src/pcre2_auto_possess.c:1131:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR end;
^
Foundation/src/pcre2_chartables.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/pcre2_compile.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 33 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/pcre2_compile.c:2507:47: error: The address of local variable 'previous_callout' is accessed at non-zero index. [objectIndex]
if (previous_callout != NULL) previous_callout[2] = (uint32_t)(ptr -
                                              ^
Foundation/src/pcre2_compile.c:2660:49: note: Address of variable taken here.
      parsed_pattern = manage_callouts(thisptr, &previous_callout,
                                                ^
Foundation/src/pcre2_compile.c:2660:49: note: Calling function 'manage_callouts', 2nd argument '&previous_callout' value is lifetime=previous_callout
      parsed_pattern = manage_callouts(thisptr, &previous_callout,
                                                ^
Foundation/src/pcre2_compile.c:2507:47: note: The address of local variable 'previous_callout' is accessed at non-zero index.
if (previous_callout != NULL) previous_callout[2] = (uint32_t)(ptr -
                                              ^
Foundation/src/pcre2_compile.c:2507:47: error: The address of local variable 'previous_callout' is accessed at non-zero index. [objectIndex]
if (previous_callout != NULL) previous_callout[2] = (uint32_t)(ptr -
                                              ^
Foundation/src/pcre2_compile.c:2741:53: note: Address of variable taken here.
          parsed_pattern = manage_callouts(thisptr, &previous_callout,
                                                    ^
Foundation/src/pcre2_compile.c:2741:53: note: Calling function 'manage_callouts', 2nd argument '&previous_callout' value is lifetime=previous_callout
          parsed_pattern = manage_callouts(thisptr, &previous_callout,
                                                    ^
Foundation/src/pcre2_compile.c:2507:47: note: The address of local variable 'previous_callout' is accessed at non-zero index.
if (previous_callout != NULL) previous_callout[2] = (uint32_t)(ptr -
                                              ^
Foundation/src/pcre2_compile.c:2507:47: error: The address of local variable 'previous_callout' is accessed at non-zero index. [objectIndex]
if (previous_callout != NULL) previous_callout[2] = (uint32_t)(ptr -
                                              ^
Foundation/src/pcre2_compile.c:2916:49: note: Address of variable taken here.
      parsed_pattern = manage_callouts(thisptr, &previous_callout, auto_callout,
                                                ^
Foundation/src/pcre2_compile.c:2916:49: note: Calling function 'manage_callouts', 2nd argument '&previous_callout' value is lifetime=previous_callout
      parsed_pattern = manage_callouts(thisptr, &previous_callout, auto_callout,
                                                ^
Foundation/src/pcre2_compile.c:2507:47: note: The address of local variable 'previous_callout' is accessed at non-zero index.
if (previous_callout != NULL) previous_callout[2] = (uint32_t)(ptr -
                                              ^
Foundation/src/pcre2_compile.c:2507:47: error: The address of local variable 'previous_callout' is accessed at non-zero index. [objectIndex]
if (previous_callout != NULL) previous_callout[2] = (uint32_t)(ptr -
                                              ^
Foundation/src/pcre2_compile.c:4773:39: note: Address of variable taken here.
parsed_pattern = manage_callouts(ptr, &previous_callout, auto_callout,
                                      ^
Foundation/src/pcre2_compile.c:4773:39: note: Calling function 'manage_callouts', 2nd argument '&previous_callout' value is lifetime=previous_callout
parsed_pattern = manage_callouts(ptr, &previous_callout, auto_callout,
                                      ^
Foundation/src/pcre2_compile.c:2507:47: note: The address of local variable 'previous_callout' is accessed at non-zero index.
if (previous_callout != NULL) previous_callout[2] = (uint32_t)(ptr -
                                              ^
Foundation/src/pcre2_compile.c:2508:51: error: The address of local variable 'previous_callout' is accessed at non-zero index. [objectIndex]
  cb->start_pattern - (PCRE2_SIZE)previous_callout[1]);
                                                  ^
Foundation/src/pcre2_compile.c:2660:49: note: Address of variable taken here.
      parsed_pattern = manage_callouts(thisptr, &previous_callout,
                                                ^
Foundation/src/pcre2_compile.c:2660:49: note: Calling function 'manage_callouts', 2nd argument '&previous_callout' value is lifetime=previous_callout
      parsed_pattern = manage_callouts(thisptr, &previous_callout,
                                                ^
Foundation/src/pcre2_compile.c:2508:51: note: The address of local variable 'previous_callout' is accessed at non-zero index.
  cb->start_pattern - (PCRE2_SIZE)previous_callout[1]);
                                                  ^
Foundation/src/pcre2_compile.c:2508:51: error: The address of local variable 'previous_callout' is accessed at non-zero index. [objectIndex]
  cb->start_pattern - (PCRE2_SIZE)previous_callout[1]);
                                                  ^
Foundation/src/pcre2_compile.c:2741:53: note: Address of variable taken here.
          parsed_pattern = manage_callouts(thisptr, &previous_callout,
                                                    ^
Foundation/src/pcre2_compile.c:2741:53: note: Calling function 'manage_callouts', 2nd argument '&previous_callout' value is lifetime=previous_callout
          parsed_pattern = manage_callouts(thisptr, &previous_callout,
                                                    ^
Foundation/src/pcre2_compile.c:2508:51: note: The address of local variable 'previous_callout' is accessed at non-zero index.
  cb->start_pattern - (PCRE2_SIZE)previous_callout[1]);
                                                  ^
Foundation/src/pcre2_compile.c:2508:51: error: The address of local variable 'previous_callout' is accessed at non-zero index. [objectIndex]
  cb->start_pattern - (PCRE2_SIZE)previous_callout[1]);
                                                  ^
Foundation/src/pcre2_compile.c:2916:49: note: Address of variable taken here.
      parsed_pattern = manage_callouts(thisptr, &previous_callout, auto_callout,
                                                ^
Foundation/src/pcre2_compile.c:2916:49: note: Calling function 'manage_callouts', 2nd argument '&previous_callout' value is lifetime=previous_callout
      parsed_pattern = manage_callouts(thisptr, &previous_callout, auto_callout,
                                                ^
Foundation/src/pcre2_compile.c:2508:51: note: The address of local variable 'previous_callout' is accessed at non-zero index.
  cb->start_pattern - (PCRE2_SIZE)previous_callout[1]);
                                                  ^
Foundation/src/pcre2_compile.c:2508:51: error: The address of local variable 'previous_callout' is accessed at non-zero index. [objectIndex]
  cb->start_pattern - (PCRE2_SIZE)previous_callout[1]);
                                                  ^
Foundation/src/pcre2_compile.c:4773:39: note: Address of variable taken here.
parsed_pattern = manage_callouts(ptr, &previous_callout, auto_callout,
                                      ^
Foundation/src/pcre2_compile.c:4773:39: note: Calling function 'manage_callouts', 2nd argument '&previous_callout' value is lifetime=previous_callout
parsed_pattern = manage_callouts(ptr, &previous_callout, auto_callout,
                                      ^
Foundation/src/pcre2_compile.c:2508:51: note: The address of local variable 'previous_callout' is accessed at non-zero index.
  cb->start_pattern - (PCRE2_SIZE)previous_callout[1]);
                                                  ^
Foundation/src/pcre2_compile.c:2514:23: error: The address of local variable 'previous_callout' is accessed at non-zero index. [objectIndex]
      previous_callout[3] != 255)
                      ^
Foundation/src/pcre2_compile.c:2660:49: note: Address of variable taken here.
      parsed_pattern = manage_callouts(thisptr, &previous_callout,
                                                ^
Foundation/src/pcre2_compile.c:2660:49: note: Calling function 'manage_callouts', 2nd argument '&previous_callout' value is lifetime=previous_callout
      parsed_pattern = manage_callouts(thisptr, &previous_callout,
                                                ^
Foundation/src/pcre2_compile.c:2514:23: note: The address of local variable 'previous_callout' is accessed at non-zero index.
      previous_callout[3] != 255)
                      ^
Foundation/src/pcre2_compile.c:2514:23: error: The address of local variable 'previous_callout' is accessed at non-zero index. [objectIndex]
      previous_callout[3] != 255)
                      ^
Foundation/src/pcre2_compile.c:2741:53: note: Address of variable taken here.
          parsed_pattern = manage_callouts(thisptr, &previous_callout,
                                                    ^
Foundation/src/pcre2_compile.c:2741:53: note: Calling function 'manage_callouts', 2nd argument '&previous_callout' value is lifetime=previous_callout
          parsed_pattern = manage_callouts(thisptr, &previous_callout,
                                                    ^
Foundation/src/pcre2_compile.c:2514:23: note: The address of local variable 'previous_callout' is accessed at non-zero index.
      previous_callout[3] != 255)
                      ^
Foundation/src/pcre2_compile.c:2514:23: error: The address of local variable 'previous_callout' is accessed at non-zero index. [objectIndex]
      previous_callout[3] != 255)
                      ^
Foundation/src/pcre2_compile.c:2916:49: note: Address of variable taken here.
      parsed_pattern = manage_callouts(thisptr, &previous_callout, auto_callout,
                                                ^
Foundation/src/pcre2_compile.c:2916:49: note: Calling function 'manage_callouts', 2nd argument '&previous_callout' value is lifetime=previous_callout
      parsed_pattern = manage_callouts(thisptr, &previous_callout, auto_callout,
                                                ^
Foundation/src/pcre2_compile.c:2514:23: note: The address of local variable 'previous_callout' is accessed at non-zero index.
      previous_callout[3] != 255)
                      ^
Foundation/src/pcre2_compile.c:2514:23: error: The address of local variable 'previous_callout' is accessed at non-zero index. [objectIndex]
      previous_callout[3] != 255)
                      ^
Foundation/src/pcre2_compile.c:4773:39: note: Address of variable taken here.
parsed_pattern = manage_callouts(ptr, &previous_callout, auto_callout,
                                      ^
Foundation/src/pcre2_compile.c:4773:39: note: Calling function 'manage_callouts', 2nd argument '&previous_callout' value is lifetime=previous_callout
parsed_pattern = manage_callouts(ptr, &previous_callout, auto_callout,
                                      ^
Foundation/src/pcre2_compile.c:2514:23: note: The address of local variable 'previous_callout' is accessed at non-zero index.
      previous_callout[3] != 255)
                      ^
Foundation/src/pcre2_compile.c:2522:19: error: The address of local variable 'previous_callout' is accessed at non-zero index. [objectIndex]
  previous_callout[1] = (uint32_t)(ptr - cb->start_pattern);
                  ^
Foundation/src/pcre2_compile.c:2660:49: note: Address of variable taken here.
      parsed_pattern = manage_callouts(thisptr, &previous_callout,
                                                ^
Foundation/src/pcre2_compile.c:2660:49: note: Calling function 'manage_callouts', 2nd argument '&previous_callout' value is lifetime=previous_callout
      parsed_pattern = manage_callouts(thisptr, &previous_callout,
                                                ^
Foundation/src/pcre2_compile.c:2513:46: note: Assuming condition is false
      previous_callout != parsed_pattern - 4 ||
                                             ^
Foundation/src/pcre2_compile.c:2522:19: note: The address of local variable 'previous_callout' is accessed at non-zero index.
  previous_callout[1] = (uint32_t)(ptr - cb->start_pattern);
                  ^
Foundation/src/pcre2_compile.c:2522:19: error: The address of local variable 'previous_callout' is accessed at non-zero index. [objectIndex]
  previous_callout[1] = (uint32_t)(ptr - cb->start_pattern);
                  ^
Foundation/src/pcre2_compile.c:2741:53: note: Address of variable taken here.
          parsed_pattern = manage_callouts(thisptr, &previous_callout,
                                                    ^
Foundation/src/pcre2_compile.c:2741:53: note: Calling function 'manage_callouts', 2nd argument '&previous_callout' value is lifetime=previous_callout
          parsed_pattern = manage_callouts(thisptr, &previous_callout,
                                                    ^
Foundation/src/pcre2_compile.c:2513:46: note: Assuming condition is false
      previous_callout != parsed_pattern - 4 ||
                                             ^
Foundation/src/pcre2_compile.c:2522:19: note: The address of local variable 'previous_callout' is accessed at non-zero index.
  previous_callout[1] = (uint32_t)(ptr - cb->start_pattern);
                  ^
Foundation/src/pcre2_compile.c:2522:19: error: The address of local variable 'previous_callout' is accessed at non-zero index. [objectIndex]
  previous_callout[1] = (uint32_t)(ptr - cb->start_pattern);
                  ^
Foundation/src/pcre2_compile.c:2916:49: note: Address of variable taken here.
      parsed_pattern = manage_callouts(thisptr, &previous_callout, auto_callout,
                                                ^
Foundation/src/pcre2_compile.c:2916:49: note: Calling function 'manage_callouts', 2nd argument '&previous_callout' value is lifetime=previous_callout
      parsed_pattern = manage_callouts(thisptr, &previous_callout, auto_callout,
                                                ^
Foundation/src/pcre2_compile.c:2513:46: note: Assuming condition is false
      previous_callout != parsed_pattern - 4 ||
                                             ^
Foundation/src/pcre2_compile.c:2522:19: note: The address of local variable 'previous_callout' is accessed at non-zero index.
  previous_callout[1] = (uint32_t)(ptr - cb->start_pattern);
                  ^
Foundation/src/pcre2_compile.c:2522:19: error: The address of local variable 'previous_callout' is accessed at non-zero index. [objectIndex]
  previous_callout[1] = (uint32_t)(ptr - cb->start_pattern);
                  ^
Foundation/src/pcre2_compile.c:4773:39: note: Address of variable taken here.
parsed_pattern = manage_callouts(ptr, &previous_callout, auto_callout,
                                      ^
Foundation/src/pcre2_compile.c:4773:39: note: Calling function 'manage_callouts', 2nd argument '&previous_callout' value is lifetime=previous_callout
parsed_pattern = manage_callouts(ptr, &previous_callout, auto_callout,
                                      ^
Foundation/src/pcre2_compile.c:2513:46: note: Assuming condition is false
      previous_callout != parsed_pattern - 4 ||
                                             ^
Foundation/src/pcre2_compile.c:2522:19: note: The address of local variable 'previous_callout' is accessed at non-zero index.
  previous_callout[1] = (uint32_t)(ptr - cb->start_pattern);
                  ^
Foundation/src/pcre2_compile.c:9550:1: error: The address of local variable 'pptr' is accessed at non-zero index. [objectIndex]
READPLUSOFFSET(offset, bptr);  /* Offset for error messages */
^
Foundation/src/pcre2_compile.c:9290:33: note: Address of variable taken here.
    if (!set_lookbehind_lengths(&pptr, errcodeptr, lcptr, recurses, cb))
                                ^
Foundation/src/pcre2_compile.c:9290:33: note: Calling function 'set_lookbehind_lengths', 1st argument '&pptr' value is lifetime=pptr
    if (!set_lookbehind_lengths(&pptr, errcodeptr, lcptr, recurses, cb))
                                ^
Foundation/src/pcre2_compile.c:9550:1: note: The address of local variable 'pptr' is accessed at non-zero index.
READPLUSOFFSET(offset, bptr);  /* Offset for error messages */
^
Foundation/src/pcre2_compile.c:9550:1: error: The address of local variable 'pptr' is accessed at non-zero index. [objectIndex]
READPLUSOFFSET(offset, bptr);  /* Offset for error messages */
^
Foundation/src/pcre2_compile.c:9729:33: note: Address of variable taken here.
    if (!set_lookbehind_lengths(&pptr, &errorcode, lcptr, recurses, cb))
                                ^
Foundation/src/pcre2_compile.c:9729:33: note: Calling function 'set_lookbehind_lengths', 1st argument '&pptr' value is lifetime=pptr
    if (!set_lookbehind_lengths(&pptr, &errorcode, lcptr, recurses, cb))
                                ^
Foundation/src/pcre2_compile.c:9550:1: note: The address of local variable 'pptr' is accessed at non-zero index.
READPLUSOFFSET(offset, bptr);  /* Offset for error messages */
^
Foundation/src/pcre2_compile.c:1194:13: style: The scope of the variable 'ref_count' can be reduced. [variableScope]
PCRE2_SIZE* ref_count;
            ^
Foundation/src/pcre2_compile.c:1263:13: style: The scope of the variable 'ref_count' can be reduced. [variableScope]
PCRE2_SIZE* ref_count;
            ^
Foundation/src/pcre2_compile.c:5308:13: style: The scope of the variable 'groupnumber' can be reduced. [variableScope]
uint32_t i, groupnumber;
            ^
Foundation/src/pcre2_compile.c:9547:5: style: The scope of the variable 'branchlength' can be reduced. [variableScope]
int branchlength;
    ^
Foundation/src/pcre2_compile.c:10371:9: style: The scope of the variable 'p' can be reduced. [variableScope]
    int p, groupnumber;
        ^
Foundation/src/pcre2_compile.c:5416:28: style: Variable 'previous_matched_char' is assigned a value that is never used. [unreadVariable]
BOOL previous_matched_char = FALSE;
                           ^
Foundation/src/pcre2_compile.c:1315:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
read_number(PCRE2_SPTR *ptrptr, PCRE2_SPTR ptrend, int32_t allow_sign,
^
Foundation/src/pcre2_compile.c:1320:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR ptr = *ptrptr;
^
Foundation/src/pcre2_compile.c:1401:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
read_repeat_counts(PCRE2_SPTR *ptrptr, PCRE2_SPTR ptrend, uint32_t *minp,
^
Foundation/src/pcre2_compile.c:1404:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR p;
^
Foundation/src/pcre2_compile.c:1500:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PRIV(check_escape)(PCRE2_SPTR *ptrptr, PCRE2_SPTR ptrend, uint32_t *chptr,
^
Foundation/src/pcre2_compile.c:1505:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR ptr = *ptrptr;
^
Foundation/src/pcre2_compile.c:1554:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      PCRE2_SPTR p = ptr + 1;
^
Foundation/src/pcre2_compile.c:1599:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR oldptr;
^
Foundation/src/pcre2_compile.c:1642:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        PCRE2_SPTR hptr = ptr + 1;
^
Foundation/src/pcre2_compile.c:1739:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      PCRE2_SPTR p = ptr + 1;
^
Foundation/src/pcre2_compile.c:2085:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
get_ucp(PCRE2_SPTR *ptrptr, BOOL *negptr, uint16_t *ptypeptr,
^
Foundation/src/pcre2_compile.c:2090:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR ptr = *ptrptr;
^
Foundation/src/pcre2_compile.c:2291:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
check_posix_syntax(PCRE2_SPTR ptr, PCRE2_SPTR ptrend, PCRE2_SPTR *endptr)
^
Foundation/src/pcre2_compile.c:2332:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
check_posix_name(PCRE2_SPTR ptr, int len)
^
Foundation/src/pcre2_compile.c:2377:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
read_name(PCRE2_SPTR *ptrptr, PCRE2_SPTR ptrend, BOOL utf, uint32_t terminator,
^
Foundation/src/pcre2_compile.c:2378:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SIZE *offsetptr, PCRE2_SPTR *nameptr, uint32_t *namelenptr,
^
Foundation/src/pcre2_compile.c:2381:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR ptr = *ptrptr;
^
Foundation/src/pcre2_compile.c:2502:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
manage_callouts(PCRE2_SPTR ptr, uint32_t **pcalloutptr, BOOL auto_callout,
^
Foundation/src/pcre2_compile.c:2596:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static int parse_regex(PCRE2_SPTR ptr, uint32_t options, BOOL *has_lookbehind,
^
Foundation/src/pcre2_compile.c:2624:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR thisptr;
^
Foundation/src/pcre2_compile.c:2625:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR name;
^
Foundation/src/pcre2_compile.c:2626:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR ptrend = cb->end_pattern;
^
Foundation/src/pcre2_compile.c:2627:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR verbnamestart = NULL;    /* Value avoids compiler warning */
^
Foundation/src/pcre2_compile.c:2693:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR tempptr;
^
Foundation/src/pcre2_compile.c:3189:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        PCRE2_SPTR p = ptr + 1;
^
Foundation/src/pcre2_compile.c:4271:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        PCRE2_SPTR startptr = ptr;
^
Foundation/src/pcre2_compile.c:4844:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
first_significant_code(PCRE2_SPTR code, BOOL skipassert)
^
Foundation/src/pcre2_compile.c:5305:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
find_dupname_details(PCRE2_SPTR name, uint32_t length, int *indexptr,
^
Foundation/src/pcre2_compile.c:6336:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      PCRE2_SPTR name;
^
Foundation/src/pcre2_compile.c:6755:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      PCRE2_SPTR name;
^
Foundation/src/pcre2_compile.c:6865:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      PCRE2_SPTR pp;
^
Foundation/src/pcre2_compile.c:8392:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
is_anchored(PCRE2_SPTR code, uint32_t bracket_map, compile_block *cb,
^
Foundation/src/pcre2_compile.c:8396:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   PCRE2_SPTR scode = first_significant_code(
^
Foundation/src/pcre2_compile.c:8497:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
is_startline(PCRE2_SPTR code, unsigned int bracket_map, compile_block *cb,
^
Foundation/src/pcre2_compile.c:8501:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   PCRE2_SPTR scode = first_significant_code(
^
Foundation/src/pcre2_compile.c:8618:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static PCRE2_SPTR
^
Foundation/src/pcre2_compile.c:8619:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
find_recurse(PCRE2_SPTR code, BOOL utf)
^
Foundation/src/pcre2_compile.c:8775:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
find_firstassertedcu(PCRE2_SPTR code, uint32_t *flags, uint32_t inassert)
^
Foundation/src/pcre2_compile.c:8786:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   PCRE2_SPTR scode = first_significant_code(code + 1+LINK_SIZE + xl, TRUE);
^
Foundation/src/pcre2_compile.c:8880:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
add_name_to_table(compile_block *cb, PCRE2_SPTR name, int length,
^
Foundation/src/pcre2_compile.c:9308:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      PCRE2_SPTR name;
^
Foundation/src/pcre2_compile.c:9760:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
pcre2_compile(PCRE2_SPTR pattern, PCRE2_SIZE patlen, uint32_t options,
^
Foundation/src/pcre2_compile.c:9772:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR codestart;                 /* Start of compiled code */
^
Foundation/src/pcre2_compile.c:9773:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR ptr;                       /* Current pointer in pattern */
^
Foundation/src/pcre2_compile.c:10289:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
codestart = (PCRE2_SPTR)((uint8_t *)re + sizeof(pcre2_real_code)) +
^
Foundation/src/pcre2_compile.c:10362:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR rgroup;
^
Foundation/src/pcre2_compile.c:10376:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      PCRE2_SPTR search_from = codestart;
^
Foundation/src/pcre2_compile.c:10201:3: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
  fprintf(stderr, "+++Captures: %d\n", cb.bracount);
  ^
Foundation/src/pcre2_compile.c:10204:5: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
    fprintf(stderr, "+++%3d %.*s\n", ng->number, ng->length, ng->name);
    ^
Foundation/src/pcre2_compile.c:951:5: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
    fprintf(stderr, "META_CAPTURE %d", meta_arg);
    ^
Foundation/src/pcre2_compile.c:956:5: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
    fprintf(stderr, "META_RECURSE %d %zd", meta_arg, offset);
    ^
Foundation/src/pcre2_compile.c:956:5: portability: %zd in format string (no. 2) requires 'ssize_t' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_sint]
    fprintf(stderr, "META_RECURSE %d %zd", meta_arg, offset);
    ^
Foundation/src/pcre2_compile.c:964:5: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
    fprintf(stderr, "META_BACKREF %d %zd", meta_arg, offset);
    ^
Foundation/src/pcre2_compile.c:964:5: portability: %zd in format string (no. 2) requires 'ssize_t' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_sint]
    fprintf(stderr, "META_BACKREF %d %zd", meta_arg, offset);
    ^
Foundation/src/pcre2_compile.c:972:7: warning: %d in format string (no. 2) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
      fprintf(stderr, "META \\%c %d %d", (meta_arg == ESC_P)? 'P':'p',
      ^
Foundation/src/pcre2_compile.c:972:7: warning: %d in format string (no. 3) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
      fprintf(stderr, "META \\%c %d %d", (meta_arg == ESC_P)? 'P':'p',
      ^
Foundation/src/pcre2_compile.c:1039:20: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
    case META_ALT: fprintf(stderr, "META | %d", meta_arg); break;
                   ^
Foundation/src/pcre2_compile.c:1050:22: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
    case META_POSIX: fprintf(stderr, "META_POSIX %d", *pptr++); break;
                     ^
Foundation/src/pcre2_compile.c:1051:26: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
    case META_POSIX_NEG: fprintf(stderr, "META_POSIX_NEG %d", *pptr++); break;
                         ^
Foundation/src/pcre2_compile.c:1063:5: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
    fprintf(stderr, "META (?<= %d offset=", meta_arg);
    ^
Foundation/src/pcre2_compile.c:1065:5: portability: %zd in format string (no. 1) requires 'ssize_t' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_sint]
    fprintf(stderr, "%zd", offset);
    ^
Foundation/src/pcre2_compile.c:1069:5: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
    fprintf(stderr, "META (*naplb: %d offset=", meta_arg);
    ^
Foundation/src/pcre2_compile.c:1071:5: portability: %zd in format string (no. 1) requires 'ssize_t' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_sint]
    fprintf(stderr, "%zd", offset);
    ^
Foundation/src/pcre2_compile.c:1075:5: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
    fprintf(stderr, "META (?<! %d offset=", meta_arg);
    ^
Foundation/src/pcre2_compile.c:1077:5: portability: %zd in format string (no. 1) requires 'ssize_t' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_sint]
    fprintf(stderr, "%zd", offset);
    ^
Foundation/src/pcre2_compile.c:1081:5: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
    fprintf(stderr, "META (?C%d) next=%d/%d", pptr[2], pptr[0],
    ^
Foundation/src/pcre2_compile.c:1081:5: warning: %d in format string (no. 2) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
    fprintf(stderr, "META (?C%d) next=%d/%d", pptr[2], pptr[0],
    ^
Foundation/src/pcre2_compile.c:1081:5: warning: %d in format string (no. 3) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
    fprintf(stderr, "META (?C%d) next=%d/%d", pptr[2], pptr[0],
    ^
Foundation/src/pcre2_compile.c:1090:7: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
      fprintf(stderr, "META (?Cstring) length=%d offset=", *pptr++);
      ^
Foundation/src/pcre2_compile.c:1092:7: portability: %zd in format string (no. 1) requires 'ssize_t' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_sint]
      fprintf(stderr, "%zd next=%d/%d", offset, patoffset, patlength);
      ^
Foundation/src/pcre2_compile.c:1092:7: warning: %d in format string (no. 2) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
      fprintf(stderr, "%zd next=%d/%d", offset, patoffset, patlength);
      ^
Foundation/src/pcre2_compile.c:1092:7: warning: %d in format string (no. 3) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
      fprintf(stderr, "%zd next=%d/%d", offset, patoffset, patlength);
      ^
Foundation/src/pcre2_compile.c:1097:5: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
    fprintf(stderr, "META (?(&name) length=%d offset=", *pptr++);
    ^
Foundation/src/pcre2_compile.c:1099:5: portability: %zd in format string (no. 1) requires 'ssize_t' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_sint]
    fprintf(stderr, "%zd", offset);
    ^
Foundation/src/pcre2_compile.c:1103:5: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
    fprintf(stderr, "META_BACKREF_BYNAME length=%d offset=", *pptr++);
    ^
Foundation/src/pcre2_compile.c:1105:5: portability: %zd in format string (no. 1) requires 'ssize_t' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_sint]
    fprintf(stderr, "%zd", offset);
    ^
Foundation/src/pcre2_compile.c:1109:5: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
    fprintf(stderr, "META_COND_NUMBER %d offset=", pptr[SIZEOFFSET]);
    ^
Foundation/src/pcre2_compile.c:1111:5: portability: %zd in format string (no. 1) requires 'ssize_t' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_sint]
    fprintf(stderr, "%zd", offset);
    ^
Foundation/src/pcre2_compile.c:1118:5: portability: %zd in format string (no. 1) requires 'ssize_t' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_sint]
    fprintf(stderr, "%zd", offset);
    ^
Foundation/src/pcre2_compile.c:1123:5: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
    fprintf(stderr, "%d.", *pptr++);
    ^
Foundation/src/pcre2_compile.c:1124:5: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
    fprintf(stderr, "%d)", *pptr++);
    ^
Foundation/src/pcre2_compile.c:1128:5: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
    fprintf(stderr, "META (?(<name>) length=%d offset=", *pptr++);
    ^
Foundation/src/pcre2_compile.c:1130:5: portability: %zd in format string (no. 1) requires 'ssize_t' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_sint]
    fprintf(stderr, "%zd", offset);
    ^
Foundation/src/pcre2_compile.c:1134:5: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
    fprintf(stderr, "META (?(R&name) length=%d offset=", *pptr++);
    ^
Foundation/src/pcre2_compile.c:1136:5: portability: %zd in format string (no. 1) requires 'ssize_t' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_sint]
    fprintf(stderr, "%zd", offset);
    ^
Foundation/src/pcre2_compile.c:1142:5: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
    fprintf(stderr, "META (?(Rnumber) length=%d offset=", *pptr++);
    ^
Foundation/src/pcre2_compile.c:1144:5: portability: %zd in format string (no. 1) requires 'ssize_t' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_sint]
    fprintf(stderr, "%zd", offset);
    ^
Foundation/src/pcre2_compile.c:7117:0: information: Skipping configuration 'INT64_MAX;int64_t' since the value of 'int64_t' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
          if ((INT64_OR_DOUBLE)replicate*
^
Foundation/src/pcre2_compile.c:7118:0: information: Skipping configuration 'INT64_MAX;int64_t' since the value of 'int64_t' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                (INT64_OR_DOUBLE)(1 + LINK_SIZE) >
^
Foundation/src/pcre2_compile.c:7119:0: information: Skipping configuration 'INT64_MAX;int64_t' since the value of 'int64_t' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                  (INT64_OR_DOUBLE)INT_MAX ||
^
Foundation/src/pcre2_compile.c:7287:0: information: Skipping configuration 'INT64_MAX;int64_t' since the value of 'int64_t' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
              if ((INT64_OR_DOUBLE)(repeat_min - 1)*
^
Foundation/src/pcre2_compile.c:7288:0: information: Skipping configuration 'INT64_MAX;int64_t' since the value of 'int64_t' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                    (INT64_OR_DOUBLE)length_prevgroup >
^
Foundation/src/pcre2_compile.c:7289:0: information: Skipping configuration 'INT64_MAX;int64_t' since the value of 'int64_t' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                      (INT64_OR_DOUBLE)INT_MAX ||
^
Foundation/src/pcre2_compile.c:7340:0: information: Skipping configuration 'INT64_MAX;int64_t' since the value of 'int64_t' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
            if ((INT64_OR_DOUBLE)repeat_max *
^
Foundation/src/pcre2_compile.c:7341:0: information: Skipping configuration 'INT64_MAX;int64_t' since the value of 'int64_t' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                  (INT64_OR_DOUBLE)(length_prevgroup + 1 + 2 + 2*LINK_SIZE)
^
Foundation/src/pcre2_compile.c:7342:0: information: Skipping configuration 'INT64_MAX;int64_t' since the value of 'int64_t' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                    > (INT64_OR_DOUBLE)INT_MAX ||
^
Foundation/src/pcre2_compile.c:3083:7: style:inconclusive: Statements following return, break, continue, goto or throw will never be executed. [unreachableCode]
      okquantifier = TRUE;
      ^
Foundation/src/pcre2_config.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 23 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/pcre2_context.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/pcre2_convert.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/pcre2_convert.c:583:10: style: The scope of the variable 'c' can be reduced. [variableScope]
uint32_t c, prev_c;
         ^
Foundation/src/pcre2_convert.c:584:5: style: The scope of the variable 'len' can be reduced. [variableScope]
int len, class_index;
    ^
Foundation/src/pcre2_convert.c:122:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
convert_posix(uint32_t pattype, PCRE2_SPTR pattern, PCRE2_SIZE plength,
^
Foundation/src/pcre2_convert.c:127:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR posix = pattern;
^
Foundation/src/pcre2_convert.c:368:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR output_end;                /* output end */
^
Foundation/src/pcre2_convert.c:403:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR output_end = out->output_end;
^
Foundation/src/pcre2_convert.c:473:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
convert_glob_parse_class(PCRE2_SPTR *from, PCRE2_SPTR pattern_end,
^
Foundation/src/pcre2_convert.c:478:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR start = *from + 1;
^
Foundation/src/pcre2_convert.c:479:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR pattern = start;
^
Foundation/src/pcre2_convert.c:574:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
convert_glob_parse_range(PCRE2_SPTR *from, PCRE2_SPTR pattern_end,
^
Foundation/src/pcre2_convert.c:581:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR pattern = *from;
^
Foundation/src/pcre2_convert.c:582:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR char_start = NULL;
^
Foundation/src/pcre2_convert.c:784:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
convert_glob(uint32_t options, PCRE2_SPTR pattern, PCRE2_SIZE plength,
^
Foundation/src/pcre2_convert.c:789:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR pattern_start = pattern;
^
Foundation/src/pcre2_convert.c:790:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR pattern_end = pattern + plength;
^
Foundation/src/pcre2_convert.c:1054:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
pcre2_pattern_convert(PCRE2_SPTR pattern, PCRE2_SIZE plength, uint32_t options,
^
Foundation/src/pcre2_dfa_match.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/pcre2_dfa_match.c:849:48: warning:inconclusive: Found suspicious case label in switch(). Operator '&&' probably doesn't work as intended. [suspiciousCase]
        ((sizeof(coptable) == OP_TABLE_LENGTH) &&
                                               ^
Foundation/src/pcre2_dfa_match.c:351:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
do_callout(PCRE2_SPTR code, PCRE2_SIZE *offsets, PCRE2_SPTR current_subject,
^
Foundation/src/pcre2_dfa_match.c:352:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR ptr, dfa_match_block *mb, PCRE2_SIZE extracode,
^
Foundation/src/pcre2_dfa_match.c:522:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR this_start_code,
^
Foundation/src/pcre2_dfa_match.c:523:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR current_subject,
^
Foundation/src/pcre2_dfa_match.c:535:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR ptr;
^
Foundation/src/pcre2_dfa_match.c:536:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR end_code;
^
Foundation/src/pcre2_dfa_match.c:543:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR start_subject = mb->start_subject;
^
Foundation/src/pcre2_dfa_match.c:544:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR end_subject = mb->end_subject;
^
Foundation/src/pcre2_dfa_match.c:545:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR start_code = mb->start_code;
^
Foundation/src/pcre2_dfa_match.c:746:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    PCRE2_SPTR code;
^
Foundation/src/pcre2_dfa_match.c:1106:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
          PCRE2_SPTR temp = ptr - 1;
^
Foundation/src/pcre2_dfa_match.c:1131:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
            PCRE2_SPTR temp = ptr + 1;
^
Foundation/src/pcre2_dfa_match.c:2095:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        PCRE2_SPTR nptr;
^
Foundation/src/pcre2_dfa_match.c:2281:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        PCRE2_SPTR nptr = PRIV(extuni)(c, ptr + clen, mb->start_subject,
^
Foundation/src/pcre2_dfa_match.c:2621:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        PCRE2_SPTR ecode;
^
Foundation/src/pcre2_dfa_match.c:2749:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        PCRE2_SPTR endasscode = code + GET(code, 1);
^
Foundation/src/pcre2_dfa_match.c:2847:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
          PCRE2_SPTR asscode = code + LINK_SIZE + 1;
^
Foundation/src/pcre2_dfa_match.c:2848:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
          PCRE2_SPTR endasscode = asscode + GET(asscode, 1);
^
Foundation/src/pcre2_dfa_match.c:2896:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        PCRE2_SPTR callpat = start_code + GET(code, 1);
^
Foundation/src/pcre2_dfa_match.c:2958:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
              PCRE2_SPTR p = start_subject + local_offsets[rc];
^
Foundation/src/pcre2_dfa_match.c:2959:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
              PCRE2_SPTR pp = start_subject + local_offsets[rc+1];
^
Foundation/src/pcre2_dfa_match.c:2989:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        PCRE2_SPTR local_ptr = ptr;
^
Foundation/src/pcre2_dfa_match.c:3051:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
          PCRE2_SPTR end_subpattern = code;
^
Foundation/src/pcre2_dfa_match.c:3072:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
            PCRE2_SPTR p = ptr;
^
Foundation/src/pcre2_dfa_match.c:3073:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
            PCRE2_SPTR pp = local_ptr;
^
Foundation/src/pcre2_dfa_match.c:3119:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
          PCRE2_SPTR end_subpattern = code;
^
Foundation/src/pcre2_dfa_match.c:3175:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
              PCRE2_SPTR p = start_subject + local_offsets[0];
^
Foundation/src/pcre2_dfa_match.c:3176:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
              PCRE2_SPTR pp = start_subject + local_offsets[1];
^
Foundation/src/pcre2_dfa_match.c:3295:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
pcre2_dfa_match(const pcre2_code *code, PCRE2_SPTR subject, PCRE2_SIZE length,
^
Foundation/src/pcre2_dfa_match.c:3304:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR start_match;
^
Foundation/src/pcre2_dfa_match.c:3305:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR end_subject;
^
Foundation/src/pcre2_dfa_match.c:3306:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR bumpalong_limit;
^
Foundation/src/pcre2_dfa_match.c:3307:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR req_cu_ptr;
^
Foundation/src/pcre2_dfa_match.c:3314:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR memchr_found_first_cu = NULL;
^
Foundation/src/pcre2_dfa_match.c:3315:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR memchr_found_first_cu2 = NULL;
^
Foundation/src/pcre2_dfa_match.c:3345:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
if (subject == NULL && length == 0) subject = (PCRE2_SPTR)"";
^
Foundation/src/pcre2_dfa_match.c:3539:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR check_subject = start_match;  /* start_match includes offset */
^
Foundation/src/pcre2_dfa_match.c:3667:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      PCRE2_SPTR t = start_match;
^
Foundation/src/pcre2_dfa_match.c:3733:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
          PCRE2_SPTR pp1 = NULL;
^
Foundation/src/pcre2_dfa_match.c:3734:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
          PCRE2_SPTR pp2 = NULL;
^
Foundation/src/pcre2_dfa_match.c:3872:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      PCRE2_SPTR p;
^
Foundation/src/pcre2_dfa_match.c:3920:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
            PCRE2_SPTR pp = p;
^
Foundation/src/pcre2_error.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 17 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/pcre2_extuni.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 17 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/pcre2_extuni.c:87:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR
^
Foundation/src/pcre2_extuni.c:88:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PRIV(extuni)(uint32_t c, PCRE2_SPTR eptr, PCRE2_SPTR start_subject,
^
Foundation/src/pcre2_extuni.c:89:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR end_subject, BOOL utf, int *xcount)
^
Foundation/src/pcre2_extuni.c:107:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    PCRE2_SPTR bptr = eptr - 1;
^
Foundation/src/pcre2_find_bracket.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 17 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/pcre2_find_bracket.c:66:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR
^
Foundation/src/pcre2_find_bracket.c:67:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PRIV(find_bracket)(PCRE2_SPTR code, BOOL utf, int number)
^
Foundation/src/pcre2_jit_compile.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 40 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/pcre2_jit_match.c:56:1: error: Address of local auto-variable assigned to a function parameter. [autoVariables]
arguments->stack = &local_stack;
^
Foundation/src/pcre2_jit_compile.c:3019:27: style: Condition 'type==recurse_swap_global' is always false [knownConditionTrueFalse]
      if (from_sp || type == recurse_swap_global)
                          ^
Foundation/src/pcre2_jit_compile.c:3008:54: note: Assuming that condition 'type!=recurse_swap_global' is not redundant
  if (type != recurse_copy_private_to_global && type != recurse_swap_global)
                                                     ^
Foundation/src/pcre2_jit_compile.c:3019:27: note: Condition 'type==recurse_swap_global' is always false
      if (from_sp || type == recurse_swap_global)
                          ^
Foundation/src/pcre2_jit_compile.c:10001:22: style: Condition 'common->accept!=NULL' is always false [knownConditionTrueFalse]
  if (common->accept != NULL)
                     ^
Foundation/src/pcre2_jit_compile.c:9976:20: note: Assignment 'common->accept=NULL', assigned value is 0
  common->accept = NULL;
                   ^
Foundation/src/pcre2_jit_compile.c:9985:21: note: Assuming condition is false
  if (SLJIT_UNLIKELY(sljit_get_compiler_error(compiler)))
                    ^
Foundation/src/pcre2_jit_compile.c:10001:22: note: Condition 'common->accept!=NULL' is always false
  if (common->accept != NULL)
                     ^
Foundation/src/pcre2_jit_compile.c:12661:24: warning: Possible null pointer dereference: (struct bracket_backtrack*)current [nullPointer]
int private_data_ptr = CURRENT_AS(bracket_backtrack)->private_data_ptr;
                       ^
Foundation/src/pcre2_jit_compile.c:13167:16: note: Assignment 'current->top=NULL', assigned value is 0
current->top = NULL;
               ^
Foundation/src/pcre2_jit_compile.c:13174:51: note: Calling function 'compile_bracket_backtrackingpath', 2nd argument 'current->top' value is 0
  compile_bracket_backtrackingpath(common, current->top);
                                                  ^
Foundation/src/pcre2_jit_compile.c:12661:24: note: Null pointer dereference
int private_data_ptr = CURRENT_AS(bracket_backtrack)->private_data_ptr;
                       ^
Foundation/src/pcre2_jit_compile.c:12663:17: warning: Possible null pointer dereference: current [nullPointer]
PCRE2_SPTR cc = current->cc;
                ^
Foundation/src/pcre2_jit_compile.c:13167:16: note: Assignment 'current->top=NULL', assigned value is 0
current->top = NULL;
               ^
Foundation/src/pcre2_jit_compile.c:13174:51: note: Calling function 'compile_bracket_backtrackingpath', 2nd argument 'current->top' value is 0
  compile_bracket_backtrackingpath(common, current->top);
                                                  ^
Foundation/src/pcre2_jit_compile.c:12663:17: note: Null pointer dereference
PCRE2_SPTR cc = current->cc;
                ^
Foundation/src/pcre2_jit_compile.c:12847:5: warning:inconclusive: Possible null pointer dereference: current [nullPointer]
if (current->topbacktracks)
    ^
Foundation/src/pcre2_jit_compile.c:13167:16: note: Assignment 'current->top=NULL', assigned value is 0
current->top = NULL;
               ^
Foundation/src/pcre2_jit_compile.c:13174:51: note: Calling function 'compile_bracket_backtrackingpath', 2nd argument 'current->top' value is 0
  compile_bracket_backtrackingpath(common, current->top);
                                                  ^
Foundation/src/pcre2_jit_compile.c:12847:5: note: Null pointer dereference
if (current->topbacktracks)
    ^
Foundation/src/pcre2_jit_compile.c:10474:8: style: Variable 'opcode' is reassigned a value before the old one has been used. [redundantAssignment]
opcode = *cc;
       ^
Foundation/src/pcre2_jit_compile.c:10471:10: note: opcode is assigned
  opcode = *cc;
         ^
Foundation/src/pcre2_jit_compile.c:10474:8: note: opcode is overwritten
opcode = *cc;
       ^
Foundation/src/pcre2_jit_compile.c:3276:5: style: The scope of the variable 'i' can be reduced. [variableScope]
int i;
    ^
Foundation/src/pcre2_jit_compile.c:3717:20: style: The scope of the variable 'jump' can be reduced. [variableScope]
struct sljit_jump *jump;
                   ^
Foundation/src/pcre2_jit_compile.c:4119:20: style: The scope of the variable 'jump' can be reduced. [variableScope]
struct sljit_jump *jump;
                   ^
Foundation/src/pcre2_jit_compile.c:4282:21: style: The scope of the variable 'label' can be reduced. [variableScope]
struct sljit_label *label;
                    ^
Foundation/src/pcre2_jit_compile.c:6782:8: style: The scope of the variable 'byte' can be reduced. [variableScope]
int i, byte, length = 0;
       ^
Foundation/src/pcre2_jit_compile.c:6933:9: style: The scope of the variable 'byte' can be reduced. [variableScope]
uint8_t byte;
        ^
Foundation/src/pcre2_jit_compile.c:8524:10: style: The scope of the variable 'rgb' can be reduced. [variableScope]
int lgb, rgb, ricount;
         ^
Foundation/src/pcre2_jit_compile.c:8527:10: style: The scope of the variable 'c' can be reduced. [variableScope]
uint32_t c;
         ^
Foundation/src/pcre2_jit_compile.c:9430:21: style: The scope of the variable 'label' can be reduced. [variableScope]
struct sljit_label *label;
                    ^
Foundation/src/pcre2_jit_compile.c:10460:20: style: The scope of the variable 'jump' can be reduced. [variableScope]
struct sljit_jump *jump;
                   ^
Foundation/src/pcre2_jit_compile.c:10461:20: style: The scope of the variable 'skip' can be reduced. [variableScope]
struct sljit_jump *skip;
                   ^
Foundation/src/pcre2_jit_compile.c:12659:24: style: The scope of the variable 'alt_count' can be reduced. [variableScope]
int opcode, stacksize, alt_count, alt_max;
                       ^
Foundation/src/pcre2_jit_compile.c:13126:5: style: The scope of the variable 'offset' can be reduced. [variableScope]
int offset;
    ^
Foundation/src/pcre2_jit_compile.c:13127:20: style: The scope of the variable 'jump' can be reduced. [variableScope]
struct sljit_jump *jump;
                   ^
Foundation/src/pcre2_jit_compile.c:13191:21: style: The scope of the variable 'loop' can be reduced. [variableScope]
struct sljit_label *loop;
                    ^
Foundation/src/pcre2_jit_compile.c:13192:20: style: The scope of the variable 'jump' can be reduced. [variableScope]
struct sljit_jump *jump;
                   ^
Foundation/src/pcre2_jit_compile.c:10212:7: warning: Expression 'framesize-1' can have a negative value. That is converted to an unsigned value and used in an unsigned calculation. [signConversionCond]
      OP2(SLJIT_ADD, STACK_TOP, 0, STACK_TOP, 0, SLJIT_IMM, (framesize - 1) * sizeof(sljit_sw));
      ^
Foundation/src/pcre2_jit_compile.c:10207:19: note: Assuming that condition 'framesize>=0' is not redundant
    if (framesize >= 0)
                  ^
Foundation/src/pcre2_jit_compile.c:10212:7: note: Negative value is converted to an unsigned value
      OP2(SLJIT_ADD, STACK_TOP, 0, STACK_TOP, 0, SLJIT_IMM, (framesize - 1) * sizeof(sljit_sw));
      ^
Foundation/src/pcre2_jit_match.c:85:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
pcre2_jit_match(const pcre2_code *code, PCRE2_SPTR subject, PCRE2_SIZE length,
^
Foundation/src/pcre2_jit_compile.c:13854:30: style: Condition 'common->control_head_ptr!=0' is always true [knownConditionTrueFalse]
if (common->control_head_ptr != 0)
                             ^
Foundation/src/pcre2_jit_compile.c:13852:28: note: Assignment 'common->control_head_ptr=1', assigned value is 1
common->control_head_ptr = 1;
                           ^
Foundation/src/pcre2_jit_compile.c:13854:30: note: Condition 'common->control_head_ptr!=0' is always true
if (common->control_head_ptr != 0)
                             ^
Foundation/src/pcre2_jit_compile.c:6050:0: information: Skipping configuration 'JIT_HAS_FAST_FORWARD_CHAR_PAIR_SIMD;SUPPORT_JIT;PCRE2_CODE_UNIT_WIDTH' since the value of 'JIT_HAS_FAST_FORWARD_CHAR_PAIR_SIMD' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
if (JIT_HAS_FAST_FORWARD_CHAR_PAIR_SIMD && check_fast_forward_char_pair_simd(common, chars, max))
^
Foundation/src/pcre2_jit_compile.c:6258:0: information: Skipping configuration 'JIT_HAS_FAST_FORWARD_CHAR_PAIR_SIMD;SUPPORT_JIT;PCRE2_CODE_UNIT_WIDTH' since the value of 'JIT_HAS_FAST_FORWARD_CHAR_PAIR_SIMD' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  if (JIT_HAS_FAST_FORWARD_CHAR_PAIR_SIMD && common->mode == PCRE2_JIT_COMPLETE)
^
Foundation/src/pcre2_jit_compile.c:5940:0: information: Skipping configuration 'JIT_HAS_FAST_FORWARD_CHAR_SIMD;SUPPORT_JIT;PCRE2_CODE_UNIT_WIDTH' since the value of 'JIT_HAS_FAST_FORWARD_CHAR_SIMD' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
if (JIT_HAS_FAST_FORWARD_CHAR_SIMD)
^
Foundation/src/pcre2_jit_compile.c:6348:0: information: Skipping configuration 'JIT_HAS_FAST_FORWARD_CHAR_SIMD;SUPPORT_JIT;PCRE2_CODE_UNIT_WIDTH' since the value of 'JIT_HAS_FAST_FORWARD_CHAR_SIMD' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
if (JIT_HAS_FAST_FORWARD_CHAR_SIMD && (common->nltype == NLTYPE_FIXED || common->nltype == NLTYPE_ANYCRLF))
^
Foundation/src/pcre2_jit_compile.c:6518:0: information: Skipping configuration 'JIT_HAS_FAST_REQUESTED_CHAR_SIMD;SUPPORT_JIT;PCRE2_CODE_UNIT_WIDTH' since the value of 'JIT_HAS_FAST_REQUESTED_CHAR_SIMD' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
if (JIT_HAS_FAST_REQUESTED_CHAR_SIMD)
^
Foundation/src/pcre2_jit_misc.c:53:1: error: There is an unknown macro here somewhere. Configuration is required. If PRIV is a macro then please configure it. [unknownMacro]
PRIV(jit_free_rodata)(void *current, void *allocator_data)
^
Foundation/src/pcre2_maketables.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 17 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/pcre2_match.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 27 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/pcre2_match.c:356:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR p;
^
Foundation/src/pcre2_match.c:358:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR eptr;
^
Foundation/src/pcre2_match.c:359:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR eptr_start;
^
Foundation/src/pcre2_match.c:387:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    PCRE2_SPTR endptr = p + length;
^
Foundation/src/pcre2_match.c:581:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
match(PCRE2_SPTR start_eptr, PCRE2_SPTR start_ecode, PCRE2_SIZE *ovector,
^
Foundation/src/pcre2_match.c:595:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR bracode;     /* Temp pointer to start of group */
^
Foundation/src/pcre2_match.c:4325:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
          PCRE2_SPTR fptr;
^
Foundation/src/pcre2_match.c:4890:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      PCRE2_SPTR slot = mb->name_table + GET2(Fecode, 1) * mb->name_entry_size;
^
Foundation/src/pcre2_match.c:5200:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        PCRE2_SPTR next_ecode = Fecode + GET(Fecode,1);
^
Foundation/src/pcre2_match.c:5294:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        PCRE2_SPTR next_ecode = Fecode + GET(Fecode,1);
^
Foundation/src/pcre2_match.c:5347:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      PCRE2_SPTR next_ecode;
^
Foundation/src/pcre2_match.c:5539:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        PCRE2_SPTR slot = mb->name_table + GET2(Fecode, 1) * mb->name_entry_size;
^
Foundation/src/pcre2_match.c:5558:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        PCRE2_SPTR slot = mb->name_table + GET2(Fecode, 1) * mb->name_entry_size;
^
Foundation/src/pcre2_match.c:6034:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      PCRE2_SPTR lastptr = Feptr - 1;
^
Foundation/src/pcre2_match.c:6068:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      PCRE2_SPTR nextptr = Feptr + 1;
^
Foundation/src/pcre2_match.c:6295:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
pcre2_match(const pcre2_code *code, PCRE2_SPTR subject, PCRE2_SIZE length,
^
Foundation/src/pcre2_match.c:6311:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR memchr_found_first_cu;
^
Foundation/src/pcre2_match.c:6312:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR memchr_found_first_cu2;
^
Foundation/src/pcre2_match.c:6320:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR bumpalong_limit;
^
Foundation/src/pcre2_match.c:6321:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR end_subject;
^
Foundation/src/pcre2_match.c:6322:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR true_end_subject;
^
Foundation/src/pcre2_match.c:6323:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR start_match;
^
Foundation/src/pcre2_match.c:6324:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR req_cu_ptr;
^
Foundation/src/pcre2_match.c:6325:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR start_partial;
^
Foundation/src/pcre2_match.c:6326:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR match_partial;
^
Foundation/src/pcre2_match.c:6360:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR stack_frames_vector[START_FRAMES_SIZE/sizeof(PCRE2_SPTR)]
^
Foundation/src/pcre2_match.c:6366:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
if (subject == NULL && length == 0) subject = (PCRE2_SPTR)"";
^
Foundation/src/pcre2_match.c:6923:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR new_start_match;
^
Foundation/src/pcre2_match.c:6942:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      PCRE2_SPTR t = start_match;
^
Foundation/src/pcre2_match.c:7012:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
          PCRE2_SPTR pp1 = NULL;
^
Foundation/src/pcre2_match.c:7013:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
          PCRE2_SPTR pp2 = NULL;
^
Foundation/src/pcre2_match.c:7156:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      PCRE2_SPTR p;
^
Foundation/src/pcre2_match.c:7208:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
            PCRE2_SPTR pp = p;
^
Foundation/src/pcre2_match.c:223:16: portability: %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_uint]
if (P != NULL) fprintf(f, " P=%lu",
               ^
Foundation/src/pcre2_match.c:231:3: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
  fprintf(f, "Frame %d type=%x subj=%lu code=%d back=%lu id=%d",
  ^
Foundation/src/pcre2_match.c:231:3: portability: %lu in format string (no. 5) requires 'unsigned long' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_uint]
  fprintf(f, "Frame %d type=%x subj=%lu code=%d back=%lu id=%d",
  ^
Foundation/src/pcre2_match.c:238:5: portability: %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_uint]
    fprintf(f, " lgoffset=%lu\n",  Q->last_group_offset/frame_size);
    ^
Foundation/src/pcre2_match.c:678:1: warning: %d in format string (no. 2) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
fprintf(stderr, "++ RMATCH %2d frame=%d", Freturn_id, Frdepth + 1);
^
Foundation/src/pcre2_match.c:685:5: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
    fprintf(stderr, "capture=%d", GF_DATAMASK(group_frame_type));
    ^
Foundation/src/pcre2_match.c:689:5: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
    fprintf(stderr, "nocapture op=%d", GF_DATAMASK(group_frame_type));
    ^
Foundation/src/pcre2_match.c:693:5: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
    fprintf(stderr, "condassert op=%d", GF_DATAMASK(group_frame_type));
    ^
Foundation/src/pcre2_match.c:697:5: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
    fprintf(stderr, "recurse=%d", GF_DATAMASK(group_frame_type));
    ^
Foundation/src/pcre2_match.c:5735:7: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
      fprintf(stderr, "++ KET for frame=%d type=%x prev char offset=%lu\n",
      ^
Foundation/src/pcre2_match.c:5735:7: portability: %lu in format string (no. 3) requires 'unsigned long' but the argument type is 'ptrdiff_t {aka signed int}'. [invalidPrintfArgType_uint]
      fprintf(stderr, "++ KET for frame=%d type=%x prev char offset=%lu\n",
      ^
Foundation/src/pcre2_match_data.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/pcre2_match_data.c:108:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_EXP_DEFN PCRE2_SPTR PCRE2_CALL_CONVENTION
^
Foundation/src/pcre2_newline.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/pcre2_newline.c:76:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PRIV(is_newline)(PCRE2_SPTR ptr, uint32_t type, PCRE2_SPTR endptr,
^
Foundation/src/pcre2_newline.c:166:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PRIV(was_newline)(PCRE2_SPTR ptr, uint32_t type, PCRE2_SPTR startptr,
^
Foundation/src/pcre2_ord2utf.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/pcre2_pattern_info.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/pcre2_pattern_info.c:103:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    return sizeof(PCRE2_SPTR);
^
Foundation/src/pcre2_pattern_info.c:230:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  *((PCRE2_SPTR *)where) = (PCRE2_SPTR)((char *)re + sizeof(pcre2_real_code));
^
Foundation/src/pcre2_pattern_info.c:270:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR cc;
^
Foundation/src/pcre2_pattern_info.c:291:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
cc = (PCRE2_SPTR)((uint8_t *)re + sizeof(pcre2_real_code))
^
Foundation/src/pcre2_script_run.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/pcre2_script_run.c:306:11: style: The scope of the variable 'mid' can be reduced. [variableScope]
      int mid;
          ^
Foundation/src/pcre2_script_run.c:82:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PRIV(script_run)(PCRE2_SPTR ptr, PCRE2_SPTR endptr, BOOL utf)
^
Foundation/src/pcre2_serialize.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/pcre2_serialize.c:140:16: warning: Size of pointer 'dst_bytes' used instead of size of its data. [pointerSize]
  (void)memset(dst_bytes + offsetof(pcre2_real_code, tables), 0,
               ^
Foundation/src/pcre2_serialize.c:142:16: warning: Size of pointer 'dst_bytes' used instead of size of its data. [pointerSize]
  (void)memset(dst_bytes + offsetof(pcre2_real_code, executable_jit), 0,
               ^
Foundation/src/pcre2_string_utils.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/pcre2_string_utils.c:99:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PRIV(strcmp)(PCRE2_SPTR str1, PCRE2_SPTR str2)
^
Foundation/src/pcre2_string_utils.c:127:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PRIV(strcmp_c8)(PCRE2_SPTR str1, const char *str2)
^
Foundation/src/pcre2_string_utils.c:154:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PRIV(strncmp)(PCRE2_SPTR str1, PCRE2_SPTR str2, size_t len)
^
Foundation/src/pcre2_string_utils.c:183:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PRIV(strncmp_c8)(PCRE2_SPTR str1, const char *str2, size_t len)
^
Foundation/src/pcre2_string_utils.c:206:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PRIV(strlen)(PCRE2_SPTR str)
^
Foundation/src/pcre2_study.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 22 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/pcre2_study.c:498:15: style: Condition '!dupcapused' is always true [knownConditionTrueFalse]
          if (!dupcapused ||
              ^
Foundation/src/pcre2_study.c:473:9: note: Assuming that condition '!dupcapused' is not redundant
    if (!dupcapused && (re->overall_options & PCRE2_MATCH_UNSET_BACKREF) == 0)
        ^
Foundation/src/pcre2_study.c:494:18: note: Assuming condition is false
          if (cs == NULL) return -2;
                 ^
Foundation/src/pcre2_study.c:498:15: note: Condition '!dupcapused' is always true
          if (!dupcapused ||
              ^
Foundation/src/pcre2_study.c:508:22: style: Redundant initialization for 'r'. The initialized value is overwritten before it is read. [redundantInitialization]
              for (r = recurses; r != NULL; r = r->prev)
                     ^
Foundation/src/pcre2_study.c:507:32: note: r is initialized
              recurse_check *r = recurses;
                               ^
Foundation/src/pcre2_study.c:508:22: note: r is overwritten
              for (r = recurses; r != NULL; r = r->prev)
                     ^
Foundation/src/pcre2_study.c:568:20: style: Redundant initialization for 'r'. The initialized value is overwritten before it is read. [redundantInitialization]
            for (r = recurses; r != NULL; r = r->prev) if (r->group == cs) break;
                   ^
Foundation/src/pcre2_study.c:567:30: note: r is initialized
            recurse_check *r = recurses;
                             ^
Foundation/src/pcre2_study.c:568:20: note: r is overwritten
            for (r = recurses; r != NULL; r = r->prev) if (r->group == cs) break;
                   ^
Foundation/src/pcre2_study.c:654:16: style: Redundant initialization for 'r'. The initialized value is overwritten before it is read. [redundantInitialization]
        for (r = recurses; r != NULL; r = r->prev) if (r->group == cs) break;
               ^
Foundation/src/pcre2_study.c:653:26: note: r is initialized
        recurse_check *r = recurses;
                         ^
Foundation/src/pcre2_study.c:654:16: note: r is overwritten
        for (r = recurses; r != NULL; r = r->prev) if (r->group == cs) break;
               ^
Foundation/src/pcre2_study.c:486:17: style: The scope of the variable 'i' can be reduced. [variableScope]
        int dd, i;
                ^
Foundation/src/pcre2_study.c:100:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
find_minlength(const pcre2_real_code *re, PCRE2_SPTR code,
^
Foundation/src/pcre2_study.c:101:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR startcode, BOOL utf, recurse_check *recurses, int *countptr,
^
Foundation/src/pcre2_study.c:113:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR nextbranch = code + GET(code, 1);
^
Foundation/src/pcre2_study.c:777:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static PCRE2_SPTR
^
Foundation/src/pcre2_study.c:778:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
set_table_bit(pcre2_real_code *re, PCRE2_SPTR p, BOOL caseless, BOOL utf,
^
Foundation/src/pcre2_study.c:950:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
set_start_bits(pcre2_real_code *re, PCRE2_SPTR code, BOOL utf, BOOL ucp,
^
Foundation/src/pcre2_study.c:968:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR tcode = code + 1 + LINK_SIZE;
^
Foundation/src/pcre2_study.c:1515:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        PCRE2_SPTR p = tcode + 1 + LINK_SIZE + 1 + ((classmap == NULL)? 0:32);
^
Foundation/src/pcre2_substitute.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/pcre2_substitute.c:749:19: warning: Either the condition 'ptrstackptr>=20' is redundant or the array 'ptrstack[20]' is accessed at index 20, which is out of bounds. [arrayIndexOutOfBoundsCond]
          ptrstack[ptrstackptr++] = repend;
                  ^
Foundation/src/pcre2_substitute.c:747:27: note: Assuming that condition 'ptrstackptr>=20' is not redundant
          if (ptrstackptr >= PTR_STACK_SIZE) goto BAD;
                          ^
Foundation/src/pcre2_substitute.c:748:20: note: ptrstackptr is incremented', new value is 20
          ptrstack[ptrstackptr++] = ptr;
                   ^
Foundation/src/pcre2_substitute.c:749:19: note: Array index out of bounds
          ptrstack[ptrstackptr++] = repend;
                  ^
Foundation/src/pcre2_substitute.c:961:1: style: Variable 'lengthleft' is assigned a value that is never used. [unreadVariable]
CHECKMEMCPY(temp, 1);
^
Foundation/src/pcre2_substitute.c:76:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
find_text_end(const pcre2_code *code, PCRE2_SPTR *ptrptr, PCRE2_SPTR ptrend,
^
Foundation/src/pcre2_substitute.c:82:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR ptr = *ptrptr;
^
Foundation/src/pcre2_substitute.c:217:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
pcre2_substitute(const pcre2_code *code, PCRE2_SPTR subject, PCRE2_SIZE length,
^
Foundation/src/pcre2_substitute.c:219:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  pcre2_match_context *mcontext, PCRE2_SPTR replacement, PCRE2_SIZE rlength,
^
Foundation/src/pcre2_substitute.c:239:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR ptr;
^
Foundation/src/pcre2_substitute.c:240:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR repend;
^
Foundation/src/pcre2_substitute.c:266:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  replacement = (PCRE2_SPTR)"";
^
Foundation/src/pcre2_substitute.c:321:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
scb.output = (PCRE2_SPTR)buffer;
^
Foundation/src/pcre2_substitute.c:329:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  subject = (PCRE2_SPTR)"";
^
Foundation/src/pcre2_substitute.c:375:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR ptrstack[PTR_STACK_SIZE];
^
Foundation/src/pcre2_substitute.c:537:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      PCRE2_SPTR text1_start = NULL;
^
Foundation/src/pcre2_substitute.c:538:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      PCRE2_SPTR text1_end = NULL;
^
Foundation/src/pcre2_substitute.c:539:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      PCRE2_SPTR text2_start = NULL;
^
Foundation/src/pcre2_substitute.c:540:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      PCRE2_SPTR text2_end = NULL;
^
Foundation/src/pcre2_substitute.c:657:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
          PCRE2_SPTR mark = pcre2_get_mark(match_data);
^
Foundation/src/pcre2_substitute.c:660:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
            PCRE2_SPTR mark_start = mark;
^
Foundation/src/pcre2_substitute.c:674:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        PCRE2_SPTR subptr, subptrend;
^
Foundation/src/pcre2_substitute.c:683:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
          PCRE2_SPTR first, last, entry;
^
Foundation/src/pcre2_substring.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/pcre2_substring.c:70:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
pcre2_substring_copy_byname(pcre2_match_data *match_data, PCRE2_SPTR stringname,
^
Foundation/src/pcre2_substring.c:73:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR first, last, entry;
^
Foundation/src/pcre2_substring.c:159:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR stringname, PCRE2_UCHAR **stringptr, PCRE2_SIZE *sizeptr)
^
Foundation/src/pcre2_substring.c:161:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR first, last, entry;
^
Foundation/src/pcre2_substring.c:266:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR stringname, PCRE2_SIZE *sizeptr)
^
Foundation/src/pcre2_substring.c:268:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR first, last, entry;
^
Foundation/src/pcre2_substring.c:442:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
pcre2_substring_list_free(PCRE2_SPTR *list)
^
Foundation/src/pcre2_substring.c:477:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
pcre2_substring_nametable_scan(const pcre2_code *code, PCRE2_SPTR stringname,
^
Foundation/src/pcre2_substring.c:478:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR *firstptr, PCRE2_SPTR *lastptr)
^
Foundation/src/pcre2_substring.c:483:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR nametable = (PCRE2_SPTR)((char *)code + sizeof(pcre2_real_code));
^
Foundation/src/pcre2_substring.c:488:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR entry = nametable + entrysize*mid;
^
Foundation/src/pcre2_substring.c:492:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    PCRE2_SPTR first;
^
Foundation/src/pcre2_substring.c:493:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    PCRE2_SPTR last;
^
Foundation/src/pcre2_substring.c:494:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    PCRE2_SPTR lastentry;
^
Foundation/src/pcre2_substring.c:539:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  PCRE2_SPTR stringname)
^
Foundation/src/pcre2_tables.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/pcre2_ucd.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/pcre2_valid_utf.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/pcre2_valid_utf.c:92:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PRIV(valid_utf)(PCRE2_SPTR string, PCRE2_SIZE length, PCRE2_SIZE *erroroffset)
^
Foundation/src/pcre2_valid_utf.c:94:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PCRE2_SPTR p;
^
Foundation/src/pcre2_xclass.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/pcre2_xclass.c:103:9: style: Condition 'utf' is always true [knownConditionTrueFalse]
    if (utf)
        ^
Foundation/src/pcre2_xclass.c:72:7: note: Assignment 'utf=1', assigned value is 1
utf = TRUE;
      ^
Foundation/src/pcre2_xclass.c:103:9: note: Condition 'utf' is always true
    if (utf)
        ^
Foundation/src/pcre2_xclass.c:115:9: style: Condition 'utf' is always true [knownConditionTrueFalse]
    if (utf)
        ^
Foundation/src/pcre2_xclass.c:72:7: note: Assignment 'utf=1', assigned value is 1
utf = TRUE;
      ^
Foundation/src/pcre2_xclass.c:115:9: note: Condition 'utf' is always true
    if (utf)
        ^
Foundation/src/pcre2_xclass.c:65:0: information: Skipping configuration 'CUSTOM_SUBJECT_PTR' since the value of 'CUSTOM_SUBJECT_PTR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
PRIV(xclass)(uint32_t c, PCRE2_SPTR data, BOOL utf)
^
Foundation/src/string-to-double.cc:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 20 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/strtod.cc:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 22 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/trees.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 74 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/src/trees.c:710:9: style: The scope of the variable 'curlen' can be reduced. [variableScope]
    int curlen;                /* length of current code */
        ^
Foundation/src/trees.c:755:9: style: The scope of the variable 'curlen' can be reduced. [variableScope]
    int curlen;                /* length of current code */
        ^
Foundation/src/trees.c:1047:14: style: The scope of the variable 'dist' can be reduced. [variableScope]
    unsigned dist;      /* distance of matched string */
             ^
Foundation/src/trees.c:1048:9: style: The scope of the variable 'lc' can be reduced. [variableScope]
    int lc;             /* match length or unmatched char (if dist == 0) */
        ^
Foundation/src/trees.c:1049:14: style: The scope of the variable 'sx' can be reduced. [variableScope]
    unsigned sx = 0;    /* running index in sym_buf */
             ^
Foundation/src/trees.c:1050:14: style: The scope of the variable 'code' can be reduced. [variableScope]
    unsigned code;      /* the code to send */
             ^
Foundation/src/trees.c:1051:9: style: The scope of the variable 'extra' can be reduced. [variableScope]
    int extra;          /* number of extra bits to send */
        ^
Foundation/src/trees.c:362:9: warning: %u in format string (no. 1) requires 'unsigned int' but the argument type is 'int'. [invalidPrintfArgType_uint]
        fprintf(header, "%1u%s", base_length[i],
        ^
Foundation/src/trees.c:368:9: warning: %u in format string (no. 1) requires 'unsigned int' but the argument type is 'int'. [invalidPrintfArgType_uint]
        fprintf(header, "%5u%s", base_dist[i],
        ^
Foundation/src/zutil.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 100 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Foundation/testsuite/src/ActiveDispatcherTest.h:21:2: style: Class 'ActiveDispatcherTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 ActiveDispatcherTest(const std::string& name);
 ^
Foundation/testsuite/src/ActiveMethodTest.h:24:2: style: Class 'ActiveMethodTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 ActiveMethodTest(const std::string& name);
 ^
Foundation/testsuite/src/ActivityTest.h:24:2: style: Class 'ActivityTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 ActivityTest(const std::string& name);
 ^
Foundation/testsuite/src/AnyTest.cpp:236:8: style:inconclusive: Technically the member function 'testAnySwap::BigObject::operator==' can be const. [functionConst]
  bool operator==(const BigObject& other)
       ^
Foundation/testsuite/src/AnyTest.h:23:2: style: Class 'AnyTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 AnyTest(const std::string& name);
 ^
Foundation/testsuite/src/AnyTest.cpp:333:6: style: Redundant initialization for 'tmp'. The initialized value is overwritten before it is read. [redundantInitialization]
 tmp = AnyCast<int>(a);
     ^
Foundation/testsuite/src/AnyTest.cpp:331:22: note: tmp is initialized
 int POCO_UNUSED tmp = AnyCast<int>(a);
                     ^
Foundation/testsuite/src/AnyTest.cpp:333:6: note: tmp is overwritten
 tmp = AnyCast<int>(a);
     ^
Foundation/testsuite/src/AnyTest.cpp:35:31: performance: Function parameter 's' should be passed by const reference. [passedByValue]
 SomeClass(int h, std::string s): i (h), str(s)
                              ^
Foundation/testsuite/src/AnyTest.cpp:106:7: style: Variable 'ref' can be declared with const [constVariable]
 Any& ref = original;
      ^
Foundation/testsuite/src/AnyTest.cpp:348:13: style: Variable 'strRef' can be declared with const [constVariable]
 SomeClass& strRef = RefAnyCast<SomeClass>(a);
            ^
Foundation/testsuite/src/AnyTest.cpp:332:14: style: Variable 'c' is assigned a value that is never used. [unreadVariable]
 const Any c = a;
             ^
Foundation/testsuite/src/ArrayTest.h:24:2: style: Class 'ArrayTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 ArrayTest(const std::string& name);
 ^
Foundation/testsuite/src/AutoPtrTest.h:24:2: style: Class 'AutoPtrTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 AutoPtrTest(const std::string& name);
 ^
Foundation/testsuite/src/AutoPtrTest.cpp:94:8: style: Redundant initialization for 'ptr2'. The initialized value is overwritten before it is read. [redundantInitialization]
  ptr2 = new TestObj;
       ^
Foundation/testsuite/src/AutoPtrTest.cpp:92:25: note: ptr2 is initialized
  AutoPtr<TestObj> ptr2 = ptr;
                        ^
Foundation/testsuite/src/AutoPtrTest.cpp:94:8: note: ptr2 is overwritten
  ptr2 = new TestObj;
       ^
Foundation/testsuite/src/AutoPtrTest.cpp:99:8: style: Variable 'ptr3' is reassigned a value before the old one has been used. [redundantAssignment]
  ptr3 = new TestObj;
       ^
Foundation/testsuite/src/AutoPtrTest.cpp:97:8: note: ptr3 is assigned
  ptr3 = ptr2;
       ^
Foundation/testsuite/src/AutoPtrTest.cpp:99:8: note: ptr3 is overwritten
  ptr3 = new TestObj;
       ^
Foundation/testsuite/src/AutoPtrTest.cpp:101:8: style: Variable 'ptr3' is reassigned a value before the old one has been used. [redundantAssignment]
  ptr3 = ptr2;
       ^
Foundation/testsuite/src/AutoPtrTest.cpp:99:8: note: ptr3 is assigned
  ptr3 = new TestObj;
       ^
Foundation/testsuite/src/AutoPtrTest.cpp:101:8: note: ptr3 is overwritten
  ptr3 = ptr2;
       ^
Foundation/testsuite/src/AutoPtrTest.cpp:109:8: style: Variable 'ptr3' is reassigned a value before the old one has been used. [redundantAssignment]
  ptr3 = std::move(ptr4);
       ^
Foundation/testsuite/src/AutoPtrTest.cpp:101:8: note: ptr3 is assigned
  ptr3 = ptr2;
       ^
Foundation/testsuite/src/AutoPtrTest.cpp:109:8: note: ptr3 is overwritten
  ptr3 = std::move(ptr4);
       ^
Foundation/testsuite/src/AutoPtrTest.cpp:107:15: warning:inconclusive: Access of moved variable 'ptr'. [accessMoved]
  assertTrue (ptr.isNull());
              ^
Foundation/testsuite/src/AutoPtrTest.cpp:105:27: note: Calling std::move(ptr)
  AutoPtr<TestObj> ptr4 = std::move(ptr);
                          ^
Foundation/testsuite/src/AutoPtrTest.cpp:107:15: note: Access of moved variable 'ptr'.
  assertTrue (ptr.isNull());
              ^
Foundation/testsuite/src/AutoPtrTest.cpp:110:15: warning:inconclusive: Access of moved variable 'ptr4'. [accessMoved]
  assertTrue (ptr4.isNull());
              ^
Foundation/testsuite/src/AutoPtrTest.cpp:109:10: note: Calling std::move(ptr4)
  ptr3 = std::move(ptr4);
         ^
Foundation/testsuite/src/AutoPtrTest.cpp:110:15: note: Access of moved variable 'ptr4'.
  assertTrue (ptr4.isNull());
              ^
Foundation/testsuite/src/AutoReleasePoolTest.h:24:2: style: Class 'AutoReleasePoolTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 AutoReleasePoolTest(const std::string& name);
 ^
Foundation/testsuite/src/Base32Test.h:24:2: style: Class 'Base32Test' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 Base32Test(const std::string& name);
 ^
Foundation/testsuite/src/Base64Test.h:24:2: style: Class 'Base64Test' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 Base64Test(const std::string& name);
 ^
Foundation/testsuite/src/BasicEventTest.h:33:2: style: Class 'BasicEventTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 BasicEventTest(const std::string& name);
 ^
Foundation/testsuite/src/BinaryReaderWriterTest.h:26:2: style: Class 'BinaryReaderWriterTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 BinaryReaderWriterTest(const std::string& name);
 ^
Foundation/testsuite/src/ByteOrderTest.h:24:2: style: Class 'ByteOrderTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 ByteOrderTest(const std::string& name);
 ^
Foundation/testsuite/src/LRUCacheTest.h:24:2: style: Class 'LRUCacheTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 LRUCacheTest(const std::string& name);
 ^
Foundation/testsuite/src/ExpireCacheTest.h:23:2: style: Class 'ExpireCacheTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 ExpireCacheTest(const std::string& name);
 ^
Foundation/testsuite/src/ExpireLRUCacheTest.h:23:2: style: Class 'ExpireLRUCacheTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 ExpireLRUCacheTest(const std::string& name);
 ^
Foundation/testsuite/src/UniqueExpireCacheTest.h:23:2: style: Class 'UniqueExpireCacheTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 UniqueExpireCacheTest(const std::string& name);
 ^
Foundation/testsuite/src/UniqueExpireLRUCacheTest.h:23:2: style: Class 'UniqueExpireLRUCacheTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 UniqueExpireLRUCacheTest(const std::string& name);
 ^
Foundation/testsuite/src/ChannelTest.h:24:2: style: Class 'ChannelTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 ChannelTest(const std::string& name);
 ^
Foundation/testsuite/src/ChannelTest.cpp:53:2: style: Class 'LogRunnable' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 LogRunnable(AutoPtr<AsyncChannel> pAsync):
 ^
Foundation/testsuite/src/ClassLoaderTest.h:24:2: style: Class 'ClassLoaderTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 ClassLoaderTest(const std::string& name);
 ^
Foundation/testsuite/src/ClassLoaderTest.cpp:123:14: style: Variable 'pluginC' can be declared with const [constVariable]
 TestPlugin& pluginC = cl.instance("PluginC");
             ^
Foundation/testsuite/src/ClockTest.h:24:2: style: Class 'ClockTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 ClockTest(const std::string& name);
 ^
Foundation/testsuite/src/ConditionTest.h:24:2: style: Class 'ConditionTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 ConditionTest(const std::string& name);
 ^
Foundation/testsuite/src/CoreTest.cpp:115:11: warning: Member variable 'CoreTest::_readableToNot' is not initialized in the constructor. [uninitMemberVar]
CoreTest::CoreTest(const std::string& name): CppUnit::TestCase(name)
          ^
Foundation/testsuite/src/CoreTest.cpp:115:11: warning: Member variable 'CoreTest::_notToReadable' is not initialized in the constructor. [uninitMemberVar]
CoreTest::CoreTest(const std::string& name): CppUnit::TestCase(name)
          ^
Foundation/testsuite/src/CoreTest.cpp:115:11: warning: Member variable 'CoreTest::_writableToNot' is not initialized in the constructor. [uninitMemberVar]
CoreTest::CoreTest(const std::string& name): CppUnit::TestCase(name)
          ^
Foundation/testsuite/src/CoreTest.cpp:115:11: warning: Member variable 'CoreTest::_notToWritable' is not initialized in the constructor. [uninitMemberVar]
CoreTest::CoreTest(const std::string& name): CppUnit::TestCase(name)
          ^
Foundation/testsuite/src/CoreTest.h:24:2: style: Class 'CoreTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 CoreTest(const std::string& name);
 ^
Foundation/testsuite/src/CoreTest.cpp:55:3: style: Class 'ACTRunnable' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  ACTRunnable(AtomicCounter& counter):
  ^
Foundation/testsuite/src/CoreTest.cpp:1121:33: style: Parameter 'b' can be declared with const. However it seems that 'onReadable' is a callback function, if 'b' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
void CoreTest::onReadable(bool& b)
                                ^
Foundation/testsuite/src/CoreTest.cpp:759:42: note: You might need to cast the function pointer here
 f.writable -= delegate(this, &CoreTest::onReadable);
                                         ^
Foundation/testsuite/src/CoreTest.cpp:1121:33: note: Parameter 'b' can be declared with const
void CoreTest::onReadable(bool& b)
                                ^
Foundation/testsuite/src/CoreTest.cpp:1128:33: style: Parameter 'b' can be declared with const. However it seems that 'onWritable' is a callback function, if 'b' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
void CoreTest::onWritable(bool& b)
                                ^
Foundation/testsuite/src/CoreTest.cpp:438:42: note: You might need to cast the function pointer here
 f.writable += delegate(this, &CoreTest::onWritable);
                                         ^
Foundation/testsuite/src/CoreTest.cpp:1128:33: note: Parameter 'b' can be declared with const
void CoreTest::onWritable(bool& b)
                                ^
Foundation/testsuite/src/SharedPtrTest.h:24:2: style: Class 'SharedPtrTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 SharedPtrTest(const std::string& name);
 ^
Foundation/testsuite/src/StringTest.h:28:2: style: Class 'StringTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 StringTest(const std::string& name);
 ^
Foundation/testsuite/src/StringTokenizerTest.h:21:2: style: Class 'StringTokenizerTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 StringTokenizerTest(const std::string& name);
 ^
Foundation/testsuite/src/FPETest.h:24:2: style: Class 'FPETest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 FPETest(const std::string& name);
 ^
Foundation/testsuite/src/RegularExpressionTest.h:24:2: style: Class 'RegularExpressionTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 RegularExpressionTest(const std::string& name);
 ^
Foundation/testsuite/src/NDCTest.h:24:2: style: Class 'NDCTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 NDCTest(const std::string& name);
 ^
Foundation/testsuite/src/NumberFormatterTest.h:24:2: style: Class 'NumberFormatterTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 NumberFormatterTest(const std::string& name);
 ^
Foundation/testsuite/src/NumberParserTest.h:28:2: style: Class 'NumberParserTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 NumberParserTest(const std::string& name);
 ^
Foundation/testsuite/src/DynamicFactoryTest.h:24:2: style: Class 'DynamicFactoryTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 DynamicFactoryTest(const std::string& name);
 ^
Foundation/testsuite/src/MemoryPoolTest.h:24:2: style: Class 'MemoryPoolTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 MemoryPoolTest(const std::string& name);
 ^
Foundation/testsuite/src/VarTest.h:26:2: style: Class 'VarTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 VarTest(const std::string& name);
 ^
Foundation/testsuite/src/FormatTest.h:21:2: style: Class 'FormatTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 FormatTest(const std::string& name);
 ^
Foundation/testsuite/src/TuplesTest.h:24:2: style: Class 'TuplesTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 TuplesTest(const std::string& name);
 ^
Foundation/testsuite/src/NamedTuplesTest.h:24:2: style: Class 'NamedTuplesTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 NamedTuplesTest(const std::string& name);
 ^
Foundation/testsuite/src/TypeListTest.h:24:2: style: Class 'TypeListTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 TypeListTest(const std::string& name);
 ^
Foundation/testsuite/src/ObjectPoolTest.h:24:2: style: Class 'ObjectPoolTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 ObjectPoolTest(const std::string& name);
 ^
Foundation/testsuite/src/ListMapTest.h:24:2: style: Class 'ListMapTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 ListMapTest(const std::string& name);
 ^
Foundation/testsuite/src/OrderedContainersTest.h:31:2: style: Class 'OrderedContainersTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 OrderedContainersTest(const std::string& name);
 ^
Foundation/testsuite/src/VarTest.h:98:18: style: The comparison 'a1 == c1' is always true because 'a1' and 'c1' represent the same value. [knownConditionTrueFalse]
  assertTrue (a1 == c1); // silence the compiler
                 ^
Foundation/testsuite/src/VarTest.h:97:33: note: 'c1' is assigned value 'a1' here.
  const Poco::Dynamic::Var c1 = a1;
                                ^
Foundation/testsuite/src/VarTest.h:98:18: note: The comparison 'a1 == c1' is always true because 'a1' and 'c1' represent the same value.
  assertTrue (a1 == c1); // silence the compiler
                 ^
Foundation/testsuite/src/TuplesTest.h:81:20: style: Same expression on both sides of '<'. [duplicateExpression]
  assertTrue (!(t1 < t1)); // irreflexive
                   ^
Foundation/testsuite/src/CountingStreamTest.h:24:2: style: Class 'CountingStreamTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 CountingStreamTest(const std::string& name);
 ^
Foundation/testsuite/src/MD4EngineTest.h:24:2: style: Class 'MD4EngineTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 MD4EngineTest(const std::string& name);
 ^
Foundation/testsuite/src/MD5EngineTest.h:24:2: style: Class 'MD5EngineTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 MD5EngineTest(const std::string& name);
 ^
Foundation/testsuite/src/SHA1EngineTest.h:24:2: style: Class 'SHA1EngineTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 SHA1EngineTest(const std::string& name);
 ^
Foundation/testsuite/src/SHA2EngineTest.h:24:2: style: Class 'SHA2EngineTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 SHA2EngineTest(const std::string& name);
 ^
Foundation/testsuite/src/HMACEngineTest.h:24:2: style: Class 'HMACEngineTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 HMACEngineTest(const std::string& name);
 ^
Foundation/testsuite/src/PBKDF2EngineTest.h:24:2: style: Class 'PBKDF2EngineTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 PBKDF2EngineTest(const std::string& name);
 ^
Foundation/testsuite/src/DigestStreamTest.h:24:2: style: Class 'DigestStreamTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 DigestStreamTest(const std::string& name);
 ^
Foundation/testsuite/src/RandomTest.h:24:2: style: Class 'RandomTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 RandomTest(const std::string& name);
 ^
Foundation/testsuite/src/RandomStreamTest.h:24:2: style: Class 'RandomStreamTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 RandomStreamTest(const std::string& name);
 ^
Foundation/testsuite/src/DataURIStreamTest.h:23:2: style: Class 'DataURIStreamTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 DataURIStreamTest(const std::string& name);
 ^
Foundation/testsuite/src/DateTimeFormatterTest.h:24:2: style: Class 'DateTimeFormatterTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 DateTimeFormatterTest(const std::string& name);
 ^
Foundation/testsuite/src/DateTimeParserTest.h:24:2: style: Class 'DateTimeParserTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 DateTimeParserTest(const std::string& name);
 ^
Foundation/testsuite/src/DateTimeTest.h:24:2: style: Class 'DateTimeTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 DateTimeTest(const std::string& name);
 ^
Foundation/testsuite/src/TimestampTest.h:24:2: style: Class 'TimestampTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 TimestampTest(const std::string& name);
 ^
Foundation/testsuite/src/TimespanTest.h:24:2: style: Class 'TimespanTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 TimespanTest(const std::string& name);
 ^
Foundation/testsuite/src/TimezoneTest.h:24:2: style: Class 'TimezoneTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 TimezoneTest(const std::string& name);
 ^
Foundation/testsuite/src/LocalDateTimeTest.h:24:2: style: Class 'LocalDateTimeTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 LocalDateTimeTest(const std::string& name);
 ^
Foundation/testsuite/src/DirectoryIteratorsTest.h:25:2: style: Class 'DirectoryIteratorsTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 DirectoryIteratorsTest(const std::string& name);
 ^
Foundation/testsuite/src/DirectoryWatcherTest.h:32:2: style: Class 'DirectoryWatcherTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 DirectoryWatcherTest(const std::string& name);
 ^
Foundation/testsuite/src/DummyDelegate.h:23:7: performance:inconclusive: Technically the member function 'DummyDelegate::onSimple' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 void onSimple(const void* pSender, int& i);
      ^
Foundation/testsuite/src/DummyDelegate.cpp:17:21: note: Technically the member function 'DummyDelegate::onSimple' can be static (but you may consider moving to unnamed namespace).
void DummyDelegate::onSimple(const void* pSender, int& i)
                    ^
Foundation/testsuite/src/DummyDelegate.h:23:7: note: Technically the member function 'DummyDelegate::onSimple' can be static (but you may consider moving to unnamed namespace).
 void onSimple(const void* pSender, int& i);
      ^
Foundation/testsuite/src/DummyDelegate.h:24:7: performance:inconclusive: Technically the member function 'DummyDelegate::onSimple2' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 void onSimple2(const void* pSender, int& i);
      ^
Foundation/testsuite/src/DummyDelegate.cpp:25:21: note: Technically the member function 'DummyDelegate::onSimple2' can be static (but you may consider moving to unnamed namespace).
void DummyDelegate::onSimple2(const void* pSender, int& i)
                    ^
Foundation/testsuite/src/DummyDelegate.h:24:7: note: Technically the member function 'DummyDelegate::onSimple2' can be static (but you may consider moving to unnamed namespace).
 void onSimple2(const void* pSender, int& i);
      ^
Foundation/testsuite/src/DynamicFactoryTest.cpp:90:22: style: Local variable 'b' shadows outer variable [shadowVariable]
  std::unique_ptr<B> b(dynamic_cast<B*>(dynFactory.createInstance("B")));
                     ^
Foundation/testsuite/src/DynamicFactoryTest.cpp:70:21: note: Shadowed declaration
 std::unique_ptr<B> b(dynamic_cast<B*>(dynFactory.createInstance("B")));
                    ^
Foundation/testsuite/src/DynamicFactoryTest.cpp:90:22: note: Shadow variable
  std::unique_ptr<B> b(dynamic_cast<B*>(dynFactory.createInstance("B")));
                     ^
Foundation/testsuite/src/FIFOEventTest.h:33:2: style: Class 'FIFOEventTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 FIFOEventTest(const std::string& name);
 ^
Foundation/testsuite/src/PriorityEventTest.h:33:2: style: Class 'PriorityEventTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 PriorityEventTest(const std::string& name);
 ^
Foundation/testsuite/src/FIFOBufferStreamTest.cpp:24:23: warning: Member variable 'FIFOBufferStreamTest::_readableToNot' is not initialized in the constructor. [uninitMemberVar]
FIFOBufferStreamTest::FIFOBufferStreamTest(const std::string& name): CppUnit::TestCase(name)
                      ^
Foundation/testsuite/src/FIFOBufferStreamTest.cpp:24:23: warning: Member variable 'FIFOBufferStreamTest::_notToReadable' is not initialized in the constructor. [uninitMemberVar]
FIFOBufferStreamTest::FIFOBufferStreamTest(const std::string& name): CppUnit::TestCase(name)
                      ^
Foundation/testsuite/src/FIFOBufferStreamTest.cpp:24:23: warning: Member variable 'FIFOBufferStreamTest::_writableToNot' is not initialized in the constructor. [uninitMemberVar]
FIFOBufferStreamTest::FIFOBufferStreamTest(const std::string& name): CppUnit::TestCase(name)
                      ^
Foundation/testsuite/src/FIFOBufferStreamTest.cpp:24:23: warning: Member variable 'FIFOBufferStreamTest::_notToWritable' is not initialized in the constructor. [uninitMemberVar]
FIFOBufferStreamTest::FIFOBufferStreamTest(const std::string& name): CppUnit::TestCase(name)
                      ^
Foundation/testsuite/src/FIFOBufferStreamTest.h:24:2: style: Class 'FIFOBufferStreamTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 FIFOBufferStreamTest(const std::string& name);
 ^
Foundation/testsuite/src/FIFOBufferStreamTest.cpp:165:45: style: Parameter 'b' can be declared with const. However it seems that 'onReadable' is a callback function, if 'b' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
void FIFOBufferStreamTest::onReadable(bool& b)
                                            ^
Foundation/testsuite/src/FIFOBufferStreamTest.cpp:160:58: note: You might need to cast the function pointer here
 iostr.readable -= delegate(this, &FIFOBufferStreamTest::onReadable);
                                                         ^
Foundation/testsuite/src/FIFOBufferStreamTest.cpp:165:45: note: Parameter 'b' can be declared with const
void FIFOBufferStreamTest::onReadable(bool& b)
                                            ^
Foundation/testsuite/src/FIFOBufferStreamTest.cpp:172:45: style: Parameter 'b' can be declared with const. However it seems that 'onWritable' is a callback function, if 'b' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
void FIFOBufferStreamTest::onWritable(bool& b)
                                            ^
Foundation/testsuite/src/FIFOBufferStreamTest.cpp:161:58: note: You might need to cast the function pointer here
 iostr.writable -= delegate(this, &FIFOBufferStreamTest::onWritable);
                                                         ^
Foundation/testsuite/src/FIFOBufferStreamTest.cpp:172:45: note: Parameter 'b' can be declared with const
void FIFOBufferStreamTest::onWritable(bool& b)
                                            ^
Foundation/testsuite/src/FPETest.cpp:87:29: error: Invalid div() argument nr 2. The value is 0 but the valid values are ':-1,1:'. [invalidFunctionArg]
 volatile double c = div(a, b);
                            ^
Foundation/testsuite/src/FPETest.cpp:86:22: note: Assignment 'b=0', assigned value is 0
 volatile double b = 0;
                     ^
Foundation/testsuite/src/FPETest.cpp:87:29: note: Invalid argument
 volatile double c = div(a, b);
                            ^
Foundation/testsuite/src/FPETest.cpp:35:16: style: Same expression on both sides of '/'. [duplicateExpression]
  float nan = a/b;
               ^
Foundation/testsuite/src/FPETest.cpp:33:14: note: 'a' is assigned value '0.0f' here.
  float a = 0.0f;
             ^
Foundation/testsuite/src/FPETest.cpp:34:14: note: 'b' is assigned value '0.0f' here.
  float b = 0.0f;
             ^
Foundation/testsuite/src/FPETest.cpp:35:16: note: Same expression on both sides of '/'.
  float nan = a/b;
               ^
Foundation/testsuite/src/FPETest.cpp:46:17: style: Same expression on both sides of '/'. [duplicateExpression]
  double nan = a/b;
                ^
Foundation/testsuite/src/FPETest.cpp:44:14: note: 'a' is assigned value '0' here.
  double a = 0;
             ^
Foundation/testsuite/src/FPETest.cpp:45:14: note: 'b' is assigned value '0' here.
  double b = 0;
             ^
Foundation/testsuite/src/FPETest.cpp:46:17: note: Same expression on both sides of '/'.
  double nan = a/b;
                ^
Foundation/testsuite/src/FileChannelTest.h:31:2: style: Class 'FileChannelTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 FileChannelTest(const std::string& name);
 ^
Foundation/testsuite/src/FileChannelTest.cpp:482:51: style:inconclusive: Function 'purgeAge' argument 1 names different: declaration 'purgeAge' definition 'pa'. [funcArgNamesDifferent]
void FileChannelTest::purgeAge(const std::string& pa)
                                                  ^
Foundation/testsuite/src/FileChannelTest.h:61:36: note: Function 'purgeAge' argument 1 names different: declaration 'purgeAge' definition 'pa'.
  void purgeAge(const std::string& purgeAge);
                                   ^
Foundation/testsuite/src/FileChannelTest.cpp:482:51: note: Function 'purgeAge' argument 1 names different: declaration 'purgeAge' definition 'pa'.
void FileChannelTest::purgeAge(const std::string& pa)
                                                  ^
Foundation/testsuite/src/FileChannelTest.cpp:521:53: style:inconclusive: Function 'noPurgeAge' argument 1 names different: declaration 'purgeAge' definition 'npa'. [funcArgNamesDifferent]
void FileChannelTest::noPurgeAge(const std::string& npa)
                                                    ^
Foundation/testsuite/src/FileChannelTest.h:62:38: note: Function 'noPurgeAge' argument 1 names different: declaration 'purgeAge' definition 'npa'.
  void noPurgeAge(const std::string& purgeAge);
                                     ^
Foundation/testsuite/src/FileChannelTest.cpp:521:53: note: Function 'noPurgeAge' argument 1 names different: declaration 'purgeAge' definition 'npa'.
void FileChannelTest::noPurgeAge(const std::string& npa)
                                                    ^
Foundation/testsuite/src/FileChannelTest.cpp:608:55: style:inconclusive: Function 'noPurgeCount' argument 1 names different: declaration 'pc' definition 'npc'. [funcArgNamesDifferent]
void FileChannelTest::noPurgeCount(const std::string& npc)
                                                      ^
Foundation/testsuite/src/FileChannelTest.h:64:40: note: Function 'noPurgeCount' argument 1 names different: declaration 'pc' definition 'npc'.
  void noPurgeCount(const std::string& pc);
                                       ^
Foundation/testsuite/src/FileChannelTest.cpp:608:55: note: Function 'noPurgeCount' argument 1 names different: declaration 'pc' definition 'npc'.
void FileChannelTest::noPurgeCount(const std::string& npc)
                                                      ^
Foundation/testsuite/src/FileChannelTest.cpp:740:42: style: Local variable 'it' shadows outer variable [shadowVariable]
 for (std::vector<std::string>::iterator it = files.begin(); it != files.end(); ++it)
                                         ^
Foundation/testsuite/src/FileChannelTest.cpp:729:20: note: Shadowed declaration
 DirectoryIterator it(Path::current());
                   ^
Foundation/testsuite/src/FileChannelTest.cpp:740:42: note: Shadow variable
 for (std::vector<std::string>::iterator it = files.begin(); it != files.end(); ++it)
                                         ^
Foundation/testsuite/src/FileStreamTest.h:24:2: style: Class 'FileStreamTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 FileStreamTest(const std::string& name);
 ^
Foundation/testsuite/src/FileStreamTest.cpp:191:4: style: Redundant initialization for 'c'. The initialized value is overwritten before it is read. [redundantInitialization]
 c = str1.get();
   ^
Foundation/testsuite/src/FileStreamTest.cpp:186:8: note: c is initialized
 int c = str1.get();
       ^
Foundation/testsuite/src/FileStreamTest.cpp:191:4: note: c is overwritten
 c = str1.get();
   ^
Foundation/testsuite/src/FileTest.h:24:2: style: Class 'FileTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 FileTest(const std::string& name);
 ^
Foundation/testsuite/src/PathTest.h:24:2: style: Class 'PathTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 PathTest(const std::string& name);
 ^
Foundation/testsuite/src/GlobTest.h:25:2: style: Class 'GlobTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 GlobTest(const std::string& name);
 ^
Foundation/testsuite/src/HashMapTest.h:24:2: style: Class 'HashMapTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 HashMapTest(const std::string& name);
 ^
Foundation/testsuite/src/HashSetTest.h:24:2: style: Class 'HashSetTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 HashSetTest(const std::string& name);
 ^
Foundation/testsuite/src/HashTableTest.h:24:2: style: Class 'HashTableTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 HashTableTest(const std::string& name);
 ^
Foundation/testsuite/src/SimpleHashTableTest.h:24:2: style: Class 'SimpleHashTableTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 SimpleHashTableTest(const std::string& name);
 ^
Foundation/testsuite/src/LinearHashTableTest.h:24:2: style: Class 'LinearHashTableTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 LinearHashTableTest(const std::string& name);
 ^
Foundation/testsuite/src/HexBinaryTest.h:24:2: style: Class 'HexBinaryTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 HexBinaryTest(const std::string& name);
 ^
Foundation/testsuite/src/LRUCacheTest.cpp:23:15: warning: Member variable 'LRUCacheTest::addCnt' is not initialized in the constructor. [uninitMemberVar]
LRUCacheTest::LRUCacheTest(const std::string& name): CppUnit::TestCase(name)
              ^
Foundation/testsuite/src/LRUCacheTest.cpp:23:15: warning: Member variable 'LRUCacheTest::updateCnt' is not initialized in the constructor. [uninitMemberVar]
LRUCacheTest::LRUCacheTest(const std::string& name): CppUnit::TestCase(name)
              ^
Foundation/testsuite/src/LRUCacheTest.cpp:23:15: warning: Member variable 'LRUCacheTest::removeCnt' is not initialized in the constructor. [uninitMemberVar]
LRUCacheTest::LRUCacheTest(const std::string& name): CppUnit::TestCase(name)
              ^
Foundation/testsuite/src/LineEndingConverterTest.h:24:2: style: Class 'LineEndingConverterTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 LineEndingConverterTest(const std::string& name);
 ^
Foundation/testsuite/src/LinearHashTableTest.cpp:248:6: warning: Return value of function s.find() is not used. [ignoredReturnValue]
   s.find(i);
     ^
Foundation/testsuite/src/LinearHashTableTest.cpp:325:6: warning: Return value of function s.find() is not used. [ignoredReturnValue]
   s.find(values[i]);
     ^
Foundation/testsuite/src/LocalDateTimeTest.cpp:432:10: style: Variable 'then' is reassigned a value before the old one has been used. [redundantAssignment]
    then = *std::gmtime(&t);
         ^
Foundation/testsuite/src/LocalDateTimeTest.cpp:419:10: note: then is assigned
    then = *std::localtime(&t);
         ^
Foundation/testsuite/src/LocalDateTimeTest.cpp:432:10: note: then is overwritten
    then = *std::gmtime(&t);
         ^
Foundation/testsuite/src/LocalDateTimeTest.cpp:114:6: style: Variable 'dt3' is assigned a value that is never used. [unreadVariable]
 dt3 = dt1;
     ^
Foundation/testsuite/src/LogStreamTest.h:24:2: style: Class 'LogStreamTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 LogStreamTest(const std::string& name);
 ^
Foundation/testsuite/src/LoggerTest.h:24:2: style: Class 'LoggerTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 LoggerTest(const std::string& name);
 ^
Foundation/testsuite/src/LoggingFactoryTest.h:24:2: style: Class 'LoggingFactoryTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 LoggingFactoryTest(const std::string& name);
 ^
Foundation/testsuite/src/LoggingRegistryTest.h:24:2: style: Class 'LoggingRegistryTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 LoggingRegistryTest(const std::string& name);
 ^
Foundation/testsuite/src/PatternFormatterTest.h:24:2: style: Class 'PatternFormatterTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 PatternFormatterTest(const std::string& name);
 ^
Foundation/testsuite/src/SimpleFileChannelTest.h:24:2: style: Class 'SimpleFileChannelTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 SimpleFileChannelTest(const std::string& name);
 ^
Foundation/testsuite/src/ManifestTest.h:24:2: style: Class 'ManifestTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 ManifestTest(const std::string& name);
 ^
Foundation/testsuite/src/MemoryStreamTest.h:24:2: style: Class 'MemoryStreamTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 MemoryStreamTest(const std::string& name);
 ^
Foundation/testsuite/src/NamedEventTest.h:24:2: style: Class 'NamedEventTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 NamedEventTest(const std::string& name);
 ^
Foundation/testsuite/src/NamedMutexTest.h:24:2: style: Class 'NamedMutexTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 NamedMutexTest(const std::string& name);
 ^
Foundation/testsuite/src/NotificationCenterTest.h:30:2: style: Class 'NotificationCenterTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 NotificationCenterTest(const std::string& name);
 ^
Foundation/testsuite/src/NotificationCenterTest.cpp:165:27: style: Variable 'nf' is assigned a value that is never used. [unreadVariable]
 AutoPtr<Notification> nf = pNf;
                          ^
Foundation/testsuite/src/NotificationCenterTest.cpp:173:27: style: Variable 'nf' is assigned a value that is never used. [unreadVariable]
 AutoPtr<Notification> nf = pNf;
                          ^
Foundation/testsuite/src/NotificationCenterTest.cpp:181:27: style: Variable 'nf' is assigned a value that is never used. [unreadVariable]
 AutoPtr<Notification> nf = pNf;
                          ^
Foundation/testsuite/src/NotificationCenterTest.cpp:189:31: style: Variable 'nf' is assigned a value that is never used. [unreadVariable]
 AutoPtr<TestNotification> nf = pNf;
                              ^
Foundation/testsuite/src/NotificationQueueTest.h:27:2: style: Class 'NotificationQueueTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 NotificationQueueTest(const std::string& name);
 ^
Foundation/testsuite/src/NotificationQueueTest.cpp:33:3: style: Class 'QTestNotification' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  QTestNotification(const std::string& data): _data(data)
  ^
Foundation/testsuite/src/PriorityNotificationQueueTest.h:27:2: style: Class 'PriorityNotificationQueueTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 PriorityNotificationQueueTest(const std::string& name);
 ^
Foundation/testsuite/src/TimedNotificationQueueTest.h:27:2: style: Class 'TimedNotificationQueueTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 TimedNotificationQueueTest(const std::string& name);
 ^
Foundation/testsuite/src/NullStreamTest.h:24:2: style: Class 'NullStreamTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 NullStreamTest(const std::string& name);
 ^
Foundation/testsuite/src/OrderedContainersTest.cpp:66:17: performance:inconclusive: Technically the member function 'custom_allocator < std :: pair < int , int > >::address' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  const_pointer address(const_reference x) const noexcept
                ^
Foundation/testsuite/src/OrderedContainersTest.cpp:84:8: performance:inconclusive: Technically the member function 'custom_allocator < std :: pair < int , int > >::deallocate' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  void deallocate(T*p, size_type /*n*/)
       ^
Foundation/testsuite/src/OrderedContainersTest.cpp:89:13: performance:inconclusive: Technically the member function 'custom_allocator < std :: pair < int , int > >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  size_type max_size() const noexcept
            ^
Foundation/testsuite/src/OrderedContainersTest.cpp:101:8: performance:inconclusive: Technically the member function 'custom_allocator < std :: pair < int , int > >::destroy' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  void destroy(U*p)
       ^
Foundation/testsuite/src/OrderedContainersTest.cpp:57:3: style: Class 'custom_allocator < std :: pair < int , int > >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  custom_allocator(const custom_allocator<U> &)
  ^
Foundation/testsuite/src/OrderedContainersTest.cpp:676:11: style: Redundant initialization for 'map_move'. The initialized value is overwritten before it is read. [redundantInitialization]
 map_move = std::move(map);
          ^
Foundation/testsuite/src/OrderedContainersTest.cpp:675:16: note: map_move is initialized
 HMap map_move = utils::get_filled_hash_map<HMap>(1);
               ^
Foundation/testsuite/src/OrderedContainersTest.cpp:676:11: note: map_move is overwritten
 map_move = std::move(map);
          ^
Foundation/testsuite/src/OrderedContainersTest.cpp:123:65: style:inconclusive: Function 'OrderedContainersTest' argument 1 names different: declaration 'name' definition 'rName'. [funcArgNamesDifferent]
OrderedContainersTest::OrderedContainersTest(const std::string& rName): CppUnit::TestCase(rName)
                                                                ^
Foundation/testsuite/src/OrderedContainersTest.h:31:43: note: Function 'OrderedContainersTest' argument 1 names different: declaration 'name' definition 'rName'.
 OrderedContainersTest(const std::string& name);
                                          ^
Foundation/testsuite/src/OrderedContainersTest.cpp:123:65: note: Function 'OrderedContainersTest' argument 1 names different: declaration 'name' definition 'rName'.
OrderedContainersTest::OrderedContainersTest(const std::string& rName): CppUnit::TestCase(rName)
                                                                ^
Foundation/testsuite/src/OrderedContainersTest.cpp:654:13: warning: Access of moved variable 'map'. [accessMoved]
 assertTrue(map == (HMap()));
            ^
Foundation/testsuite/src/OrderedContainersTest.cpp:651:16: note: Calling std::move(map)
 HMap map_move(std::move(map));
               ^
Foundation/testsuite/src/OrderedContainersTest.cpp:654:13: note: Access of moved variable 'map'.
 assertTrue(map == (HMap()));
            ^
Foundation/testsuite/src/OrderedContainersTest.cpp:679:13: warning: Access of moved variable 'map'. [accessMoved]
 assertTrue(map == (HMap()));
            ^
Foundation/testsuite/src/OrderedContainersTest.cpp:676:13: note: Calling std::move(map)
 map_move = std::move(map);
            ^
Foundation/testsuite/src/OrderedContainersTest.cpp:679:13: note: Access of moved variable 'map'.
 assertTrue(map == (HMap()));
            ^
Foundation/testsuite/src/OrderedContainersTest.cpp:700:15: warning:inconclusive: Access of moved variable 'map'. [accessMoved]
 assertEquals(map.size(), 0);
              ^
Foundation/testsuite/src/OrderedContainersTest.cpp:697:16: note: Calling std::move(map)
 HMap map_move(std::move(map));
               ^
Foundation/testsuite/src/OrderedContainersTest.cpp:700:15: note: Access of moved variable 'map'.
 assertEquals(map.size(), 0);
              ^
Foundation/testsuite/src/OrderedContainersTest.cpp:715:15: warning:inconclusive: Access of moved variable 'map'. [accessMoved]
 assertEquals(map.size(), 0);
              ^
Foundation/testsuite/src/OrderedContainersTest.cpp:712:18: note: Calling std::move(map)
 HMap map_move = std::move(map);
                 ^
Foundation/testsuite/src/OrderedContainersTest.cpp:715:15: note: Access of moved variable 'map'.
 assertEquals(map.size(), 0);
              ^
Foundation/testsuite/src/OrderedContainersTest.cpp:558:2: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
 it++;
 ^
Foundation/testsuite/src/OrderedContainersTest.cpp:568:2: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
 it--;
 ^
Foundation/testsuite/src/PathTest.cpp:1452:12: style: Local variable 'i' shadows outer variable [shadowVariable]
  for (int i = 0; i < len; ++i) s += r.nextChar();
           ^
Foundation/testsuite/src/PathTest.cpp:1448:11: note: Shadowed declaration
 for (int i = 0; i < 256; ++i)
          ^
Foundation/testsuite/src/PathTest.cpp:1452:12: note: Shadow variable
  for (int i = 0; i < len; ++i) s += r.nextChar();
           ^
Foundation/testsuite/src/PathTest.cpp:1393:4: style: Variable 'p' is assigned a value that is never used. [unreadVariable]
 p = s;
   ^
Foundation/testsuite/src/PathTest.cpp:1555:2: style:inconclusive: Statements following return, break, continue, goto or throw will never be executed. [unreachableCode]
 bool found = Path::find(Environment::get("PATH"), "cmd.exe", p);
 ^
Foundation/testsuite/src/PriorityNotificationQueueTest.cpp:33:3: style: Class 'QTestNotification' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  QTestNotification(const std::string& data): _data(data)
  ^
Foundation/testsuite/src/ProcessTest.h:24:2: style: Class 'ProcessTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 ProcessTest(const std::string& name);
 ^
Foundation/testsuite/src/SharedMemoryTest.h:25:2: style: Class 'SharedMemoryTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 SharedMemoryTest(const std::string& name);
 ^
Foundation/testsuite/src/RWLockTest.h:24:2: style: Class 'RWLockTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 RWLockTest(const std::string& name);
 ^
Foundation/testsuite/src/RWLockTest.cpp:39:7: style: The scope of the variable 'lastCount' can be reduced. [variableScope]
  int lastCount = 0;
      ^
Foundation/testsuite/src/RWLockTest.cpp:97:7: style: The scope of the variable 'lastCount' can be reduced. [variableScope]
  int lastCount = 0;
      ^
Foundation/testsuite/src/RWLockTest.cpp:39:17: style: Variable 'lastCount' is assigned a value that is never used. [unreadVariable]
  int lastCount = 0;
                ^
Foundation/testsuite/src/RWLockTest.cpp:97:17: style: Variable 'lastCount' is assigned a value that is never used. [unreadVariable]
  int lastCount = 0;
                ^
Foundation/testsuite/src/SHA2EngineTest.cpp:25:51: style:inconclusive: Function 'SHA2EngineTest' argument 1 names different: declaration 'name' definition 'rName'. [funcArgNamesDifferent]
SHA2EngineTest::SHA2EngineTest(const std::string& rName): CppUnit::TestCase(rName)
                                                  ^
Foundation/testsuite/src/SHA2EngineTest.h:24:36: note: Function 'SHA2EngineTest' argument 1 names different: declaration 'name' definition 'rName'.
 SHA2EngineTest(const std::string& name);
                                   ^
Foundation/testsuite/src/SHA2EngineTest.cpp:25:51: note: Function 'SHA2EngineTest' argument 1 names different: declaration 'name' definition 'rName'.
SHA2EngineTest::SHA2EngineTest(const std::string& rName): CppUnit::TestCase(rName)
                                                  ^
Foundation/testsuite/src/SemaphoreTest.h:24:2: style: Class 'SemaphoreTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 SemaphoreTest(const std::string& name);
 ^
Foundation/testsuite/src/SharedLibraryTest.h:24:2: style: Class 'SharedLibraryTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 SharedLibraryTest(const std::string& name);
 ^
Foundation/testsuite/src/SharedPtrTest.cpp:37:22: style:inconclusive: Technically the member function '::TestObject::data' can be const. [functionConst]
  const std::string& data()
                     ^
Foundation/testsuite/src/SharedPtrTest.cpp:27:3: style: Class 'TestObject' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  TestObject(const std::string& data): _data(data)
  ^
Foundation/testsuite/src/SharedPtrTest.cpp:154:7: style: Variable 'ptr3' is assigned a value that is never used. [unreadVariable]
 ptr3 = 0;
      ^
Foundation/testsuite/src/SharedPtrTest.cpp:155:7: style: Variable 'ptr4' is assigned a value that is never used. [unreadVariable]
 ptr4 = 0;
      ^
Foundation/testsuite/src/SharedPtrTest.cpp:159:29: style: Variable 'ptr' is assigned a value that is never used. [unreadVariable]
  SharedPtr<TestObject> ptr = new TestObject("");
                            ^
Foundation/testsuite/src/SharedPtrTest.cpp:172:30: style: Variable 'ptr1' is assigned a value that is never used. [unreadVariable]
  SharedPtr<TestObject> ptr1 = ptr2;
                             ^
Foundation/testsuite/src/SharedPtrTest.cpp:177:30: style: Variable 'ptr1' is assigned a value that is never used. [unreadVariable]
  SharedPtr<TestObject> ptr1 = ptr2;
                             ^
Foundation/testsuite/src/SharedPtrTest.cpp:183:7: style: Variable 'ptr1' is assigned a value that is never used. [unreadVariable]
 ptr1 = 0;
      ^
Foundation/testsuite/src/SimpleFileChannelTest.cpp:95:42: style: Local variable 'it' shadows outer variable [shadowVariable]
 for (std::vector<std::string>::iterator it = files.begin(); it != files.end(); ++it)
                                         ^
Foundation/testsuite/src/SimpleFileChannelTest.cpp:84:20: note: Shadowed declaration
 DirectoryIterator it(Path::current());
                   ^
Foundation/testsuite/src/SimpleFileChannelTest.cpp:95:42: note: Shadow variable
 for (std::vector<std::string>::iterator it = files.begin(); it != files.end(); ++it)
                                         ^
Foundation/testsuite/src/StopwatchTest.h:24:2: style: Class 'StopwatchTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 StopwatchTest(const std::string& name);
 ^
Foundation/testsuite/src/StreamConverterTest.h:24:2: style: Class 'StreamConverterTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 StreamConverterTest(const std::string& name);
 ^
Foundation/testsuite/src/StreamCopierTest.h:24:2: style: Class 'StreamCopierTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 StreamCopierTest(const std::string& name);
 ^
Foundation/testsuite/src/StreamTokenizerTest.h:24:2: style: Class 'StreamTokenizerTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 StreamTokenizerTest(const std::string& name);
 ^
Foundation/testsuite/src/ZLibTest.h:24:2: style: Class 'ZLibTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 ZLibTest(const std::string& name);
 ^
Foundation/testsuite/src/TeeStreamTest.h:24:2: style: Class 'TeeStreamTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 TeeStreamTest(const std::string& name);
 ^
Foundation/testsuite/src/StringTest.cpp:773:20: style: The comparison 'ou == 0' is always true. [knownConditionTrueFalse]
    assertTrue (ou == 0);
                   ^
Foundation/testsuite/src/StringTest.cpp:770:15: note: 'ou' is assigned value '0' here.
    char ou = 0;
              ^
Foundation/testsuite/src/StringTest.cpp:773:20: note: The comparison 'ou == 0' is always true.
    assertTrue (ou == 0);
                   ^
Foundation/testsuite/src/StringTest.cpp:1123:15: style: The scope of the variable 'ti' can be reduced. [variableScope]
 unsigned int ti = -1;
              ^
Foundation/testsuite/src/StringTest.cpp:79:43: style:inconclusive: Function 'StringTest' argument 1 names different: declaration 'name' definition 'rName'. [funcArgNamesDifferent]
StringTest::StringTest(const std::string& rName): CppUnit::TestCase(rName)
                                          ^
Foundation/testsuite/src/StringTest.h:28:32: note: Function 'StringTest' argument 1 names different: declaration 'name' definition 'rName'.
 StringTest(const std::string& name);
                               ^
Foundation/testsuite/src/StringTest.cpp:79:43: note: Function 'StringTest' argument 1 names different: declaration 'name' definition 'rName'.
StringTest::StringTest(const std::string& rName): CppUnit::TestCase(rName)
                                          ^
Foundation/testsuite/src/StringTest.cpp:98:15: style: Local variable 's' shadows outer variable [shadowVariable]
  std::string s = "  ab c ";
              ^
Foundation/testsuite/src/StringTest.cpp:95:15: note: Shadowed declaration
  std::string s = " abc ";
              ^
Foundation/testsuite/src/StringTest.cpp:98:15: note: Shadow variable
  std::string s = "  ab c ";
              ^
Foundation/testsuite/src/StringTest.cpp:102:15: style: Local variable 's' shadows outer variable [shadowVariable]
  std::string s;
              ^
Foundation/testsuite/src/StringTest.cpp:95:15: note: Shadowed declaration
  std::string s = " abc ";
              ^
Foundation/testsuite/src/StringTest.cpp:102:15: note: Shadow variable
  std::string s;
              ^
Foundation/testsuite/src/TaskManagerTest.h:30:2: style: Class 'TaskManagerTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 TaskManagerTest(const std::string& name);
 ^
Foundation/testsuite/src/TaskManagerTest.cpp:210:3: style: Class 'CustomTaskObserver < int >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  CustomTaskObserver(const C& custom): _custom(custom)
  ^
Foundation/testsuite/src/TaskManagerTest.cpp:210:3: style: Class 'CustomTaskObserver < std :: string >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  CustomTaskObserver(const C& custom): _custom(custom)
  ^
Foundation/testsuite/src/TaskManagerTest.cpp:210:3: style: Class 'CustomTaskObserver < S * >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  CustomTaskObserver(const C& custom): _custom(custom)
  ^
Foundation/testsuite/src/TaskManagerTest.cpp:210:3: style: Class 'CustomTaskObserver < S >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  CustomTaskObserver(const C& custom): _custom(custom)
  ^
Foundation/testsuite/src/TaskManagerTest.cpp:184:3: style: Class 'CustomNotificationTask < int >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  CustomNotificationTask(const T& t):
  ^
Foundation/testsuite/src/TaskManagerTest.cpp:184:3: style: Class 'CustomNotificationTask < std :: string >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  CustomNotificationTask(const T& t):
  ^
Foundation/testsuite/src/TaskManagerTest.cpp:184:3: style: Class 'CustomNotificationTask < S * >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  CustomNotificationTask(const T& t):
  ^
Foundation/testsuite/src/TaskManagerTest.cpp:184:3: style: Class 'CustomNotificationTask < S >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  CustomNotificationTask(const T& t):
  ^
Foundation/testsuite/src/TaskTest.h:24:2: style: Class 'TaskTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 TaskTest(const std::string& name);
 ^
Foundation/testsuite/src/TestLibrary.cpp:73:1: error: There is an unknown macro here somewhere. Configuration is required. If POCO_BEGIN_MANIFEST is a macro then please configure it. [unknownMacro]
POCO_BEGIN_MANIFEST(TestPlugin)
^
Foundation/testsuite/src/TextBufferIteratorTest.h:24:2: style: Class 'TextBufferIteratorTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 TextBufferIteratorTest(const std::string& name);
 ^
Foundation/testsuite/src/TextConverterTest.h:24:2: style: Class 'TextConverterTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 TextConverterTest(const std::string& name);
 ^
Foundation/testsuite/src/TextConverterTest.cpp:156:9: style: Variable 'errors' is assigned a value that is never used. [unreadVariable]
 errors = converter.convert("abcde", 5, result1);
        ^
Foundation/testsuite/src/TextEncodingTest.h:24:2: style: Class 'TextEncodingTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 TextEncodingTest(const std::string& name);
 ^
Foundation/testsuite/src/TextIteratorTest.h:24:2: style: Class 'TextIteratorTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 TextIteratorTest(const std::string& name);
 ^
Foundation/testsuite/src/UTF8StringTest.h:24:2: style: Class 'UTF8StringTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 UTF8StringTest(const std::string& name);
 ^
Foundation/testsuite/src/UnicodeConverterTest.h:27:2: style: Class 'UnicodeConverterTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 UnicodeConverterTest(const std::string& name);
 ^
Foundation/testsuite/src/ThreadLocalTest.cpp:27:2: warning: Member variable 'TLTestRunnable::_result' is not initialized in the constructor. [uninitMemberVar]
 TLTestRunnable(int n): _n(n)
 ^
Foundation/testsuite/src/ThreadLocalTest.h:24:2: style: Class 'ThreadLocalTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 ThreadLocalTest(const std::string& name);
 ^
Foundation/testsuite/src/ThreadLocalTest.cpp:27:2: style: Class 'TLTestRunnable' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 TLTestRunnable(int n): _n(n)
 ^
Foundation/testsuite/src/ThreadPoolTest.cpp:25:17: warning: Member variable 'ThreadPoolTest::_count' is not initialized in the constructor. [uninitMemberVar]
ThreadPoolTest::ThreadPoolTest(const std::string& name): CppUnit::TestCase(name), _event(false)
                ^
Foundation/testsuite/src/ThreadPoolTest.h:26:2: style: Class 'ThreadPoolTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 ThreadPoolTest(const std::string& name);
 ^
Foundation/testsuite/src/ThreadTest.cpp:391:7: style:inconclusive: Technically the member function 'Functor::operator()' can be const. [functionConst]
 void operator () ()
      ^
Foundation/testsuite/src/ThreadTest.h:24:2: style: Class 'ThreadTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 ThreadTest(const std::string& name);
 ^
Foundation/testsuite/src/TimerTest.h:26:2: style: Class 'TimerTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 TimerTest(const std::string& name);
 ^
Foundation/testsuite/src/TimedNotificationQueueTest.cpp:31:3: style: Class 'QTestNotification' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  QTestNotification(const std::string& data): _data(data)
  ^
Foundation/testsuite/src/TimerTest.cpp:82:32: style:inconclusive: Function 'onTimer' argument 1 names different: declaration 't' definition 'timer'. [funcArgNamesDifferent]
void TimerTest::onTimer(Timer& timer)
                               ^
Foundation/testsuite/src/TimerTest.h:38:28: note: Function 'onTimer' argument 1 names different: declaration 't' definition 'timer'.
 void onTimer(Poco::Timer& t);
                           ^
Foundation/testsuite/src/TimerTest.cpp:82:32: note: Function 'onTimer' argument 1 names different: declaration 't' definition 'timer'.
void TimerTest::onTimer(Timer& timer)
                               ^
Foundation/testsuite/src/TimestampTest.cpp:72:13: style: Local variable 'now' shadows outer variable [shadowVariable]
  Timestamp now;
            ^
Foundation/testsuite/src/TimestampTest.cpp:64:12: note: Shadowed declaration
 Timestamp now;
           ^
Foundation/testsuite/src/TimestampTest.cpp:72:13: note: Shadow variable
  Timestamp now;
            ^
Foundation/testsuite/src/URIStreamOpenerTest.h:24:2: style: Class 'URIStreamOpenerTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 URIStreamOpenerTest(const std::string& name);
 ^
Foundation/testsuite/src/URIStreamOpenerTest.cpp:69:24: style: Variable 'uriString' is assigned a value that is never used. [unreadVariable]
 std::string uriString = uri.toString();
                       ^
Foundation/testsuite/src/URIStreamOpenerTest.cpp:89:24: style: Variable 'uriString' is assigned a value that is never used. [unreadVariable]
 std::string uriString = uri.toString();
                       ^
Foundation/testsuite/src/URITest.h:24:2: style: Class 'URITest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 URITest(const std::string& name);
 ^
Foundation/testsuite/src/UUIDGeneratorTest.h:24:2: style: Class 'UUIDGeneratorTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 UUIDGeneratorTest(const std::string& name);
 ^
Foundation/testsuite/src/UUIDTest.h:24:2: style: Class 'UUIDTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 UUIDTest(const std::string& name);
 ^
Foundation/testsuite/src/VarTest.cpp:51:7: style:inconclusive: Technically the member function '::Dummy::operator==' can be const. [functionConst]
 bool operator == (int i)
      ^
Foundation/testsuite/src/VarTest.cpp:42:2: style: Class 'Dummy' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 Dummy(int val): _val(val)
 ^
Foundation/testsuite/src/VarTest.cpp:3100:5: style: Variable 'v' is reassigned a value before the old one has been used. [redundantAssignment]
  v = v1;
    ^
Foundation/testsuite/src/VarTest.cpp:3098:5: note: v is assigned
  v = p;
    ^
Foundation/testsuite/src/VarTest.cpp:3100:5: note: v is overwritten
  v = v1;
    ^
Foundation/testsuite/src/VarTest.cpp:1704:16: style: The comparison '1 == any1' is always true. [knownConditionTrueFalse]
 assertTrue (1 == any1);
               ^
Foundation/testsuite/src/VarTest.cpp:1700:13: note: 'any1' is assigned value '1' here.
 Var any1 = 1;
            ^
Foundation/testsuite/src/VarTest.cpp:1704:16: note: The comparison '1 == any1' is always true.
 assertTrue (1 == any1);
               ^
Foundation/testsuite/src/VarTest.cpp:1708:16: style: The comparison '1 >= any1' is always true. [knownConditionTrueFalse]
 assertTrue (1 >= any1);
               ^
Foundation/testsuite/src/VarTest.cpp:1700:13: note: 'any1' is assigned value '1' here.
 Var any1 = 1;
            ^
Foundation/testsuite/src/VarTest.cpp:1708:16: note: The comparison '1 >= any1' is always true.
 assertTrue (1 >= any1);
               ^
Foundation/testsuite/src/VarTest.cpp:1716:16: style: The comparison '1 <= any1' is always true. [knownConditionTrueFalse]
 assertTrue (1 <= any1);
               ^
Foundation/testsuite/src/VarTest.cpp:1700:13: note: 'any1' is assigned value '1' here.
 Var any1 = 1;
            ^
Foundation/testsuite/src/VarTest.cpp:1716:16: note: The comparison '1 <= any1' is always true.
 assertTrue (1 <= any1);
               ^
Foundation/testsuite/src/VarTest.cpp:63:37: style:inconclusive: Function 'VarTest' argument 1 names different: declaration 'name' definition 'rName'. [funcArgNamesDifferent]
VarTest::VarTest(const std::string& rName): CppUnit::TestCase(rName)
                                    ^
Foundation/testsuite/src/VarTest.h:26:29: note: Function 'VarTest' argument 1 names different: declaration 'name' definition 'rName'.
 VarTest(const std::string& name);
                            ^
Foundation/testsuite/src/VarTest.cpp:63:37: note: Function 'VarTest' argument 1 names different: declaration 'name' definition 'rName'.
VarTest::VarTest(const std::string& rName): CppUnit::TestCase(rName)
                                    ^
Foundation/testsuite/src/VarTest.cpp:2910:38: style: Parameter 'a1' can be declared with const [constParameter]
void VarTest::testGetIdxNoThrow(Var& a1, std::vector<Var>::size_type n)
                                     ^
Foundation/testsuite/src/VarTest.cpp:2916:40: style: Parameter 'a1' can be declared with const [constParameter]
void VarTest::testGetIdxMustThrow(Var& a1, std::vector<Var>::size_type n)
                                       ^
Foundation/testsuite/src/VarTest.cpp:1642:8: style: Variable 'd0' is not assigned a value. [unassignedVariable]
 Dummy d0;
       ^
Foundation/testsuite/src/VarTest.cpp:2912:11: style: Variable 'val1' is assigned a value that is never used. [unreadVariable]
 Var val1 = a1[n];
          ^
Foundation/testsuite/src/VarTest.cpp:3101:6: style: Variable 'v1' is assigned a value that is never used. [unreadVariable]
  v1 = v;
     ^
Foundation/wcelibcex-1.0/src/wce_asctime.c:106:41: style:inconclusive: Function 'wceex_asctime_r' argument 1 names different: declaration 'tbuff' definition 'tmbuff'. [funcArgNamesDifferent]
char * wceex_asctime_r(const struct tm *tmbuff, char *buff)
                                        ^
Foundation/wcelibcex-1.0/src/wce_time.h:134:41: note: Function 'wceex_asctime_r' argument 1 names different: declaration 'tbuff' definition 'tmbuff'.
char * wceex_asctime_r(const struct tm *tbuff, char *buff);
                                        ^
Foundation/wcelibcex-1.0/src/wce_asctime.c:106:41: note: Function 'wceex_asctime_r' argument 1 names different: declaration 'tbuff' definition 'tmbuff'.
char * wceex_asctime_r(const struct tm *tmbuff, char *buff)
                                        ^
Foundation/wcelibcex-1.0/src/wce_bsearch.c:53:12: style: The scope of the variable 'middle' can be reduced. [variableScope]
    size_t middle;
           ^
Foundation/wcelibcex-1.0/src/wce_bsearch.c:62:9: style: Variable 'res' is assigned a value that is never used. [unreadVariable]
    res = 0;
        ^
Foundation/wcelibcex-1.0/src/wce_directorymanagement.c:93:9: error: Memory leak: buffer [memleak]
        return NULL;
        ^
Foundation/wcelibcex-1.0/src/wce_findfile.c:91:14: error: Uninitialized variable: wfilename [uninitvar]
    mbstowcs(wfilename, filespec, strlen(filespec) + 1);
             ^
Foundation/wcelibcex-1.0/src/wce_gettimeofday.c:52:21: style: Variable 'li.LowPart' is assigned a value that is never used. [unreadVariable]
        li.LowPart  = ft.dwLowDateTime;
                    ^
Foundation/wcelibcex-1.0/src/wce_gettimeofday.c:53:21: style: Variable 'li.HighPart' is assigned a value that is never used. [unreadVariable]
        li.HighPart = ft.dwHighDateTime;
                    ^
Foundation/wcelibcex-1.0/src/wce_stat.c:69:51: style:inconclusive: Function 'wceex_stat' argument 2 names different: declaration 'buf' definition 'buffer'. [funcArgNamesDifferent]
int wceex_stat(const char* filename, struct stat *buffer)
                                                  ^
Foundation/wcelibcex-1.0/src/wce_stat.h:130:51: note: Function 'wceex_stat' argument 2 names different: declaration 'buf' definition 'buffer'.
int wceex_stat(const char *filename, struct stat *buf);
                                                  ^
Foundation/wcelibcex-1.0/src/wce_stat.c:69:51: note: Function 'wceex_stat' argument 2 names different: declaration 'buf' definition 'buffer'.
int wceex_stat(const char* filename, struct stat *buffer)
                                                  ^
Foundation/wcelibcex-1.0/src/wce_stat.c:197:57: style:inconclusive: Function '__wceex_get_file_mode' argument 1 names different: declaration 'name' definition 'filename'. [funcArgNamesDifferent]
static unsigned short __wceex_get_file_mode(const char* filename, int attr)
                                                        ^
Foundation/wcelibcex-1.0/src/wce_stat.c:47:57: note: Function '__wceex_get_file_mode' argument 1 names different: declaration 'name' definition 'filename'.
static unsigned short __wceex_get_file_mode(const char* name, int attr);
                                                        ^
Foundation/wcelibcex-1.0/src/wce_stat.c:197:57: note: Function '__wceex_get_file_mode' argument 1 names different: declaration 'name' definition 'filename'.
static unsigned short __wceex_get_file_mode(const char* filename, int attr)
                                                        ^
Foundation/wcelibcex-1.0/src/wce_stat.c:84:14: error: Uninitialized variable: pathWCE [uninitvar]
    mbstowcs(pathWCE, filename, strlen(filename) + 1);
             ^
Foundation/wcelibcex-1.0/src/wce_timesys.c:54:48: style:inconclusive: Function 'wceex_filetime_to_time' argument 1 names different: declaration 'filetime' definition 'pft'. [funcArgNamesDifferent]
time_t wceex_filetime_to_time(const FILETIME * pft)
                                               ^
Foundation/wcelibcex-1.0/src/wce_timesys.h:51:48: note: Function 'wceex_filetime_to_time' argument 1 names different: declaration 'filetime' definition 'pft'.
time_t wceex_filetime_to_time(const FILETIME * filetime);
                                               ^
Foundation/wcelibcex-1.0/src/wce_timesys.c:54:48: note: Function 'wceex_filetime_to_time' argument 1 names different: declaration 'filetime' definition 'pft'.
time_t wceex_filetime_to_time(const FILETIME * pft)
                                               ^
Foundation/wcelibcex-1.0/src/wce_timesys.c:89:46: style:inconclusive: Function 'wceex_local_to_time' argument 1 names different: declaration 'systemtime' definition 'st'. [funcArgNamesDifferent]
time_t wceex_local_to_time(const SYSTEMTIME *st)
                                             ^
Foundation/wcelibcex-1.0/src/wce_timesys.h:52:46: note: Function 'wceex_local_to_time' argument 1 names different: declaration 'systemtime' definition 'st'.
time_t wceex_local_to_time(const SYSTEMTIME *systemtime);
                                             ^
Foundation/wcelibcex-1.0/src/wce_timesys.c:89:46: note: Function 'wceex_local_to_time' argument 1 names different: declaration 'systemtime' definition 'st'.
time_t wceex_local_to_time(const SYSTEMTIME *st)
                                             ^
JSON/samples/Benchmark/src/Benchmark.cpp:79:22: style: Local variable 'sparser' shadows outer variable [shadowVariable]
  Poco::JSON::Parser sparser;
                     ^
JSON/samples/Benchmark/src/Benchmark.cpp:59:21: note: Shadowed declaration
 Poco::JSON::Parser sparser(0);
                    ^
JSON/samples/Benchmark/src/Benchmark.cpp:79:22: note: Shadow variable
  Poco::JSON::Parser sparser;
                     ^
JSON/samples/Benchmark/src/Benchmark.cpp:89:22: style: Local variable 'istr' shadows outer variable [shadowVariable]
  std::istringstream istr(jsonStr);
                     ^
JSON/samples/Benchmark/src/Benchmark.cpp:68:21: note: Shadowed declaration
 std::istringstream istr(jsonStr);
                    ^
JSON/samples/Benchmark/src/Benchmark.cpp:89:22: note: Shadow variable
  std::istringstream istr(jsonStr);
                     ^
JSON/src/Template.cpp:56:2: style: Class 'StringPart' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 StringPart(const std::string& content): Part(), _content(content)
 ^
JSON/src/Template.cpp:116:2: style: Class 'EchoPart' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 EchoPart(const std::string& query): Part(), _query(query)
 ^
JSON/src/Template.cpp:143:2: style: Class 'LogicQuery' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 LogicQuery(const std::string& query): _queryString(query)
 ^
JSON/src/Template.cpp:187:2: style: Class 'LogicExistQuery' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 LogicExistQuery(const std::string& query): LogicQuery(query)
 ^
JSON/src/Template.cpp:64:7: style: The function 'render' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void render(const Var& data, std::ostream& out) const
      ^
JSON/src/Template.cpp:43:15: note: Virtual function in base class
 virtual void render(const Var& data, std::ostream& out) const = 0;
              ^
JSON/src/Template.cpp:64:7: note: Function in derived class
 void render(const Var& data, std::ostream& out) const
      ^
JSON/src/Template.cpp:100:7: style: The function 'render' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void render(const Var& data, std::ostream& out) const
      ^
JSON/src/Template.cpp:43:15: note: Virtual function in base class
 virtual void render(const Var& data, std::ostream& out) const = 0;
              ^
JSON/src/Template.cpp:100:7: note: Function in derived class
 void render(const Var& data, std::ostream& out) const
      ^
JSON/src/Template.cpp:124:7: style: The function 'render' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void render(const Var& data, std::ostream& out) const
      ^
JSON/src/Template.cpp:43:15: note: Virtual function in base class
 virtual void render(const Var& data, std::ostream& out) const = 0;
              ^
JSON/src/Template.cpp:124:7: note: Function in derived class
 void render(const Var& data, std::ostream& out) const
      ^
JSON/src/Template.cpp:195:15: style: The function 'apply' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 virtual bool apply(const Var& data) const
              ^
JSON/src/Template.cpp:151:15: note: Virtual function in base class
 virtual bool apply(const Var& data) const
              ^
JSON/src/Template.cpp:195:15: note: Function in derived class
 virtual bool apply(const Var& data) const
              ^
JSON/src/Template.cpp:216:15: style: The function 'apply' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 virtual bool apply(const Var& data) const
              ^
JSON/src/Template.cpp:151:15: note: Virtual function in base class
 virtual bool apply(const Var& data) const
              ^
JSON/src/Template.cpp:216:15: note: Function in derived class
 virtual bool apply(const Var& data) const
              ^
JSON/src/Template.cpp:240:7: style: The function 'addPart' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void addPart(Part* part)
      ^
JSON/src/Template.cpp:95:15: note: Virtual function in base class
 virtual void addPart(Part* part)
              ^
JSON/src/Template.cpp:240:7: note: Function in derived class
 void addPart(Part* part)
      ^
JSON/src/Template.cpp:246:7: style: The function 'render' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void render(const Var& data, std::ostream& out) const
      ^
JSON/src/Template.cpp:43:15: note: Virtual function in base class
 virtual void render(const Var& data, std::ostream& out) const = 0;
              ^
JSON/src/Template.cpp:246:7: note: Function in derived class
 void render(const Var& data, std::ostream& out) const
      ^
JSON/src/Template.cpp:275:7: style: The function 'render' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void render(const Var& data, std::ostream& out) const
      ^
JSON/src/Template.cpp:43:15: note: Virtual function in base class
 virtual void render(const Var& data, std::ostream& out) const = 0;
              ^
JSON/src/Template.cpp:275:7: note: Function in derived class
 void render(const Var& data, std::ostream& out) const
      ^
JSON/src/Template.cpp:329:7: style: The function 'render' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void render(const Var& data, std::ostream& out) const
      ^
JSON/src/Template.cpp:43:15: note: Virtual function in base class
 virtual void render(const Var& data, std::ostream& out) const = 0;
              ^
JSON/src/Template.cpp:329:7: note: Function in derived class
 void render(const Var& data, std::ostream& out) const
      ^
JSON/src/pdjson.c:374:14: style: Condition '0x80<=u' is always true [knownConditionTrueFalse]
    if (0x80 <= u && u <= 0xBF)
             ^
JSON/src/pdjson.c:372:11: note: Assuming that condition 'u<0x80' is not redundant
    if (u < 0x80) return 1;
          ^
JSON/src/pdjson.c:374:14: note: Condition '0x80<=u' is always true
    if (0x80 <= u && u <= 0xBF)
             ^
JSON/src/pdjson.c:146:9: style: The scope of the variable 'c' can be reduced. [variableScope]
    int c;
        ^
JSON/src/pdjson.c:272:14: style: The scope of the variable 'h' can be reduced. [variableScope]
    long cp, h, l;
             ^
JSON/src/pdjson.c:272:17: style: The scope of the variable 'l' can be reduced. [variableScope]
    long cp, h, l;
                ^
JSON/src/pdjson.c:953:49: style:inconclusive: Function 'json_set_streaming' argument 2 names different: declaration 'mode' definition 'streaming'. [funcArgNamesDifferent]
void json_set_streaming(json_stream *json, bool streaming)
                                                ^
JSON/src/pdjson.h:48:66: note: Function 'json_set_streaming' argument 2 names different: declaration 'mode' definition 'streaming'.
PDJSON_SYMEXPORT void json_set_streaming(json_stream *json, bool mode);
                                                                 ^
JSON/src/pdjson.c:953:49: note: Function 'json_set_streaming' argument 2 names different: declaration 'mode' definition 'streaming'.
void json_set_streaming(json_stream *json, bool streaming)
                                                ^
JSON/src/pdjson.c:673:20: style: Local variable 'next' shadows outer function [shadowFunction]
    enum json_type next;
                   ^
JSON/src/pdjson.c:622:12: note: Shadowed declaration
static int next(json_stream *json)
           ^
JSON/src/pdjson.c:673:20: note: Shadow variable
    enum json_type next;
                   ^
JSON/src/pdjson.c:686:24: style: Local variable 'next' shadows outer function [shadowFunction]
        enum json_type next = json->next;
                       ^
JSON/src/pdjson.c:622:12: note: Shadowed declaration
static int next(json_stream *json)
           ^
JSON/src/pdjson.c:686:24: note: Shadow variable
        enum json_type next = json->next;
                       ^
JSON/src/pdjson.c:855:42: style: Clarify calculation precedence for '&' and '?'. [clarifyCalculation]
    return json->flags & JSON_FLAG_ERROR ? json->errmsg : NULL;
                                         ^
JSON/src/pdjson.c:57:0: information: Skipping configuration 'PDJSON_STACK_MAX' since the value of 'PDJSON_STACK_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if (json->stack_top > PDJSON_STACK_MAX) {
^
JSON/testsuite/src/JSONTest.h:33:2: style: Class 'JSONTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 JSONTest(const std::string& name);
 ^
JSON/testsuite/src/JSONTest.cpp:2247:14: warning:inconclusive: Access of moved variable 'obj1'. [accessMoved]
 assertTrue (obj1.getNames().size() == 0);
             ^
JSON/testsuite/src/JSONTest.cpp:2246:9: note: Calling std::move(obj1)
 obj2 = std::move(obj1);
        ^
JSON/testsuite/src/JSONTest.cpp:2247:14: note: Access of moved variable 'obj1'.
 assertTrue (obj1.getNames().size() == 0);
             ^
JSON/testsuite/src/JSONTest.cpp:2267:14: warning:inconclusive: Access of moved variable 'obj3'. [accessMoved]
 assertTrue (obj3.getNames().size() == 0);
             ^
JSON/testsuite/src/JSONTest.cpp:2266:9: note: Calling std::move(obj3)
 obj4 = std::move(obj3);
        ^
JSON/testsuite/src/JSONTest.cpp:2267:14: note: Access of moved variable 'obj3'.
 assertTrue (obj3.getNames().size() == 0);
             ^
JSON/testsuite/src/JSONTest.cpp:2286:14: warning:inconclusive: Access of moved variable 'obj5'. [accessMoved]
 assertTrue (obj5.getNames().size() == 0);
             ^
JSON/testsuite/src/JSONTest.cpp:2285:9: note: Calling std::move(obj5)
 obj4 = std::move(obj5);
        ^
JSON/testsuite/src/JSONTest.cpp:2286:14: note: Access of moved variable 'obj5'.
 assertTrue (obj5.getNames().size() == 0);
             ^
JSON/testsuite/src/JSONTest.cpp:984:17: style: Variable 'ss' is assigned a value that is never used. [unreadVariable]
 std::string ss = s.str();
                ^
JSON/testsuite/src/JSONTest.cpp:2122:31: style: Variable 'json' is assigned a value that is never used. [unreadVariable]
 Poco::JSON::Object::Ptr json = new Poco::JSON::Object();
                              ^
JWT/src/Signer.cpp:159:2: style: Class 'RSAAlgorithm' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 RSAAlgorithm(const std::string& digestType):
 ^
JWT/src/Signer.cpp:230:2: style: Class 'ECDSAAlgorithm' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 ECDSAAlgorithm(const std::string& digestType):
 ^
JWT/src/Signer.cpp:164:29: style: The function 'sign' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 Poco::DigestEngine::Digest sign(const Signer& signer, const std::string& header, const std::string& payload)
                            ^
JWT/src/Signer.cpp:52:37: note: Virtual function in base class
 virtual Poco::DigestEngine::Digest sign(const Signer& signer, const std::string& header, const std::string& payload) = 0;
                                    ^
JWT/src/Signer.cpp:164:29: note: Function in derived class
 Poco::DigestEngine::Digest sign(const Signer& signer, const std::string& header, const std::string& payload)
                            ^
JWT/src/Signer.cpp:176:7: style: The function 'verify' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 bool verify(const Signer& signer, const std::string& header, const std::string& payload, const Poco::DigestEngine::Digest& signature)
      ^
JWT/src/Signer.cpp:55:15: note: Virtual function in base class
 virtual bool verify(const Signer& signer, const std::string& header, const std::string& payload, const Poco::DigestEngine::Digest& signature) = 0;
              ^
JWT/src/Signer.cpp:176:7: note: Function in derived class
 bool verify(const Signer& signer, const std::string& header, const std::string& payload, const Poco::DigestEngine::Digest& signature)
      ^
JWT/src/Signer.cpp:235:29: style: The function 'sign' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 Poco::DigestEngine::Digest sign(const Signer& signer, const std::string& header, const std::string& payload)
                            ^
JWT/src/Signer.cpp:52:37: note: Virtual function in base class
 virtual Poco::DigestEngine::Digest sign(const Signer& signer, const std::string& header, const std::string& payload) = 0;
                                    ^
JWT/src/Signer.cpp:235:29: note: Function in derived class
 Poco::DigestEngine::Digest sign(const Signer& signer, const std::string& header, const std::string& payload)
                            ^
JWT/src/Signer.cpp:257:7: style: The function 'verify' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 bool verify(const Signer& signer, const std::string& header, const std::string& payload, const Poco::DigestEngine::Digest& signature)
      ^
JWT/src/Signer.cpp:55:15: note: Virtual function in base class
 virtual bool verify(const Signer& signer, const std::string& header, const std::string& payload, const Poco::DigestEngine::Digest& signature) = 0;
              ^
JWT/src/Signer.cpp:257:7: note: Function in derived class
 bool verify(const Signer& signer, const std::string& header, const std::string& payload, const Poco::DigestEngine::Digest& signature)
      ^
JWT/src/Signer.cpp:133:29: style: The function 'sign' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 Poco::DigestEngine::Digest sign(const Signer& signer, const std::string& header, const std::string& payload)
                            ^
JWT/src/Signer.cpp:52:37: note: Virtual function in base class
 virtual Poco::DigestEngine::Digest sign(const Signer& signer, const std::string& header, const std::string& payload) = 0;
                                    ^
JWT/src/Signer.cpp:133:29: note: Function in derived class
 Poco::DigestEngine::Digest sign(const Signer& signer, const std::string& header, const std::string& payload)
                            ^
JWT/src/Signer.cpp:144:7: style: The function 'verify' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 bool verify(const Signer& signer, const std::string& header, const std::string& payload, const Poco::DigestEngine::Digest& signature)
      ^
JWT/src/Signer.cpp:55:15: note: Virtual function in base class
 virtual bool verify(const Signer& signer, const std::string& header, const std::string& payload, const Poco::DigestEngine::Digest& signature) = 0;
              ^
JWT/src/Signer.cpp:144:7: note: Function in derived class
 bool verify(const Signer& signer, const std::string& header, const std::string& payload, const Poco::DigestEngine::Digest& signature)
      ^
JWT/testsuite/src/SerializerTest.h:24:2: style: Class 'SerializerTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 SerializerTest(const std::string& name);
 ^
JWT/testsuite/src/TokenTest.h:24:2: style: Class 'TokenTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 TokenTest(const std::string& name);
 ^
JWT/testsuite/src/SignerTest.h:24:2: style: Class 'SignerTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 SignerTest(const std::string& name);
 ^
MongoDB/src/ReplicaSet.cpp:82:8: style: Variable 'conn' is assigned a value that is never used. [unreadVariable]
  conn = 0;
       ^
MongoDB/testsuite/src/MongoDBTest.h:25:2: style: Class 'MongoDBTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 MongoDBTest(const std::string& name);
 ^
MongoDB/testsuite/src/MongoDBTest.cpp:424:31: style: Local variable 'uuidBinary' shadows outer variable [shadowVariable]
   Poco::MongoDB::Binary::Ptr uuidBinary = doc->get<Binary::Ptr>("uuid");
                              ^
MongoDB/testsuite/src/MongoDBTest.cpp:401:29: note: Shadowed declaration
 Poco::MongoDB::Binary::Ptr uuidBinary = new Poco::MongoDB::Binary(uuid);
                            ^
MongoDB/testsuite/src/MongoDBTest.cpp:424:31: note: Shadow variable
   Poco::MongoDB::Binary::Ptr uuidBinary = doc->get<Binary::Ptr>("uuid");
                              ^
MongoDB/testsuite/src/MongoDBTest.cpp:384:36: style: Variable 'doc' is assigned a value that is never used. [unreadVariable]
  Poco::MongoDB::Document::Ptr doc = response.documents()[0];
                                   ^
MongoDB/testsuite/src/MongoDBTestOpMsg.cpp:66:16: style: Local variable 'uuidBinary' shadows outer variable [shadowVariable]
   Binary::Ptr uuidBinary = doc->get<Binary::Ptr>("uuid");
               ^
MongoDB/testsuite/src/MongoDBTestOpMsg.cpp:42:14: note: Shadowed declaration
 Binary::Ptr uuidBinary = new Binary(uuid);
             ^
MongoDB/testsuite/src/MongoDBTestOpMsg.cpp:66:16: note: Shadow variable
   Binary::Ptr uuidBinary = doc->get<Binary::Ptr>("uuid");
               ^
MongoDB/testsuite/src/MongoDBTestOpMsg.cpp:130:20: style: Local variable 'doc' shadows outer variable [shadowVariable]
  for (const auto& doc: response.documents())
                   ^
MongoDB/testsuite/src/MongoDBTestOpMsg.cpp:112:16: note: Shadowed declaration
 Document::Ptr doc = new Document();
               ^
MongoDB/testsuite/src/MongoDBTestOpMsg.cpp:130:20: note: Shadow variable
  for (const auto& doc: response.documents())
                   ^
Net/samples/EchoServer/src/EchoServer.cpp:94:31: style: Parameter 'b' can be declared with const. However it seems that 'onFIFOOutReadable' is a callback function, if 'b' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
 void onFIFOOutReadable(bool& b)
                              ^
Net/samples/EchoServer/src/EchoServer.cpp:90:60: note: You might need to cast the function pointer here
  _fifoOut.readable -= delegate(this, &EchoServiceHandler::onFIFOOutReadable);
                                                           ^
Net/samples/EchoServer/src/EchoServer.cpp:94:31: note: Parameter 'b' can be declared with const
 void onFIFOOutReadable(bool& b)
                              ^
Net/samples/EchoServer/src/EchoServer.cpp:102:30: style: Parameter 'b' can be declared with const. However it seems that 'onFIFOInWritable' is a callback function, if 'b' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
 void onFIFOInWritable(bool& b)
                             ^
Net/samples/EchoServer/src/EchoServer.cpp:91:59: note: You might need to cast the function pointer here
  _fifoIn.writable -= delegate(this, &EchoServiceHandler::onFIFOInWritable);
                                                          ^
Net/samples/EchoServer/src/EchoServer.cpp:102:30: note: Parameter 'b' can be declared with const
 void onFIFOInWritable(bool& b)
                             ^
Net/samples/HTTPLoadTest/src/HTTPLoadTest.cpp:182:41: performance: Function parameter 'uri' should be passed by const reference. [passedByValue]
void HTTPClient::printStats(std::string uri, int repetitions, int success, Poco::UInt64 usec)
                                        ^
Net/samples/HTTPTimeServer/src/HTTPTimeServer.cpp:55:2: style: Class 'TimeRequestHandler' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 TimeRequestHandler(const std::string& format):
 ^
Net/samples/HTTPTimeServer/src/HTTPTimeServer.cpp:87:2: style: Class 'TimeRequestHandlerFactory' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 TimeRequestHandlerFactory(const std::string& format):
 ^
Net/samples/TimeServer/src/TimeServer.cpp:83:2: style: Class 'TimeServerConnectionFactory' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 TimeServerConnectionFactory(const std::string& format):
 ^
Net/samples/tcpserver/src/tcpserver.cpp:45:3: style: Class 'ClientConnection' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  ClientConnection(const StreamSocket& s): TCPServerConnection(s)
  ^
Net/src/DNS.cpp:506:28: style:inconclusive: Function 'punycode_encode' argument 1 names different: declaration 'input_length' definition 'input_length_orig'. [funcArgNamesDifferent]
int punycode_encode(size_t input_length_orig, const punycode_uint input[], size_t *output_length, char output[])
                           ^
Net/src/DNS.cpp:55:35: note: Function 'punycode_encode' argument 1 names different: declaration 'input_length' definition 'input_length_orig'.
static int punycode_encode(size_t input_length, const punycode_uint input[], size_t* output_length, char output[]);
                                  ^
Net/src/DNS.cpp:506:28: note: Function 'punycode_encode' argument 1 names different: declaration 'input_length' definition 'input_length_orig'.
int punycode_encode(size_t input_length_orig, const punycode_uint input[], size_t *output_length, char output[])
                           ^
Net/src/DNS.cpp:222:0: style: Consider using std::any_of algorithm instead of a raw loop. [useStlAlgorithm]
  if (static_cast<unsigned char>(ch) >= 0x80) return true;
^
Net/src/DNS.cpp:383:0: information: Skipping configuration 'EAI_SYSTEM;POCO_HAVE_ADDRINFO;POCO_HAVE_IPv6' since the value of 'EAI_SYSTEM' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 case EAI_SYSTEM:
^
Net/src/FTPClientSession.cpp:189:9: style: Redundant initialization for 'status'. The initialized value is overwritten before it is read. [redundantInitialization]
 status = sendCommand("USER", username, response);
        ^
Net/src/FTPClientSession.cpp:180:13: note: status is initialized
 int status = FTP_POSITIVE_COMPLETION * 100;
            ^
Net/src/FTPClientSession.cpp:189:9: note: status is overwritten
 status = sendCommand("USER", username, response);
        ^
Net/src/FTPClientSession.cpp:542:21: style: Consider using std::replace_if algorithm instead of a raw loop. [useStlAlgorithm]
  if (ch == '.') ch = ',';
                    ^
Net/src/FTPStreamFactory.cpp:38:2: style: Class 'FTPStreamBuf' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 FTPStreamBuf(std::istream& istr):
 ^
Net/src/FTPStreamFactory.cpp:62:2: style: Class 'FTPIOS' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 FTPIOS(std::istream& istr):
 ^
Net/src/HTTPDigestCredentials.cpp:137:7: style:inconclusive: Technically the member function 'Poco::Net::DigestEngineProvider::isSessionAlgorithm' can be const. [functionConst]
 bool isSessionAlgorithm() {
      ^
Net/src/HTTPDigestCredentials.cpp:113:2: style: Class 'DigestEngineProvider' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 DigestEngineProvider(std::string algorithm): _algorithm(algorithm) {
 ^
Net/src/HTTPDigestCredentials.cpp:113:35: performance: Function parameter 'algorithm' should be passed by const reference. [passedByValue]
 DigestEngineProvider(std::string algorithm): _algorithm(algorithm) {
                                  ^
Net/src/HTTPStreamFactory.cpp:76:7: style: The scope of the variable 'retry' can be reduced. [variableScope]
 bool retry = false;
      ^
Net/src/HTTPStreamFactory.cpp:77:7: style: The scope of the variable 'authorize' can be reduced. [variableScope]
 bool authorize = false;
      ^
Net/src/ICMPEventArgs.cpp:106:18: style: Consider using std::count_if algorithm instead of a raw loop. [useStlAlgorithm]
  if (r != -1) ++received;
                 ^
Net/src/ICMPEventArgs.cpp:183:8: style: Consider using std::accumulate algorithm instead of a raw loop. [useStlAlgorithm]
   min = r;
       ^
Net/src/ICMPEventArgs.cpp:195:8: style: Consider using std::accumulate algorithm instead of a raw loop. [useStlAlgorithm]
   max = r;
       ^
Net/src/ICMPSocket.cpp:120:3: style:inconclusive: Statements following return, break, continue, goto or throw will never be executed. [unreachableCode]
  try
  ^
Net/src/ICMPSocket.cpp:115:0: information: Skipping configuration 'IP_DONTFRAG' since the value of 'IP_DONTFRAG' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  icmpSocket.setOption(IPPROTO_IP, IP_DONTFRAG, 1);
^
Net/src/ICMPSocket.cpp:111:0: information: Skipping configuration 'IP_DONTFRAGMENT' since the value of 'IP_DONTFRAGMENT' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  icmpSocket.setOption(IPPROTO_IP, IP_DONTFRAGMENT, 1);
^
Net/src/ICMPSocket.cpp:113:0: information: Skipping configuration 'IP_MTU_DISCOVER' since the value of 'IP_MTU_DISCOVER' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  icmpSocket.setOption(IPPROTO_IP, IP_MTU_DISCOVER, IP_PMTUDISC_DO);
^
Net/src/ICMPSocketImpl.cpp:75:7: style: The scope of the variable 'rc' can be reduced. [variableScope]
  int rc;
      ^
Net/src/IPAddressImpl.cpp:520:16: style: Variable 'bits' is assigned a value that is never used. [unreadVariable]
 unsigned bits = 0;
               ^
Net/src/IPAddressImpl.cpp:521:18: style: Variable 'bitPos' is assigned a value that is never used. [unreadVariable]
 unsigned bitPos = 128;
                 ^
Net/src/MailMessage.cpp:60:3: style: Class 'MultiPartHandler' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  MultiPartHandler(MailMessage* pMsg): _pMsg(pMsg)
  ^
Net/src/MailMessage.cpp:157:3: style: Class 'StringPartHandler' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  StringPartHandler(std::string& content): _str(content)
  ^
Net/src/MailMessage.cpp:619:3: style: Consider using std::any_of algorithm instead of a raw loop. [useStlAlgorithm]
  {
  ^
Net/src/MailMessage.cpp:544:14: style: Unused variable: bcc [unusedVariable]
 std::string bcc;
             ^
Net/src/MailStream.cpp:62:5: style: Redundant initialization for 'c'. The initialized value is overwritten before it is read. [redundantInitialization]
  c = _buffer[0];
    ^
Net/src/MailStream.cpp:59:8: note: c is initialized
 int c = std::char_traits<char>::eof();
       ^
Net/src/MailStream.cpp:62:5: note: c is overwritten
  c = _buffer[0];
    ^
Net/src/MulticastSocket.cpp:233:4: style: Consider using std::find_if algorithm instead of a raw loop. [useStlAlgorithm]
   {
   ^
Net/src/MulticastSocket.cpp:247:4: style: Consider using std::find_if algorithm instead of a raw loop. [useStlAlgorithm]
   {
   ^
Net/src/NTPPacket.cpp:87:21: style: C-style pointer casting [cstyleCast]
 NTPPacketData *p = (NTPPacketData*)packet;
                    ^
Net/src/NTPPacket.cpp:107:21: style: C-style pointer casting [cstyleCast]
 NTPPacketData *p = (NTPPacketData*)packet;
                    ^
Net/src/NetworkInterface.cpp:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 17 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Net/src/NetworkInterface.cpp:1057:0: information: Skipping configuration 'GAA_FLAG_INCLUDE_ALL_INTERFACES;POCO_NET_HAS_INTERFACE;POCO_OS_FAMILY_WINDOWS' since the value of 'GAA_FLAG_INCLUDE_ALL_INTERFACES' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 flags |= GAA_FLAG_INCLUDE_ALL_INTERFACES;
^
Net/src/NetworkInterface.cpp:1128:0: information: Skipping configuration 'IP_ADAPTER_IPV4_ENABLED;POCO_NET_HAS_INTERFACE;POCO_OS_FAMILY_WINDOWS' since the value of 'IP_ADAPTER_IPV4_ENABLED' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   if (pAddress->Flags & IP_ADAPTER_IPV4_ENABLED)
^
Net/src/NetworkInterface.cpp:80:2: style: Class 'NetworkInterfaceImpl' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 NetworkInterfaceImpl(unsigned index);
 ^
Net/src/NetworkInterface.cpp:1232:11: style: Condition 'prefixLength' is always false [knownConditionTrueFalse]
      if (prefixLength)
          ^
Net/src/NetworkInterface.cpp:1192:28: note: Assignment 'prefixLength=0', assigned value is 0
      ULONG prefixLength = 0;
                           ^
Net/src/NetworkInterface.cpp:1232:11: note: Condition 'prefixLength' is always false
      if (prefixLength)
          ^
Net/src/NetworkInterface.cpp:1180:20: style: Local variable 'family' shadows outer variable [shadowVariable]
    ADDRESS_FAMILY family = pUniAddr->Address.lpSockaddr->sa_family;
                   ^
Net/src/NetworkInterface.cpp:1060:17: note: Shadowed declaration
 const unsigned family = AF_UNSPEC; //IPv4 and IPv6
                ^
Net/src/NetworkInterface.cpp:1180:20: note: Shadow variable
    ADDRESS_FAMILY family = pUniAddr->Address.lpSockaddr->sa_family;
                   ^
Net/src/NetworkInterface.cpp:1138:11: style: Variable 'ifIndex' is reassigned a value before the old one has been used. [redundantAssignment]
  ifIndex = pAddress->IfIndex;
          ^
Net/src/NetworkInterface.cpp:1092:11: note: ifIndex is assigned
  ifIndex = pAddress->Ipv6IfIndex;
          ^
Net/src/NetworkInterface.cpp:1138:11: note: ifIndex is overwritten
  ifIndex = pAddress->IfIndex;
          ^
Net/src/POP3ClientSession.cpp:38:2: style: Class 'DialogStreamBuf' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 DialogStreamBuf(DialogSocket& socket):
 ^
Net/src/POP3ClientSession.cpp:60:2: style: Class 'DialogIOS' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 DialogIOS(DialogSocket& socket):
 ^
Net/src/POP3ClientSession.cpp:83:2: style: Class 'DialogInputStream' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 DialogInputStream(DialogSocket& socket):
 ^
Net/src/PollSet.cpp:662:7: performance:inconclusive: Technically the member function 'Poco::Net::PollSetImpl::wakeUp' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 void wakeUp()
      ^
Net/src/PollSet.cpp:71:2: warning: Member variable 'PollSetImpl::_pSocket' is not initialized in the constructor. [uninitMemberVar]
 PollSetImpl(): _events(1024),
 ^
Net/src/PollSet.cpp:510:7: performance:inconclusive: Technically the member function 'Poco::Net::PollSetImpl::setMode' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 void setMode(short& target, int mode)
      ^
Net/src/RemoteSyslogListener.cpp:565:2: warning: Return value of function log() is not used. [ignoredReturnValue]
 log(message);
 ^
Net/src/RemoteSyslogListener.cpp:302:24: style: Variable 'versionStr' is assigned a value that is never used. [unreadVariable]
 std::string versionStr(parseUntilSpace(line, pos));
                       ^
Net/src/SMTPClientSession.cpp:426:8: style: Local variable 'status' shadows outer variable [shadowVariable]
   int status = sendCommand("RCPT TO:", recipient.str(), response);
       ^
Net/src/SMTPClientSession.cpp:402:6: note: Shadowed declaration
 int status = 0;
     ^
Net/src/SMTPClientSession.cpp:426:8: note: Shadow variable
   int status = sendCommand("RCPT TO:", recipient.str(), response);
       ^
Net/src/SMTPClientSession.cpp:437:8: style: Local variable 'status' shadows outer variable [shadowVariable]
   int status = sendCommand("RCPT TO:", recipient.str(), response);
       ^
Net/src/SMTPClientSession.cpp:402:6: note: Shadowed declaration
 int status = 0;
     ^
Net/src/SMTPClientSession.cpp:437:8: note: Shadow variable
   int status = sendCommand("RCPT TO:", recipient.str(), response);
       ^
Net/src/SMTPClientSession.cpp:474:7: style: Local variable 'status' shadows outer variable [shadowVariable]
  int status = sendCommand("RCPT TO:", recipient.str(), response);
      ^
Net/src/SMTPClientSession.cpp:451:6: note: Shadowed declaration
 int status = 0;
     ^
Net/src/SMTPClientSession.cpp:474:7: note: Shadow variable
  int status = sendCommand("RCPT TO:", recipient.str(), response);
      ^
Net/src/Socket.cpp:167:25: style: Local variable 'pos' shadows outer variable [shadowVariable]
   SocketList::iterator pos = std::find(begW, endW, *it);
                        ^
Net/src/Socket.cpp:163:24: note: Shadowed declaration
  SocketList::iterator pos = std::find(begR, endR, *it);
                       ^
Net/src/Socket.cpp:167:25: note: Shadow variable
   SocketList::iterator pos = std::find(begW, endW, *it);
                        ^
Net/src/Socket.cpp:200:11: style: Local variable 'idx' shadows outer variable [shadowVariable]
 for (int idx = 0; idx < nfd; ++idx)
          ^
Net/src/Socket.cpp:135:6: note: Shadowed declaration
 int idx = 0;
     ^
Net/src/Socket.cpp:200:11: note: Shadow variable
 for (int idx = 0; idx < nfd; ++idx)
          ^
Net/src/SocketAddress.cpp:47:7: style:inconclusive: Technically the member function 'Poco::Net::AFLT::operator()' can be const. [functionConst]
 bool operator () (const IPAddress& a1, const IPAddress& a2)
      ^
Net/src/SocketAddress.cpp:314:5: style: Consider using std::find_if algorithm instead of a raw loop. [useStlAlgorithm]
    {
    ^
Net/src/SocketImpl.cpp:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations. [toomanyconfigs]

^
Net/src/SocketImpl.cpp:367:25: style: The comparison 'rc < 0' is always false. [knownConditionTrueFalse]
 while (_blocking && rc < 0 && lastError() == POCO_EINTR);
                        ^
Net/src/SocketImpl.cpp:352:11: note: 'rc' is assigned value '0' here.
 int rc = 0;
          ^
Net/src/SocketImpl.cpp:367:25: note: The comparison 'rc < 0' is always false.
 while (_blocking && rc < 0 && lastError() == POCO_EINTR);
                        ^
Net/src/SocketImpl.cpp:368:9: style: The comparison 'rc < 0' is always false. [knownConditionTrueFalse]
 if (rc < 0) error();
        ^
Net/src/SocketImpl.cpp:352:11: note: 'rc' is assigned value '0' here.
 int rc = 0;
          ^
Net/src/SocketImpl.cpp:368:9: note: The comparison 'rc < 0' is always false.
 if (rc < 0) error();
        ^
Net/src/SocketImpl.cpp:417:25: style: The comparison 'rc < 0' is always false. [knownConditionTrueFalse]
 while (_blocking && rc < 0 && lastError() == POCO_EINTR);
                        ^
Net/src/SocketImpl.cpp:402:11: note: 'rc' is assigned value '0' here.
 int rc = 0;
          ^
Net/src/SocketImpl.cpp:417:25: note: The comparison 'rc < 0' is always false.
 while (_blocking && rc < 0 && lastError() == POCO_EINTR);
                        ^
Net/src/SocketImpl.cpp:418:9: style: The comparison 'rc < 0' is always false. [knownConditionTrueFalse]
 if (rc < 0)
        ^
Net/src/SocketImpl.cpp:402:11: note: 'rc' is assigned value '0' here.
 int rc = 0;
          ^
Net/src/SocketImpl.cpp:418:9: note: The comparison 'rc < 0' is always false.
 if (rc < 0)
        ^
Net/src/SocketImpl.cpp:506:25: style: The comparison 'rc < 0' is always false. [knownConditionTrueFalse]
 while (_blocking && rc < 0 && lastError() == POCO_EINTR);
                        ^
Net/src/SocketImpl.cpp:482:11: note: 'rc' is assigned value '0' here.
 int rc = 0;
          ^
Net/src/SocketImpl.cpp:506:25: note: The comparison 'rc < 0' is always false.
 while (_blocking && rc < 0 && lastError() == POCO_EINTR);
                        ^
Net/src/SocketImpl.cpp:507:9: style: The comparison 'rc < 0' is always false. [knownConditionTrueFalse]
 if (rc < 0) error();
        ^
Net/src/SocketImpl.cpp:482:11: note: 'rc' is assigned value '0' here.
 int rc = 0;
          ^
Net/src/SocketImpl.cpp:507:9: note: The comparison 'rc < 0' is always false.
 if (rc < 0) error();
        ^
Net/src/SocketImpl.cpp:593:25: style: The comparison 'rc < 0' is always false. [knownConditionTrueFalse]
 while (_blocking && rc < 0 && lastError() == POCO_EINTR);
                        ^
Net/src/SocketImpl.cpp:569:11: note: 'rc' is assigned value '0' here.
 int rc = 0;
          ^
Net/src/SocketImpl.cpp:593:25: note: The comparison 'rc < 0' is always false.
 while (_blocking && rc < 0 && lastError() == POCO_EINTR);
                        ^
Net/src/SocketImpl.cpp:594:9: style: The comparison 'rc < 0' is always false. [knownConditionTrueFalse]
 if (rc < 0)
        ^
Net/src/SocketImpl.cpp:569:11: note: 'rc' is assigned value '0' here.
 int rc = 0;
          ^
Net/src/SocketImpl.cpp:594:9: note: The comparison 'rc < 0' is always false.
 if (rc < 0)
        ^
Net/src/SocketImpl.cpp:258:0: information: Skipping configuration 'IPV6_V6ONLY;POCO_HAVE_IPv6' since the value of 'IPV6_V6ONLY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 setOption(IPPROTO_IPV6, IPV6_V6ONLY, ipV6Only ? 1 : 0);
^
Net/src/SocketImpl.cpp:90:2: style:inconclusive: Consecutive return, break, continue, goto or throw statements are unnecessary. [duplicateBreak]
 return false;
 ^
Net/src/SocketProactor.cpp:556:6: style: The scope of the variable 'avail' can be reduced. [variableScope]
 int avail = 0;
     ^
Net/src/SocketProactor.cpp:556:12: style: Variable 'avail' is assigned a value that is never used. [unreadVariable]
 int avail = 0;
           ^
Net/src/TCPServerDispatcher.cpp:35:2: style: Class 'TCPConnectionNotification' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 TCPConnectionNotification(const StreamSocket& socket):
 ^
Net/src/wepoll.c:2163:13: warning: Either the condition 'node' is redundant or there is possible null pointer dereference: node. [nullPointerRedundantCheck]
  } while (!node->red);
            ^
Net/src/wepoll.c:2165:7: note: Assuming that condition 'node' is not redundant
  if (node)
      ^
Net/src/wepoll.c:2163:13: note: Null pointer dereference
  } while (!node->red);
            ^
Net/src/wepoll.c:2224:10: style: The scope of the variable 'base_socket' can be reduced. [variableScope]
  SOCKET base_socket;
         ^
Net/src/wepoll.c:616:70: style:inconclusive: Function 'epoll_ctl' argument 4 names different: declaration 'event' definition 'ev'. [funcArgNamesDifferent]
int epoll_ctl(HANDLE ephnd, int op, SOCKET sock, struct epoll_event* ev) {
                                                                     ^
Net/src/wepoll.c:99:49: note: Function 'epoll_ctl' argument 4 names different: declaration 'event' definition 'ev'.
                            struct epoll_event* event);
                                                ^
Net/src/wepoll.c:616:70: note: Function 'epoll_ctl' argument 4 names different: declaration 'event' definition 'ev'.
int epoll_ctl(HANDLE ephnd, int op, SOCKET sock, struct epoll_event* ev) {
                                                                     ^
Net/src/wepoll.c:994:48: style:inconclusive: Function 'poll_group_acquire' argument 1 names different: declaration 'port' definition 'port_state'. [funcArgNamesDifferent]
poll_group_t* poll_group_acquire(port_state_t* port_state) {
                                               ^
Net/src/wepoll.c:912:64: note: Function 'poll_group_acquire' argument 1 names different: declaration 'port' definition 'port_state'.
WEPOLL_INTERNAL poll_group_t* poll_group_acquire(port_state_t* port);
                                                               ^
Net/src/wepoll.c:994:48: note: Function 'poll_group_acquire' argument 1 names different: declaration 'port' definition 'port_state'.
poll_group_t* poll_group_acquire(port_state_t* port_state) {
                                               ^
Net/src/wepoll.c:1905:30: style:inconclusive: Function 'ts_tree_init' argument 1 names different: declaration 'rtl' definition 'ts_tree'. [funcArgNamesDifferent]
void ts_tree_init(ts_tree_t* ts_tree) {
                             ^
Net/src/wepoll.c:533:46: note: Function 'ts_tree_init' argument 1 names different: declaration 'rtl' definition 'ts_tree'.
WEPOLL_INTERNAL void ts_tree_init(ts_tree_t* rtl);
                                             ^
Net/src/wepoll.c:1905:30: note: Function 'ts_tree_init' argument 1 names different: declaration 'rtl' definition 'ts_tree'.
void ts_tree_init(ts_tree_t* ts_tree) {
                             ^
Net/src/wepoll.c:74:9: style: union member 'epoll_data::ptr' is never used. [unusedStructMember]
  void* ptr;
        ^
Net/src/wepoll.c:75:7: style: union member 'epoll_data::fd' is never used. [unusedStructMember]
  int fd;
      ^
Net/src/wepoll.c:76:12: style: union member 'epoll_data::u32' is never used. [unusedStructMember]
  uint32_t u32;
           ^
Net/src/wepoll.c:77:12: style: union member 'epoll_data::u64' is never used. [unusedStructMember]
  uint64_t u64;
           ^
Net/src/wepoll.c:78:10: style: union member 'epoll_data::sock' is never used. [unusedStructMember]
  SOCKET sock; /* Windows specific */
         ^
Net/src/wepoll.c:79:10: style: union member 'epoll_data::hnd' is never used. [unusedStructMember]
  HANDLE hnd;  /* Windows specific */
         ^
Net/src/wepoll.c:186:10: style: struct member '_OBJECT_ATTRIBUTES::RootDirectory' is never used. [unusedStructMember]
  HANDLE RootDirectory;
         ^
Net/src/wepoll.c:187:19: style: struct member '_OBJECT_ATTRIBUTES::ObjectName' is never used. [unusedStructMember]
  PUNICODE_STRING ObjectName;
                  ^
Net/testsuite/src/DNSTest.h:24:2: style: Class 'DNSTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 DNSTest(const std::string& name);
 ^
Net/testsuite/src/DNSTest.cpp:53:13: style: Local variable 'he1' shadows outer variable [shadowVariable]
  HostEntry he1 = DNS::hostByName("nohost.pocoproject.org");
            ^
Net/testsuite/src/DNSTest.cpp:40:12: note: Shadowed declaration
 HostEntry he1 = DNS::hostByName("aliastest.pocoproject.org");
           ^
Net/testsuite/src/DNSTest.cpp:53:13: note: Shadow variable
  HostEntry he1 = DNS::hostByName("nohost.pocoproject.org");
            ^
Net/testsuite/src/DatagramSocketTest.h:25:2: style: Class 'DatagramSocketTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 DatagramSocketTest(const std::string& name);
 ^
Net/testsuite/src/UDPEchoServer.h:31:2: style: Class 'UDPEchoServer' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 UDPEchoServer(const Poco::Net::SocketAddress& sa);
 ^
Net/testsuite/src/DatagramSocketTest.cpp:76:15: warning:inconclusive: Access of moved variable 'ss0'. [accessMoved]
 assertFalse (ss0.isNull());
              ^
Net/testsuite/src/DatagramSocketTest.cpp:72:20: note: Calling std::move(ss0)
 DatagramSocket ss(std::move(ss0));
                   ^
Net/testsuite/src/DatagramSocketTest.cpp:76:15: note: Access of moved variable 'ss0'.
 assertFalse (ss0.isNull());
              ^
Net/testsuite/src/DatagramSocketTest.cpp:93:15: warning:inconclusive: Access of moved variable 'ss0'. [accessMoved]
 assertFalse (ss0.isNull());
              ^
Net/testsuite/src/DatagramSocketTest.cpp:89:7: note: Calling std::move(ss0)
 ss = std::move(ss0);
      ^
Net/testsuite/src/DatagramSocketTest.cpp:93:15: note: Access of moved variable 'ss0'.
 assertFalse (ss0.isNull());
              ^
Net/testsuite/src/DatagramSocketTest.cpp:74:14: warning:inconclusive: Access of moved variable 'ss0'. [accessMoved]
 assertTrue (ss0.isNull());
             ^
Net/testsuite/src/DatagramSocketTest.cpp:72:20: note: Calling std::move(ss0)
 DatagramSocket ss(std::move(ss0));
                   ^
Net/testsuite/src/DatagramSocketTest.cpp:74:14: note: Access of moved variable 'ss0'.
 assertTrue (ss0.isNull());
             ^
Net/testsuite/src/DatagramSocketTest.cpp:91:14: warning:inconclusive: Access of moved variable 'ss0'. [accessMoved]
 assertTrue (ss0.isNull());
             ^
Net/testsuite/src/DatagramSocketTest.cpp:89:7: note: Calling std::move(ss0)
 ss = std::move(ss0);
      ^
Net/testsuite/src/DatagramSocketTest.cpp:91:14: note: Access of moved variable 'ss0'.
 assertTrue (ss0.isNull());
             ^
Net/testsuite/src/DialogSocketTest.h:24:2: style: Class 'DialogSocketTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 DialogSocketTest(const std::string& name);
 ^
Net/testsuite/src/EchoServer.h:31:2: style: Class 'EchoServer' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 EchoServer(const Poco::Net::SocketAddress& address);
 ^
Net/testsuite/src/FTPClientSessionTest.h:33:2: style: Class 'FTPClientSessionTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 FTPClientSessionTest(const std::string& name);
 ^
Net/testsuite/src/FTPClientSessionTest.cpp:40:3: style: Class 'ActiveDownloader' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  ActiveDownloader(FTPClientSession& session):
  ^
Net/testsuite/src/FTPStreamFactoryTest.h:24:2: style: Class 'FTPStreamFactoryTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 FTPStreamFactoryTest(const std::string& name);
 ^
Net/testsuite/src/HTMLFormTest.h:24:2: style: Class 'HTMLFormTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 HTMLFormTest(const std::string& name);
 ^
Net/testsuite/src/HTTPClientSessionTest.h:24:2: style: Class 'HTTPClientSessionTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 HTTPClientSessionTest(const std::string& name);
 ^
Net/testsuite/src/HTTPStreamFactoryTest.h:24:2: style: Class 'HTTPStreamFactoryTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 HTTPStreamFactoryTest(const std::string& name);
 ^
Net/testsuite/src/HTTPCookieTest.h:25:2: style: Class 'HTTPCookieTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 HTTPCookieTest(const std::string& name);
 ^
Net/testsuite/src/HTTPCredentialsTest.h:24:2: style: Class 'HTTPCredentialsTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 HTTPCredentialsTest(const std::string& name);
 ^
Net/testsuite/src/HTTPRequestTest.h:24:2: style: Class 'HTTPRequestTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 HTTPRequestTest(const std::string& name);
 ^
Net/testsuite/src/HTTPResponseTest.h:24:2: style: Class 'HTTPResponseTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 HTTPResponseTest(const std::string& name);
 ^
Net/testsuite/src/HTTPServerTest.h:24:2: style: Class 'HTTPServerTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 HTTPServerTest(const std::string& name);
 ^
Net/testsuite/src/HTTPStreamFactoryTest.cpp:107:17: style: Variable 'm' is assigned a value that is never used. [unreadVariable]
  std::string m = exc.displayText();
                ^
Net/testsuite/src/HTTPTestServer.cpp:169:20: style: Variable 'body' is assigned a value that is never used. [unreadVariable]
  std::string body = _lastRequest.substr(pos);
                   ^
Net/testsuite/src/NTLMCredentialsTest.h:24:2: style: Class 'NTLMCredentialsTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 NTLMCredentialsTest(const std::string& name);
 ^
Net/testsuite/src/ICMPClientTest.h:27:2: style: Class 'ICMPClientTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 ICMPClientTest(const std::string& name);
 ^
Net/testsuite/src/ICMPSocketTest.h:24:2: style: Class 'ICMPSocketTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 ICMPSocketTest(const std::string& name);
 ^
Net/testsuite/src/IPAddressTest.h:24:2: style: Class 'IPAddressTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 IPAddressTest(const std::string& name);
 ^
Net/testsuite/src/MailMessageTest.h:24:2: style: Class 'MailMessageTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 MailMessageTest(const std::string& name);
 ^
Net/testsuite/src/MailMessageTest.cpp:61:16: style: Local variable 'data' shadows outer function [shadowFunction]
   std::string data;
               ^
Net/testsuite/src/MailMessageTest.cpp:71:35: note: Shadowed declaration
  const std::vector<std::string>& data() const
                                  ^
Net/testsuite/src/MailMessageTest.cpp:61:16: note: Shadow variable
   std::string data;
               ^
Net/testsuite/src/MailStreamTest.h:24:2: style: Class 'MailStreamTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 MailStreamTest(const std::string& name);
 ^
Net/testsuite/src/SMTPClientSessionTest.h:24:2: style: Class 'SMTPClientSessionTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 SMTPClientSessionTest(const std::string& name);
 ^
Net/testsuite/src/POP3ClientSessionTest.h:24:2: style: Class 'POP3ClientSessionTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 POP3ClientSessionTest(const std::string& name);
 ^
Net/testsuite/src/MediaTypeTest.h:24:2: style: Class 'MediaTypeTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 MediaTypeTest(const std::string& name);
 ^
Net/testsuite/src/MessageHeaderTest.h:24:2: style: Class 'MessageHeaderTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 MessageHeaderTest(const std::string& name);
 ^
Net/testsuite/src/NameValueCollectionTest.h:24:2: style: Class 'NameValueCollectionTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 NameValueCollectionTest(const std::string& name);
 ^
Net/testsuite/src/MultipartWriterTest.h:24:2: style: Class 'MultipartWriterTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 MultipartWriterTest(const std::string& name);
 ^
Net/testsuite/src/MultipartReaderTest.h:24:2: style: Class 'MultipartReaderTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 MultipartReaderTest(const std::string& name);
 ^
Net/testsuite/src/QuotedPrintableTest.h:24:2: style: Class 'QuotedPrintableTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 QuotedPrintableTest(const std::string& name);
 ^
Net/testsuite/src/MulticastSocketTest.h:29:2: style: Class 'MulticastSocketTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 MulticastSocketTest(const std::string& name);
 ^
Net/testsuite/src/NTPClientTest.h:26:2: style: Class 'NTPClientTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 NTPClientTest(const std::string& name);
 ^
Net/testsuite/src/SocketAddressTest.h:24:2: style: Class 'SocketAddressTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 SocketAddressTest(const std::string& name);
 ^
Net/testsuite/src/NetworkInterfaceTest.h:29:2: style: Class 'NetworkInterfaceTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 NetworkInterfaceTest(const std::string& name);
 ^
Net/testsuite/src/SyslogTest.h:24:2: style: Class 'SyslogTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 SyslogTest(const std::string& name);
 ^
Net/testsuite/src/OAuth10CredentialsTest.h:24:2: style: Class 'OAuth10CredentialsTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 OAuth10CredentialsTest(const std::string& name);
 ^
Net/testsuite/src/OAuth20CredentialsTest.h:24:2: style: Class 'OAuth20CredentialsTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 OAuth20CredentialsTest(const std::string& name);
 ^
Net/testsuite/src/PollSetTest.h:24:2: style: Class 'PollSetTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 PollSetTest(const std::string& name);
 ^
Net/testsuite/src/PollSetTest.cpp:191:5: style: Variable 'sm' is reassigned a value before the old one has been used. [redundantAssignment]
 sm = ps.poll(timeout);
    ^
Net/testsuite/src/PollSetTest.cpp:183:5: note: sm is assigned
 sm = ps.poll(timeout);
    ^
Net/testsuite/src/PollSetTest.cpp:191:5: note: sm is overwritten
 sm = ps.poll(timeout);
    ^
Net/testsuite/src/RawSocketTest.h:24:2: style: Class 'RawSocketTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 RawSocketTest(const std::string& name);
 ^
Net/testsuite/src/RawSocketTest.cpp:95:14: warning:inconclusive: Access of moved variable 'rs0'. [accessMoved]
 assertTrue (rs0.impl() == nullptr);
             ^
Net/testsuite/src/RawSocketTest.cpp:93:15: note: Calling std::move(rs0)
 RawSocket rs(std::move(rs0));
              ^
Net/testsuite/src/RawSocketTest.cpp:95:14: note: Access of moved variable 'rs0'.
 assertTrue (rs0.impl() == nullptr);
             ^
Net/testsuite/src/SocketReactorTest.h:24:2: style: Class 'SocketReactorTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 SocketReactorTest(const std::string& name);
 ^
Net/testsuite/src/SocketConnectorTest.h:24:2: style: Class 'SocketConnectorTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 SocketConnectorTest(const std::string& name);
 ^
Net/testsuite/src/SocketAddressTest.cpp:67:17: style: Local variable 'sa3' shadows outer variable [shadowVariable]
  SocketAddress sa3("192.168.1.100", "f00bar");
                ^
Net/testsuite/src/SocketAddressTest.cpp:60:16: note: Shadowed declaration
 SocketAddress sa3(std::move(sa03));
               ^
Net/testsuite/src/SocketAddressTest.cpp:67:17: note: Shadow variable
  SocketAddress sa3("192.168.1.100", "f00bar");
                ^
Net/testsuite/src/SocketConnectorTest.cpp:94:8: performance:inconclusive: Technically the member function '::ClientServiceHandler::doSomething' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  void doSomething()
       ^
Net/testsuite/src/SocketProactorTest.h:30:2: style: Class 'SocketProactorTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 SocketProactorTest(const std::string& name);
 ^
Net/testsuite/src/SocketReactorTest.cpp:346:8: style: The scope of the variable 'n' can be reduced. [variableScope]
   int n = 0;
       ^
Net/testsuite/src/SocketReactorTest.cpp:160:16: style: Local variable 'data' shadows outer function [shadowFunction]
   std::string data(DATA_SIZE, 'x');
               ^
Net/testsuite/src/SocketReactorTest.cpp:182:22: note: Shadowed declaration
  static std::string data()
                     ^
Net/testsuite/src/SocketReactorTest.cpp:160:16: note: Shadow variable
   std::string data(DATA_SIZE, 'x');
               ^
Net/testsuite/src/SocketReactorTest.cpp:346:10: style: Variable 'n' is assigned a value that is never used. [unreadVariable]
   int n = 0;
         ^
Net/testsuite/src/SocketStreamTest.h:24:2: style: Class 'SocketStreamTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 SocketStreamTest(const std::string& name);
 ^
Net/testsuite/src/SocketTest.cpp:42:13: warning: Member variable 'SocketTest::_readableToNot' is not initialized in the constructor. [uninitMemberVar]
SocketTest::SocketTest(const std::string& name): CppUnit::TestCase(name)
            ^
Net/testsuite/src/SocketTest.cpp:42:13: warning: Member variable 'SocketTest::_notToReadable' is not initialized in the constructor. [uninitMemberVar]
SocketTest::SocketTest(const std::string& name): CppUnit::TestCase(name)
            ^
Net/testsuite/src/SocketTest.cpp:42:13: warning: Member variable 'SocketTest::_writableToNot' is not initialized in the constructor. [uninitMemberVar]
SocketTest::SocketTest(const std::string& name): CppUnit::TestCase(name)
            ^
Net/testsuite/src/SocketTest.cpp:42:13: warning: Member variable 'SocketTest::_notToWritable' is not initialized in the constructor. [uninitMemberVar]
SocketTest::SocketTest(const std::string& name): CppUnit::TestCase(name)
            ^
Net/testsuite/src/SocketTest.h:24:2: style: Class 'SocketTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 SocketTest(const std::string& name);
 ^
Net/testsuite/src/SocketTest.cpp:563:35: style: Parameter 'b' can be declared with const. However it seems that 'onReadable' is a callback function, if 'b' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
void SocketTest::onReadable(bool& b)
                                  ^
Net/testsuite/src/SocketTest.cpp:194:44: note: You might need to cast the function pointer here
 f.readable -= delegate(this, &SocketTest::onReadable);
                                           ^
Net/testsuite/src/SocketTest.cpp:563:35: note: Parameter 'b' can be declared with const
void SocketTest::onReadable(bool& b)
                                  ^
Net/testsuite/src/SocketTest.cpp:570:35: style: Parameter 'b' can be declared with const. However it seems that 'onWritable' is a callback function, if 'b' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
void SocketTest::onWritable(bool& b)
                                  ^
Net/testsuite/src/SocketTest.cpp:195:44: note: You might need to cast the function pointer here
 f.writable -= delegate(this, &SocketTest::onWritable);
                                           ^
Net/testsuite/src/SocketTest.cpp:570:35: note: Parameter 'b' can be declared with const
void SocketTest::onWritable(bool& b)
                                  ^
Net/testsuite/src/SocketTest.cpp:76:15: warning:inconclusive: Access of moved variable 'ss0'. [accessMoved]
 assertFalse (ss0.isNull());
              ^
Net/testsuite/src/SocketTest.cpp:72:18: note: Calling std::move(ss0)
 StreamSocket ss(std::move(ss0));
                 ^
Net/testsuite/src/SocketTest.cpp:76:15: note: Access of moved variable 'ss0'.
 assertFalse (ss0.isNull());
              ^
Net/testsuite/src/SocketTest.cpp:89:15: warning:inconclusive: Access of moved variable 'ss0'. [accessMoved]
 assertFalse (ss0.isNull());
              ^
Net/testsuite/src/SocketTest.cpp:85:7: note: Calling std::move(ss0)
 ss = std::move(ss0);
      ^
Net/testsuite/src/SocketTest.cpp:89:15: note: Access of moved variable 'ss0'.
 assertFalse (ss0.isNull());
              ^
Net/testsuite/src/SocketTest.cpp:74:14: warning:inconclusive: Access of moved variable 'ss0'. [accessMoved]
 assertTrue (ss0.isNull());
             ^
Net/testsuite/src/SocketTest.cpp:72:18: note: Calling std::move(ss0)
 StreamSocket ss(std::move(ss0));
                 ^
Net/testsuite/src/SocketTest.cpp:74:14: note: Access of moved variable 'ss0'.
 assertTrue (ss0.isNull());
             ^
Net/testsuite/src/SocketTest.cpp:87:14: warning:inconclusive: Access of moved variable 'ss0'. [accessMoved]
 assertTrue (ss0.isNull());
             ^
Net/testsuite/src/SocketTest.cpp:85:7: note: Calling std::move(ss0)
 ss = std::move(ss0);
      ^
Net/testsuite/src/SocketTest.cpp:87:14: note: Access of moved variable 'ss0'.
 assertTrue (ss0.isNull());
             ^
Net/testsuite/src/TCPServerTest.h:24:2: style: Class 'TCPServerTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 TCPServerTest(const std::string& name);
 ^
Net/testsuite/src/TCPServerTest.cpp:41:3: style: Class 'EchoConnection' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  EchoConnection(const StreamSocket& s): TCPServerConnection(s)
  ^
Net/testsuite/src/UDPServerTest.h:24:2: style: Class 'UDPServerTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 UDPServerTest(const std::string& name);
 ^
Net/testsuite/src/UDPServerTest.cpp:121:16: style: Variable 'errCount' is assigned a value that is never used. [unreadVariable]
  int errCount = 0;
               ^
Net/testsuite/src/UDPServerTest.cpp:125:13: style: Variable 'errCount' is assigned a value that is never used. [unreadVariable]
   errCount = 0;
            ^
Net/testsuite/src/UDPServerTest.cpp:132:14: style: Variable 'errCount' is assigned a value that is never used. [unreadVariable]
    errCount += count / 10;
             ^
Net/testsuite/src/WebSocketTest.h:24:2: style: Class 'WebSocketTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 WebSocketTest(const std::string& name);
 ^
Net/testsuite/src/WebSocketTest.cpp:127:13: warning:inconclusive: Access of moved variable 'ws0'. [accessMoved]
 assertTrue(ws0.impl() == nullptr);
            ^
Net/testsuite/src/WebSocketTest.cpp:125:15: note: Calling std::move(ws0)
 WebSocket ws(std::move(ws0));
              ^
Net/testsuite/src/WebSocketTest.cpp:127:13: note: Access of moved variable 'ws0'.
 assertTrue(ws0.impl() == nullptr);
            ^
NetSSL_OpenSSL/samples/HTTPSTimeServer/src/HTTPSTimeServer.cpp:69:2: style: Class 'TimeRequestHandler' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 TimeRequestHandler(const std::string& format):
 ^
NetSSL_OpenSSL/samples/HTTPSTimeServer/src/HTTPSTimeServer.cpp:112:2: style: Class 'TimeRequestHandlerFactory' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 TimeRequestHandlerFactory(const std::string& format):
 ^
NetSSL_OpenSSL/samples/SetSourceIP/src/SetSourceIP.cpp:37:24: performance: Function parameter 'errorMessage' should be passed by const reference. [passedByValue]
void usage(std::string errorMessage)
                       ^
NetSSL_OpenSSL/samples/TwitterClient/src/Twitter.h:34:2: style: Class 'Twitter' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 Twitter(const std::string& twitterURI);
 ^
NetSSL_OpenSSL/samples/TwitterClient/src/Twitter.cpp:62:152: style:inconclusive: Function 'invoke' argument 3 names different: declaration 'params' definition 'form'. [funcArgNamesDifferent]
Poco::AutoPtr<Poco::Util::AbstractConfiguration> Twitter::invoke(const std::string& httpMethod, const std::string& twitterMethod, Poco::Net::HTMLForm& form)
                                                                                                                                                       ^
NetSSL_OpenSSL/samples/TwitterClient/src/Twitter.h:48:144: note: Function 'invoke' argument 3 names different: declaration 'params' definition 'form'.
 Poco::AutoPtr<Poco::Util::AbstractConfiguration> invoke(const std::string& httpMethod, const std::string& twitterMethod, Poco::Net::HTMLForm& params);
                                                                                                                                               ^
NetSSL_OpenSSL/samples/TwitterClient/src/Twitter.cpp:62:152: note: Function 'invoke' argument 3 names different: declaration 'params' definition 'form'.
Poco::AutoPtr<Poco::Util::AbstractConfiguration> Twitter::invoke(const std::string& httpMethod, const std::string& twitterMethod, Poco::Net::HTMLForm& form)
                                                                                                                                                       ^
NetSSL_OpenSSL/src/Context.cpp:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 14 configurations. Use --force to check all configurations. [toomanyconfigs]

^
NetSSL_OpenSSL/src/Context.cpp:416:0: information: Skipping configuration 'OPENSSL_NO_TLS1;SSL_OP_NO_TLSv1_1' since the value of 'SSL_OP_NO_TLSv1_1' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  SSL_CTX_set_options(_pSSLContext, SSL_OP_NO_TLSv1_1);
^
NetSSL_OpenSSL/src/Context.cpp:422:0: information: Skipping configuration 'OPENSSL_NO_TLS1;SSL_OP_NO_TLSv1_2' since the value of 'SSL_OP_NO_TLSv1_2' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  SSL_CTX_set_options(_pSSLContext, SSL_OP_NO_TLSv1_2);
^
NetSSL_OpenSSL/src/Context.cpp:428:0: information: Skipping configuration 'OPENSSL_NO_TLS1;SSL_OP_NO_TLSv1_3' since the value of 'SSL_OP_NO_TLSv1_3' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  SSL_CTX_set_options(_pSSLContext, SSL_OP_NO_TLSv1_3);
^
NetSSL_OpenSSL/src/Context.cpp:506:0: information: Skipping configuration 'SSL_OP_CIPHER_SERVER_PREFERENCE' since the value of 'SSL_OP_CIPHER_SERVER_PREFERENCE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 SSL_CTX_set_options(_pSSLContext, SSL_OP_CIPHER_SERVER_PREFERENCE);
^
NetSSL_OpenSSL/src/Context.cpp:398:0: information: Skipping configuration 'SSL_OP_NO_SSLv2' since the value of 'SSL_OP_NO_SSLv2' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  SSL_CTX_set_options(_pSSLContext, SSL_OP_NO_SSLv2);
^
NetSSL_OpenSSL/src/Context.cpp:404:0: information: Skipping configuration 'SSL_OP_NO_SSLv3' since the value of 'SSL_OP_NO_SSLv3' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  SSL_CTX_set_options(_pSSLContext, SSL_OP_NO_SSLv3);
^
NetSSL_OpenSSL/src/Context.cpp:388:0: information: Skipping configuration 'SSL_OP_NO_TICKET' since the value of 'SSL_OP_NO_TICKET' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 SSL_CTX_set_options(_pSSLContext, SSL_OP_NO_TICKET);
^
NetSSL_OpenSSL/src/Context.cpp:410:0: information: Skipping configuration 'SSL_OP_NO_TLSv1' since the value of 'SSL_OP_NO_TLSv1' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  SSL_CTX_set_options(_pSSLContext, SSL_OP_NO_TLSv1);
^
NetSSL_OpenSSL/src/Context.cpp:416:0: information: Skipping configuration 'SSL_OP_NO_TLSv1_1' since the value of 'SSL_OP_NO_TLSv1_1' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  SSL_CTX_set_options(_pSSLContext, SSL_OP_NO_TLSv1_1);
^
NetSSL_OpenSSL/src/FTPSStreamFactory.cpp:38:2: style: Class 'FTPSStreamBuf' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 FTPSStreamBuf(std::istream& istr):
 ^
NetSSL_OpenSSL/src/FTPSStreamFactory.cpp:62:2: style: Class 'FTPSIOS' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 FTPSIOS(std::istream& istr):
 ^
NetSSL_OpenSSL/src/SecureSocketImpl.cpp:593:13: style: Condition 'lastError' is always true [knownConditionTrueFalse]
   else if (lastError)
            ^
NetSSL_OpenSSL/src/SecureSocketImpl.cpp:573:18: note: Assuming that condition 'lastError==0' is not redundant
   if (lastError == 0)
                 ^
NetSSL_OpenSSL/src/SecureSocketImpl.cpp:593:13: note: Condition 'lastError' is always true
   else if (lastError)
            ^
NetSSL_OpenSSL/src/X509Certificate.cpp:140:46: style: Local variable 'it' shadows outer variable [shadowVariable]
      HostEntry::AddressList::const_iterator it = addr.begin();
                                             ^
NetSSL_OpenSSL/src/X509Certificate.cpp:120:46: note: Shadowed declaration
  for (std::set<std::string>::const_iterator it = dnsNames.begin(); !ok && it != dnsNames.end(); ++it)
                                             ^
NetSSL_OpenSSL/src/X509Certificate.cpp:140:46: note: Shadow variable
      HostEntry::AddressList::const_iterator it = addr.begin();
                                             ^
NetSSL_OpenSSL/testsuite/src/FTPSClientSessionTest.h:35:2: style: Class 'FTPSClientSessionTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 FTPSClientSessionTest(const std::string& name);
 ^
NetSSL_OpenSSL/testsuite/src/FTPSClientSessionTest.cpp:42:3: style: Class 'ActiveDownloader' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  ActiveDownloader(FTPSClientSession& session):
  ^
NetSSL_OpenSSL/testsuite/src/HTTPSClientSessionTest.h:24:2: style: Class 'HTTPSClientSessionTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 HTTPSClientSessionTest(const std::string& name);
 ^
NetSSL_OpenSSL/testsuite/src/HTTPSClientSessionTest.cpp:328:37: style: Variable 'pDefaultServerContext' is assigned a value that is never used. [unreadVariable]
 Context::Ptr pDefaultServerContext = SSLManager::instance().defaultServerContext();
                                    ^
NetSSL_OpenSSL/testsuite/src/HTTPSClientSessionTest.cpp:329:37: style: Variable 'pDefaultClientContext' is assigned a value that is never used. [unreadVariable]
 Context::Ptr pDefaultClientContext = SSLManager::instance().defaultClientContext();
                                    ^
NetSSL_OpenSSL/testsuite/src/HTTPSStreamFactoryTest.h:24:2: style: Class 'HTTPSStreamFactoryTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 HTTPSStreamFactoryTest(const std::string& name);
 ^
NetSSL_OpenSSL/testsuite/src/HTTPSServerTest.h:24:2: style: Class 'HTTPSServerTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 HTTPSServerTest(const std::string& name);
 ^
NetSSL_OpenSSL/testsuite/src/HTTPSStreamFactoryTest.cpp:111:17: style: Variable 'm' is assigned a value that is never used. [unreadVariable]
  std::string m = exc.displayText();
                ^
NetSSL_OpenSSL/testsuite/src/TCPServerTest.h:24:2: style: Class 'TCPServerTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 TCPServerTest(const std::string& name);
 ^
NetSSL_OpenSSL/testsuite/src/TCPServerTest.cpp:52:3: style: Class 'EchoConnection' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  EchoConnection(const StreamSocket& s): TCPServerConnection(s)
  ^
NetSSL_OpenSSL/testsuite/src/TCPServerTest.cpp:79:3: style: Class 'NullConnection' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  NullConnection(const StreamSocket& s): TCPServerConnection(s)
  ^
NetSSL_OpenSSL/testsuite/src/TCPServerTest.cpp:315:37: style: Variable 'pDefaultServerContext' is assigned a value that is never used. [unreadVariable]
 Context::Ptr pDefaultServerContext = SSLManager::instance().defaultServerContext();
                                    ^
NetSSL_OpenSSL/testsuite/src/TCPServerTest.cpp:316:37: style: Variable 'pDefaultClientContext' is assigned a value that is never used. [unreadVariable]
 Context::Ptr pDefaultClientContext = SSLManager::instance().defaultClientContext();
                                    ^
NetSSL_OpenSSL/testsuite/src/WebSocketTest.h:24:2: style: Class 'WebSocketTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 WebSocketTest(const std::string& name);
 ^
NetSSL_OpenSSL/testsuite/src/WebSocketTest.cpp:54:9: style: The scope of the variable 'n' can be reduced. [variableScope]
    int n;
        ^
NetSSL_Win/samples/HTTPSTimeServer/src/HTTPSTimeServer.cpp:66:2: style: Class 'TimeRequestHandler' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 TimeRequestHandler(const std::string& format):
 ^
NetSSL_Win/samples/HTTPSTimeServer/src/HTTPSTimeServer.cpp:109:2: style: Class 'TimeRequestHandlerFactory' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 TimeRequestHandlerFactory(const std::string& format):
 ^
NetSSL_Win/src/Context.cpp:175:6: style: The if condition is the same as the previous if condition [duplicateCondition]
 if (!_hCertStore) throw CertificateException("Failed to open certificate store", _certStoreName, GetLastError());
     ^
NetSSL_Win/src/Context.cpp:168:6: note: First condition
 if (!_hCertStore)
     ^
NetSSL_Win/src/Context.cpp:175:6: note: Second condition
 if (!_hCertStore) throw CertificateException("Failed to open certificate store", _certStoreName, GetLastError());
     ^
NetSSL_Win/src/Context.cpp:308:0: information: Skipping configuration 'SCH_USE_STRONG_CRYPTO' since the value of 'SCH_USE_STRONG_CRYPTO' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  schannelCred.dwFlags |= SCH_USE_STRONG_CRYPTO;
^
NetSSL_Win/src/Context.cpp:472:0: information: Skipping configuration 'SP_PROT_TLS1_1_CLIENT' since the value of 'SP_PROT_TLS1_1_CLIENT' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  result |= SP_PROT_TLS1_1_CLIENT | SP_PROT_TLS1_1_SERVER;
^
NetSSL_Win/src/Context.cpp:478:0: information: Skipping configuration 'SP_PROT_TLS1_2_CLIENT' since the value of 'SP_PROT_TLS1_2_CLIENT' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  result |= SP_PROT_TLS1_2_CLIENT | SP_PROT_TLS1_2_SERVER;
^
NetSSL_Win/src/Context.cpp:484:0: information: Skipping configuration 'SP_PROT_TLS1_3_CLIENT' since the value of 'SP_PROT_TLS1_3_CLIENT' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  result |= SP_PROT_TLS1_3_CLIENT | SP_PROT_TLS1_3_SERVER;
^
NetSSL_Win/src/SecureSocketImpl.cpp:47:7: performance:inconclusive: Technically the member function 'Poco::Net::StateMachine::none' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 bool none(SOCKET sockfd);
      ^
NetSSL_Win/src/SecureSocketImpl.cpp:1609:20: note: Technically the member function 'Poco::Net::StateMachine::none' can be static (but you may consider moving to unnamed namespace).
bool StateMachine::none(SOCKET sockfd)
                   ^
NetSSL_Win/src/SecureSocketImpl.cpp:47:7: note: Technically the member function 'Poco::Net::StateMachine::none' can be static (but you may consider moving to unnamed namespace).
 bool none(SOCKET sockfd);
      ^
NetSSL_Win/src/SecureSocketImpl.cpp:48:7: performance:inconclusive: Technically the member function 'Poco::Net::StateMachine::select' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 void select(fd_set* fdRead, fd_set* fdWrite, SOCKET sockfd);
      ^
NetSSL_Win/src/SecureSocketImpl.cpp:1615:20: note: Technically the member function 'Poco::Net::StateMachine::select' can be static (but you may consider moving to unnamed namespace).
void StateMachine::select(fd_set* fdRead, fd_set* fdWrite, SOCKET sockfd)
                   ^
NetSSL_Win/src/SecureSocketImpl.cpp:48:7: note: Technically the member function 'Poco::Net::StateMachine::select' can be static (but you may consider moving to unnamed namespace).
 void select(fd_set* fdRead, fd_set* fdWrite, SOCKET sockfd);
      ^
NetSSL_Win/src/SecureSocketImpl.cpp:1678:23: warning:inconclusive: Found suspicious equality comparison. Did you intend to assign a value instead? [constStatement]
   (pSock->getState() == SecureSocketImpl::ST_DONE);
                      ^
NetSSL_Win/src/SecureSocketImpl.cpp:373:9: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
 int rc = 0;
        ^
NetSSL_Win/src/SecureSocketImpl.cpp:417:6: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
  rc += sent;
     ^
NetSSL_Win/src/SecureSocketImpl.cpp:605:12: style: Variable 'bytes' is assigned a value that is never used. [unreadVariable]
 int bytes = 0;
           ^
NetSSL_Win/src/SecureSocketImpl.cpp:1107:8: style: Variable 'n' is assigned a value that is never used. [unreadVariable]
 int n = 0;
       ^
NetSSL_Win/src/SecureSocketImpl.cpp:1152:7: style: Variable 'n' is assigned a value that is never used. [unreadVariable]
    n = sendRawBytes(outBuffer[0].pvBuffer, outBuffer[0].cbBuffer);
      ^
NetSSL_Win/src/X509Certificate.cpp:279:14: style: Local variable 'i' shadows outer variable [shadowVariable]
    for (int i = 0; i < pNameInfo->cAltEntry; i++)
             ^
NetSSL_Win/src/X509Certificate.cpp:244:11: note: Shadowed declaration
 for (int i = 0; i < _pCert->pCertInfo->cExtension; i++, pExt++)
          ^
NetSSL_Win/src/X509Certificate.cpp:279:14: note: Shadow variable
    for (int i = 0; i < pNameInfo->cAltEntry; i++)
             ^
NetSSL_Win/src/X509Certificate.cpp:525:46: style: Local variable 'it' shadows outer variable [shadowVariable]
      HostEntry::AddressList::const_iterator it = addr.begin();
                                             ^
NetSSL_Win/src/X509Certificate.cpp:505:46: note: Shadowed declaration
  for (std::set<std::string>::const_iterator it = dnsNames.begin(); !ok && it != dnsNames.end(); ++it)
                                             ^
NetSSL_Win/src/X509Certificate.cpp:525:46: note: Shadow variable
      HostEntry::AddressList::const_iterator it = addr.begin();
                                             ^
NetSSL_Win/src/X509Certificate.cpp:456:22: style: Variable 'derSize' is assigned a value that is never used. [unreadVariable]
 std::size_t derSize = 0;
                     ^
NetSSL_Win/src/X509Certificate.cpp:250:0: information: Skipping configuration 'CRYPT_DECODE_ENABLE_PUNYCODE_FLAG' since the value of 'CRYPT_DECODE_ENABLE_PUNYCODE_FLAG' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   flags |= CRYPT_DECODE_ENABLE_PUNYCODE_FLAG;
^
NetSSL_Win/testsuite/src/HTTPSClientSessionTest.h:24:2: style: Class 'HTTPSClientSessionTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 HTTPSClientSessionTest(const std::string& name);
 ^
NetSSL_Win/testsuite/src/HTTPSClientSessionTest.cpp:336:37: style: Variable 'pDefaultServerContext' is assigned a value that is never used. [unreadVariable]
 Context::Ptr pDefaultServerContext = SSLManager::instance().defaultServerContext();
                                    ^
NetSSL_Win/testsuite/src/HTTPSClientSessionTest.cpp:337:37: style: Variable 'pDefaultClientContext' is assigned a value that is never used. [unreadVariable]
 Context::Ptr pDefaultClientContext = SSLManager::instance().defaultClientContext();
                                    ^
NetSSL_Win/testsuite/src/HTTPSStreamFactoryTest.h:24:2: style: Class 'HTTPSStreamFactoryTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 HTTPSStreamFactoryTest(const std::string& name);
 ^
NetSSL_Win/testsuite/src/HTTPSServerTest.h:24:2: style: Class 'HTTPSServerTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 HTTPSServerTest(const std::string& name);
 ^
NetSSL_Win/testsuite/src/HTTPSStreamFactoryTest.cpp:111:17: style: Variable 'm' is assigned a value that is never used. [unreadVariable]
  std::string m = exc.displayText();
                ^
NetSSL_Win/testsuite/src/TCPServerTest.h:24:2: style: Class 'TCPServerTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 TCPServerTest(const std::string& name);
 ^
NetSSL_Win/testsuite/src/TCPServerTest.cpp:50:3: style: Class 'EchoConnection' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  EchoConnection(const StreamSocket& s): TCPServerConnection(s)
  ^
NetSSL_Win/testsuite/src/TCPServerTest.cpp:293:37: style: Variable 'pDefaultServerContext' is assigned a value that is never used. [unreadVariable]
 Context::Ptr pDefaultServerContext = SSLManager::instance().defaultServerContext();
                                    ^
NetSSL_Win/testsuite/src/TCPServerTest.cpp:294:37: style: Variable 'pDefaultClientContext' is assigned a value that is never used. [unreadVariable]
 Context::Ptr pDefaultClientContext = SSLManager::instance().defaultClientContext();
                                    ^
NetSSL_Win/testsuite/src/WebSocketTest.h:24:2: style: Class 'WebSocketTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 WebSocketTest(const std::string& name);
 ^
NetSSL_Win/testsuite/src/WebSocketTest.cpp:54:9: style: The scope of the variable 'n' can be reduced. [variableScope]
    int n;
        ^
PDF/include/Poco/PDF/adler32.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 26 configurations. Use --force to check all configurations. [toomanyconfigs]

^
PDF/include/Poco/PDF/adler32.c:63:14: style: The scope of the variable 'n' can be reduced. [variableScope]
    unsigned n;
             ^
PDF/include/Poco/PDF/deflate.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 57 configurations. Use --force to check all configurations. [toomanyconfigs]

^
PDF/include/Poco/PDF/deflate.c:1398:9: style: The scope of the variable 'max_start' can be reduced. [variableScope]
    ulg max_start;
        ^
PDF/include/Poco/PDF/deflate.c:703:17: error: Uninitialized variable: val [uninitvar]
            if (val == 0) {
                ^
PDF/include/Poco/PDF/deflate.c:734:17: error: Uninitialized variable: val [uninitvar]
            if (val == 0)
                ^
PDF/include/Poco/PDF/deflate.c:161:32: style: struct member 'static_tree_desc_s::dummy' is never used. [unusedStructMember]
struct static_tree_desc_s {int dummy;}; /* for buggy compilers */
                               ^
PDF/include/Poco/PDF/deflate.c:352:30: style: Variable 'hash_head' is assigned a value that is never used. [unreadVariable]
    if (hash_head) hash_head = 0;  /* to make compiler happy */
                             ^
PDF/include/Poco/PDF/deflate.c:1669:9: style: Variable 'bflush' is assigned a value that is never used. [unreadVariable]
        _tr_tally_lit(s, s->window[s->strstart-1], bflush);
        ^
PDF/include/Poco/PDF/deflate.c:438:36: warning: Either the condition 'level>9' is redundant or the array 'configuration_table[2]' is accessed at index 9, which is out of bounds. [arrayIndexOutOfBoundsCond]
    if (func != configuration_table[level].func && strm->total_in != 0) {
                                   ^
PDF/include/Poco/PDF/deflate.c:433:28: note: Assuming that condition 'level>9' is not redundant
    if (level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED) {
                           ^
PDF/include/Poco/PDF/deflate.c:438:36: note: Array index out of bounds
    if (func != configuration_table[level].func && strm->total_in != 0) {
                                   ^
PDF/include/Poco/PDF/deflate.c:1342:11: style: Variable 'n' is reassigned a value before the old one has been used. [redundantAssignment]
        n = read_buf(s->strm, s->window + s->strstart + s->lookahead, more);
          ^
PDF/include/Poco/PDF/deflate.c:1314:15: note: n is assigned
            n = wsize;
              ^
PDF/include/Poco/PDF/deflate.c:1342:11: note: n is overwritten
        n = read_buf(s->strm, s->window + s->strstart + s->lookahead, more);
          ^
PDF/src/Cell.cpp:146:5: style: Consecutive return, break, continue, goto or throw statements are unnecessary. [duplicateBreak]
    break;
    ^
PDF/src/Cell.cpp:149:5: style: Consecutive return, break, continue, goto or throw statements are unnecessary. [duplicateBreak]
    break;
    ^
PDF/src/XMLTemplate.cpp:221:2: style: Class 'TemplateHandler' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 TemplateHandler(const Poco::Path& base) :
 ^
PDF/src/XMLTemplate.cpp:248:19: style: Variable 'pStyle' is assigned a value that is never used. [unreadVariable]
  StylePtr pStyle = pushStyle(attributes);
                  ^
PDF/src/XMLTemplate.cpp:271:19: style: Variable 'pStyle' is assigned a value that is never used. [unreadVariable]
  StylePtr pStyle = pushStyle(attributes);
                  ^
PDF/src/XMLTemplate.cpp:274:26: style: Variable 'size' is assigned a value that is never used. [unreadVariable]
  if (size.empty()) size = _size;
                         ^
PDF/src/XMLTemplate.cpp:317:19: style: Variable 'pStyle' is assigned a value that is never used. [unreadVariable]
  StylePtr pStyle = pushStyle(attributes);
                  ^
PDF/src/XMLTemplate.cpp:396:19: style: Variable 'pStyle' is assigned a value that is never used. [unreadVariable]
  StylePtr pStyle = pushStyle(attributes);
                  ^
PDF/src/XMLTemplate.cpp:437:19: style: Variable 'pStyle' is assigned a value that is never used. [unreadVariable]
  StylePtr pStyle = pushStyle(attributes);
                  ^
PDF/src/XMLTemplate.cpp:450:19: style: Variable 'pStyle' is assigned a value that is never used. [unreadVariable]
  StylePtr pStyle = pushStyle(attributes);
                  ^
PDF/src/XMLTemplate.cpp:528:19: style: Variable 'pStyle' is assigned a value that is never used. [unreadVariable]
  StylePtr pStyle = pushStyle(attributes);
                  ^
PDF/src/adler32.c:63:14: style: The scope of the variable 'n' can be reduced. [variableScope]
    unsigned n;
             ^
PDF/src/deflate.c:1350:0: error: failed to expand 'UPDATE_HASH', Wrong number of parameters for macro 'UPDATE_HASH'. [preprocessorErrorDirective]
            Call UPDATE_HASH() MIN_MATCH-3 more times
^
PDF/src/deflate.c:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
PDF/src/gzio.c:19:28: style: struct member 'internal_state::dummy' is never used. [unusedStructMember]
struct internal_state {int dummy;}; /* for buggy compilers */
                           ^
PDF/src/gzio.c:377:0: information: Skipping configuration 'ESPIPE' since the value of 'ESPIPE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        if (errno != ESPIPE) /* fclose is broken for pipes in HP/UX */
^
PDF/src/gzio.c:99:15: style: Variable 'level' is assigned a value that is never used. [unreadVariable]
    int level = Z_DEFAULT_COMPRESSION; /* compression level */
              ^
PDF/src/gzio.c:100:18: style: Variable 'strategy' is assigned a value that is never used. [unreadVariable]
    int strategy = Z_DEFAULT_STRATEGY; /* compression strategy */
                 ^
PDF/src/gzio.c:138:19: style: Variable 'level' is assigned a value that is never used. [unreadVariable]
            level = *p - '0';
                  ^
PDF/src/gzio.c:140:20: style: Variable 'strategy' is assigned a value that is never used. [unreadVariable]
          strategy = Z_FILTERED;
                   ^
PDF/src/gzio.c:142:20: style: Variable 'strategy' is assigned a value that is never used. [unreadVariable]
          strategy = Z_HUFFMAN_ONLY;
                   ^
PDF/src/gzio.c:144:20: style: Variable 'strategy' is assigned a value that is never used. [unreadVariable]
          strategy = Z_RLE;
                   ^
PDF/src/hpdf_3dmeasure.c:107:1: error: There is an unknown macro here somewhere. Configuration is required. If HPDF_EXPORT is a macro then please configure it. [unknownMacro]
HPDF_EXPORT(HPDF_STATUS)
^
PDF/src/hpdf_annotation.c:282:1: error: There is an unknown macro here somewhere. Configuration is required. If HPDF_EXPORT is a macro then please configure it. [unknownMacro]
HPDF_EXPORT(HPDF_STATUS)
^
PDF/src/hpdf_destination.c:135:1: error: There is an unknown macro here somewhere. Configuration is required. If HPDF_EXPORT is a macro then please configure it. [unknownMacro]
HPDF_EXPORT(HPDF_STATUS)
^
PDF/src/hpdf_dict.c:425:11: style: The scope of the variable 'obj' can be reduced. [variableScope]
    void *obj;
          ^
PDF/src/hpdf_doc.c:109:1: error: There is an unknown macro here somewhere. Configuration is required. If HPDF_EXPORT is a macro then please configure it. [unknownMacro]
HPDF_EXPORT(HPDF_BOOL)
^
PDF/src/hpdf_doc_png.c:71:1: error: There is an unknown macro here somewhere. Configuration is required. If HPDF_EXPORT is a macro then please configure it. [unknownMacro]
HPDF_EXPORT(HPDF_Image)
^
PDF/src/hpdf_encoder.c:2942:1: error: There is an unknown macro here somewhere. Configuration is required. If HPDF_EXPORT is a macro then please configure it. [unknownMacro]
HPDF_EXPORT(HPDF_ByteType)
^
PDF/src/hpdf_encoder_cns.c:36325:1: error: There is an unknown macro here somewhere. Configuration is required. If HPDF_EXPORT is a macro then please configure it. [unknownMacro]
HPDF_EXPORT(HPDF_STATUS)
^
PDF/src/hpdf_encoder_cnt.c:15284:1: error: There is an unknown macro here somewhere. Configuration is required. If HPDF_EXPORT is a macro then please configure it. [unknownMacro]
HPDF_EXPORT(HPDF_STATUS)
^
PDF/src/hpdf_encoder_jp.c:16085:1: error: There is an unknown macro here somewhere. Configuration is required. If HPDF_EXPORT is a macro then please configure it. [unknownMacro]
HPDF_EXPORT(HPDF_STATUS)
^
PDF/src/hpdf_encoder_kr.c:27932:1: error: There is an unknown macro here somewhere. Configuration is required. If HPDF_EXPORT is a macro then please configure it. [unknownMacro]
HPDF_EXPORT(HPDF_STATUS)
^
PDF/src/hpdf_encoder_utf.c:260:1: error: There is an unknown macro here somewhere. Configuration is required. If HPDF_EXPORT is a macro then please configure it. [unknownMacro]
HPDF_EXPORT(HPDF_STATUS)
^
PDF/src/hpdf_error.c:87:1: error: There is an unknown macro here somewhere. Configuration is required. If HPDF_EXPORT is a macro then please configure it. [unknownMacro]
HPDF_EXPORT(HPDF_STATUS)
^
PDF/src/hpdf_exdata.c:57:1: error: There is an unknown macro here somewhere. Configuration is required. If HPDF_EXPORT is a macro then please configure it. [unknownMacro]
HPDF_EXPORT(HPDF_STATUS)
^
PDF/src/hpdf_ext_gstate.c:107:1: error: There is an unknown macro here somewhere. Configuration is required. If HPDF_EXPORT is a macro then please configure it. [unknownMacro]
HPDF_EXPORT(HPDF_STATUS)
^
PDF/src/hpdf_font.c:54:1: error: There is an unknown macro here somewhere. Configuration is required. If HPDF_EXPORT is a macro then please configure it. [unknownMacro]
HPDF_EXPORT(HPDF_UINT)
^
PDF/src/hpdf_font_cid.c:679:30: style: Variable 'last_btype' is assigned a value that is never used. [unreadVariable]
    HPDF_ByteType last_btype = HPDF_BYTE_TYPE_TRIAL;
                             ^
PDF/src/hpdf_font_cid.c:770:24: style: Variable 'last_btype' is assigned a value that is never used. [unreadVariable]
            last_btype = HPDF_BYTE_TYPE_TRIAL;
                       ^
PDF/src/hpdf_font_cid.c:772:24: style: Variable 'last_btype' is assigned a value that is never used. [unreadVariable]
            last_btype = btype;
                       ^
PDF/src/hpdf_fontdef_cns.c:413:1: error: There is an unknown macro here somewhere. Configuration is required. If HPDF_EXPORT is a macro then please configure it. [unknownMacro]
HPDF_EXPORT(HPDF_STATUS)
^
PDF/src/hpdf_fontdef_cnt.c:217:1: error: There is an unknown macro here somewhere. Configuration is required. If HPDF_EXPORT is a macro then please configure it. [unknownMacro]
HPDF_EXPORT(HPDF_STATUS)
^
PDF/src/hpdf_fontdef_jp.c:1796:1: error: There is an unknown macro here somewhere. Configuration is required. If HPDF_EXPORT is a macro then please configure it. [unknownMacro]
HPDF_EXPORT(HPDF_STATUS)
^
PDF/src/hpdf_fontdef_kr.c:1464:1: error: There is an unknown macro here somewhere. Configuration is required. If HPDF_EXPORT is a macro then please configure it. [unknownMacro]
HPDF_EXPORT(HPDF_STATUS)
^
PDF/src/hpdf_fontdef_type1.c:184:23: style: Local variable 'len' shadows outer variable [shadowVariable]
            HPDF_UINT len = HPDF_StrLen (s, HPDF_LIMIT_MAX_STRING_LEN);
                      ^
PDF/src/hpdf_fontdef_type1.c:134:15: note: Shadowed declaration
    HPDF_UINT len;
              ^
PDF/src/hpdf_fontdef_type1.c:184:23: note: Shadow variable
            HPDF_UINT len = HPDF_StrLen (s, HPDF_LIMIT_MAX_STRING_LEN);
                      ^
PDF/src/hpdf_fontdef_type1.c:195:18: style: Local variable 'buf' shadows outer variable [shadowVariable]
            char buf[HPDF_INT_LEN + 1];
                 ^
PDF/src/hpdf_fontdef_type1.c:131:10: note: Shadowed declaration
    char buf[HPDF_TMP_BUF_SIZ];
         ^
PDF/src/hpdf_fontdef_type1.c:195:18: note: Shadow variable
            char buf[HPDF_INT_LEN + 1];
                 ^
PDF/src/hpdf_image.c:446:1: error: There is an unknown macro here somewhere. Configuration is required. If HPDF_EXPORT is a macro then please configure it. [unknownMacro]
HPDF_EXPORT(HPDF_STATUS)
^
PDF/src/hpdf_image_ccitt.c:757:1: error: There is an unknown macro here somewhere. Configuration is required. If HPDF_EXPORT is a macro then please configure it. [unknownMacro]
HPDF_EXPORT(HPDF_Image)
^
PDF/src/hpdf_image_png.c:525:7: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
  ret += CreatePallet(image, png_ptr, info_ptr);
      ^
PDF/src/hpdf_image_png.c:526:7: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
  ret += HPDF_Dict_AddNumber (image, "Width", (HPDF_UINT)width);
      ^
PDF/src/hpdf_image_png.c:527:7: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
  ret += HPDF_Dict_AddNumber (image, "Height", (HPDF_UINT)height);
      ^
PDF/src/hpdf_image_png.c:528:7: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
  ret += HPDF_Dict_AddNumber (image, "BitsPerComponent", (HPDF_UINT)bit_depth);
      ^
PDF/src/hpdf_image_png.c:529:7: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
  ret += HPDF_Dict_Add (image, "SMask", smask);
      ^
PDF/src/hpdf_image_png.c:586:8: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
   ret += HPDF_Dict_AddName (image, "ColorSpace", "DeviceGray");
       ^
PDF/src/hpdf_image_png.c:588:8: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
   ret += HPDF_Dict_AddName (image, "ColorSpace", "DeviceRGB");
       ^
PDF/src/hpdf_image_png.c:590:7: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
  ret += HPDF_Dict_AddNumber (image, "Width", (HPDF_UINT)width);
      ^
PDF/src/hpdf_image_png.c:591:7: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
  ret += HPDF_Dict_AddNumber (image, "Height", (HPDF_UINT)height);
      ^
PDF/src/hpdf_image_png.c:592:7: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
  ret += HPDF_Dict_AddNumber (image, "BitsPerComponent", (HPDF_UINT)bit_depth);
      ^
PDF/src/hpdf_image_png.c:593:7: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
  ret += HPDF_Dict_Add (image, "SMask", smask);
      ^
PDF/src/hpdf_mmgr.c:173:0: information: Skipping configuration 'HPDF_ALINMENT_SIZ' since the value of 'HPDF_ALINMENT_SIZ' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        size = (size + (HPDF_ALINMENT_SIZ - 1)) / HPDF_ALINMENT_SIZ;
^
PDF/src/hpdf_mmgr.c:174:0: information: Skipping configuration 'HPDF_ALINMENT_SIZ' since the value of 'HPDF_ALINMENT_SIZ' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        size *= HPDF_ALINMENT_SIZ;
^
PDF/src/hpdf_outline.c:308:1: error: There is an unknown macro here somewhere. Configuration is required. If HPDF_EXPORT is a macro then please configure it. [unknownMacro]
HPDF_EXPORT(HPDF_STATUS)
^
PDF/src/hpdf_page_operator.c:82:1: error: There is an unknown macro here somewhere. Configuration is required. If HPDF_EXPORT is a macro then please configure it. [unknownMacro]
HPDF_EXPORT(HPDF_STATUS)
^
PDF/src/hpdf_pages.c:743:1: error: There is an unknown macro here somewhere. Configuration is required. If HPDF_EXPORT is a macro then please configure it. [unknownMacro]
HPDF_EXPORT(HPDF_UINT)
^
PDF/src/hpdf_pdfa.c:376:25: style: Local variable 'ret' shadows outer variable [shadowVariable]
            HPDF_STATUS ret = HPDF_Dict_Add (pdf->catalog, "OutputIntents", intents);
                        ^
PDF/src/hpdf_pdfa.c:349:17: note: Shadowed declaration
    HPDF_STATUS ret;
                ^
PDF/src/hpdf_pdfa.c:376:25: note: Shadow variable
            HPDF_STATUS ret = HPDF_Dict_Add (pdf->catalog, "OutputIntents", intents);
                        ^
PDF/src/hpdf_u3d.c:135:1: error: There is an unknown macro here somewhere. Configuration is required. If HPDF_EXPORT is a macro then please configure it. [unknownMacro]
HPDF_EXPORT(HPDF_Image)
^
PDF/src/inffast.c:142:17: style: Condition 'op' is always true [knownConditionTrueFalse]
            if (op) {
                ^
PDF/src/inffast.c:133:16: note: Assuming that condition 'op==0' is not redundant
        if (op == 0) {                          /* literal */
               ^
PDF/src/inffast.c:141:13: note: Compound assignment '&=', assigned value is 0
            op &= 15;                           /* number of extra bits */
            ^
PDF/src/inffast.c:142:17: note: Condition 'op' is always true
            if (op) {
                ^
PDF/src/inflate.c:328:20: style: The scope of the variable 'dist' can be reduced. [variableScope]
    unsigned copy, dist;
                   ^
PDF/src/inflate.c:1175:19: style: The scope of the variable 'id' can be reduced. [variableScope]
    unsigned long id;
                  ^
PDF/src/inflate.c:1267:19: style: The scope of the variable 'buf' can be reduced. [variableScope]
    unsigned char buf[4];       /* to restore bit buffer to byte string */
                  ^
PDF/src/inflate.c:1330:14: style: The scope of the variable 'wsize' can be reduced. [variableScope]
    unsigned wsize;
             ^
PDF/src/inftrees.c:50:14: style: The scope of the variable 'fill' can be reduced. [variableScope]
    unsigned fill;              /* index for replicating entries */
             ^
PDF/src/png.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 38 configurations. Use --force to check all configurations. [toomanyconfigs]

^
PDF/src/png.c:695:12: warning: Redundant assignment of 'png_ptr' to itself. [selfAssignment]
   png_ptr = png_ptr;  /* silence compiler warning about unused png_ptr */
           ^
PDF/src/png.c:714:12: warning: Redundant assignment of 'png_ptr' to itself. [selfAssignment]
   png_ptr = png_ptr;  /* silence compiler warning about unused png_ptr */
           ^
PDF/src/png.c:722:12: warning: Redundant assignment of 'png_ptr' to itself. [selfAssignment]
   png_ptr = png_ptr;  /* silence compiler warning about unused png_ptr */
           ^
PDF/src/png.c:730:12: warning: Redundant assignment of 'png_ptr' to itself. [selfAssignment]
   png_ptr = png_ptr;  /* silence compiler warning about unused png_ptr */
           ^
PDF/src/png.c:695:12: style: Variable 'png_ptr' is assigned a value that is never used. [unreadVariable]
   png_ptr = png_ptr;  /* silence compiler warning about unused png_ptr */
           ^
PDF/src/png.c:714:12: style: Variable 'png_ptr' is assigned a value that is never used. [unreadVariable]
   png_ptr = png_ptr;  /* silence compiler warning about unused png_ptr */
           ^
PDF/src/png.c:722:12: style: Variable 'png_ptr' is assigned a value that is never used. [unreadVariable]
   png_ptr = png_ptr;  /* silence compiler warning about unused png_ptr */
           ^
PDF/src/png.c:730:12: style: Variable 'png_ptr' is assigned a value that is never used. [unreadVariable]
   png_ptr = png_ptr;  /* silence compiler warning about unused png_ptr */
           ^
PDF/src/png.c:509:12: style: The scope of the variable 'i' can be reduced. [variableScope]
       int i;
           ^
PDF/src/pngerror.c:118:18: style: Condition 'png_ptr!=NULL' is always true [knownConditionTrueFalse]
     if (png_ptr != NULL && png_ptr->warning_fn != NULL)
                 ^
PDF/src/pngerror.c:104:16: note: Assuming that condition 'png_ptr!=NULL' is not redundant
   if (png_ptr != NULL)
               ^
PDF/src/pngerror.c:118:18: note: Condition 'png_ptr!=NULL' is always true
     if (png_ptr != NULL && png_ptr->warning_fn != NULL)
                 ^
PDF/src/pngerror.c:298:12: warning: Redundant assignment of 'png_ptr' to itself. [selfAssignment]
   png_ptr = png_ptr; /* make compiler happy */
           ^
PDF/src/pngerror.c:179:9: style: The scope of the variable 'msg' can be reduced. [variableScope]
   char msg[18+PNG_MAX_ERROR_TEXT];
        ^
PDF/src/pngerror.c:195:9: style: The scope of the variable 'msg' can be reduced. [variableScope]
   char msg[18+PNG_MAX_ERROR_TEXT];
        ^
PDF/src/pngerror.c:298:12: style: Variable 'png_ptr' is assigned a value that is never used. [unreadVariable]
   png_ptr = png_ptr; /* make compiler happy */
           ^
PDF/src/pngerror.c:258:18: warning: Redundant assignment of 'error_message' to itself. [selfAssignment]
   error_message = error_message; /* make compiler happy */
                 ^
PDF/src/pngerror.c:296:20: warning: Redundant assignment of 'warning_message' to itself. [selfAssignment]
   warning_message = warning_message; /* make compiler happy */
                   ^
PDF/src/pngerror.c:258:18: style: Variable 'error_message' is assigned a value that is never used. [unreadVariable]
   error_message = error_message; /* make compiler happy */
                 ^
PDF/src/pngerror.c:296:20: style: Variable 'warning_message' is assigned a value that is never used. [unreadVariable]
   warning_message = warning_message; /* make compiler happy */
                   ^
PDF/src/pngget.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 37 configurations. Use --force to check all configurations. [toomanyconfigs]

^
PDF/src/pngget.c:845:24: style: Same value in both branches of ternary operator. [duplicateValueTernary]
    return (png_ptr? 0L: 0L);
                       ^
PDF/src/pngget.c:853:16: warning: Redundant assignment of 'flag_select' to itself. [selfAssignment]
    flag_select=flag_select;
               ^
PDF/src/pngget.c:863:16: warning: Redundant assignment of 'flag_select' to itself. [selfAssignment]
    flag_select=flag_select;
               ^
PDF/src/pngget.c:873:23: style: Same value in both branches of ternary operator. [duplicateValueTernary]
    return (png_ptr? 0: 0);
                      ^
PDF/src/pngget.c:881:24: style: Same value in both branches of ternary operator. [duplicateValueTernary]
    return (png_ptr? 0L: 0L);
                       ^
PDF/src/pngget.c:853:16: style: Variable 'flag_select' is assigned a value that is never used. [unreadVariable]
    flag_select=flag_select;
               ^
PDF/src/pngget.c:863:16: style: Variable 'flag_select' is assigned a value that is never used. [unreadVariable]
    flag_select=flag_select;
               ^
PDF/src/pngmem.c:459:58: error: Unmatched ')'. Configuration: 'PNG_MAX_MALLOC_64K;PNG_READ_SUPPORTED;PNG_WRITE_SUPPORTED'. [syntaxError]
      if(png_ptr->flags&PNG_FLAG_MALLOC_NULL_MEM_OK) == 0)
                                                         ^
PDF/src/pngmem.c:459:58: error: Unmatched ')'. Configuration: 'PNG_MAX_MALLOC_64K;PNG_READ_SUPPORTED;PNG_WRITE_SUPPORTED;_Windows;__FLAT__;__TURBOC__'. [syntaxError]
      if(png_ptr->flags&PNG_FLAG_MALLOC_NULL_MEM_OK) == 0)
                                                         ^
PDF/src/pngpread.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 47 configurations. Use --force to check all configurations. [toomanyconfigs]

^
PDF/src/pngpread.c:1479:15: warning: Redundant assignment of 'info_ptr' to itself. [selfAssignment]
     info_ptr = info_ptr; /* to quiet some compiler warnings */
              ^
PDF/src/pngpread.c:1479:15: style: Variable 'info_ptr' is assigned a value that is never used. [unreadVariable]
     info_ptr = info_ptr; /* to quiet some compiler warnings */
              ^
PDF/src/pngpread.c:1348:19: warning: Redundant assignment of 'info_ptr' to itself. [selfAssignment]
         info_ptr = info_ptr; /* to quiet some compiler warnings */
                  ^
PDF/src/pngpread.c:1348:19: style: Variable 'info_ptr' is assigned a value that is never used. [unreadVariable]
         info_ptr = info_ptr; /* to quiet some compiler warnings */
                  ^
PDF/src/pngpread.c:1060:19: warning: Redundant assignment of 'info_ptr' to itself. [selfAssignment]
         info_ptr = info_ptr; /* to quiet some compiler warnings */
                  ^
PDF/src/pngpread.c:1060:19: style: Variable 'info_ptr' is assigned a value that is never used. [unreadVariable]
         info_ptr = info_ptr; /* to quiet some compiler warnings */
                  ^
PDF/src/pngpread.c:1156:19: warning: Redundant assignment of 'info_ptr' to itself. [selfAssignment]
         info_ptr = info_ptr; /* to quiet some compiler warnings */
                  ^
PDF/src/pngpread.c:1156:19: style: Variable 'info_ptr' is assigned a value that is never used. [unreadVariable]
         info_ptr = info_ptr; /* to quiet some compiler warnings */
                  ^
PDF/src/pngpread.c:140:17: style: Unused variable: PNG_IHDR [unusedVariable]
      PNG_CONST PNG_IHDR;
                ^
PDF/src/pngpread.c:141:17: style: Unused variable: PNG_IDAT [unusedVariable]
      PNG_CONST PNG_IDAT;
                ^
PDF/src/pngpread.c:142:17: style: Unused variable: PNG_IEND [unusedVariable]
      PNG_CONST PNG_IEND;
                ^
PDF/src/pngpread.c:143:17: style: Unused variable: PNG_PLTE [unusedVariable]
      PNG_CONST PNG_PLTE;
                ^
PDF/src/pngpread.c:145:17: style: Unused variable: PNG_bKGD [unusedVariable]
      PNG_CONST PNG_bKGD;
                ^
PDF/src/pngpread.c:663:14: style: Unused variable: PNG_IDAT [unusedVariable]
   PNG_CONST PNG_IDAT;
             ^
PDF/src/pngread.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 84 configurations. Use --force to check all configurations. [toomanyconfigs]

^
PDF/src/pngread.c:1467:15: warning: Redundant assignment of 'transforms' to itself. [selfAssignment]
   transforms = transforms; /* quiet compiler warnings */
              ^
PDF/src/pngread.c:1468:11: warning: Redundant assignment of 'params' to itself. [selfAssignment]
   params = params;
          ^
PDF/src/pngread.c:1467:15: style: Variable 'transforms' is assigned a value that is never used. [unreadVariable]
   transforms = transforms; /* quiet compiler warnings */
              ^
PDF/src/pngread.c:1468:11: style: Variable 'params' is assigned a value that is never used. [unreadVariable]
   params = params;
          ^
PDF/src/pngrtran.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 68 configurations. Use --force to check all configurations. [toomanyconfigs]

^
PDF/src/pngrtran.c:3929:14: style: The scope of the variable 'r' can be reduced. [variableScope]
         int r, g, b, p;
             ^
PDF/src/pngrtran.c:3929:17: style: The scope of the variable 'g' can be reduced. [variableScope]
         int r, g, b, p;
                ^
PDF/src/pngrtran.c:3929:20: style: The scope of the variable 'b' can be reduced. [variableScope]
         int r, g, b, p;
                   ^
PDF/src/pngrtran.c:3929:23: style: The scope of the variable 'p' can be reduced. [variableScope]
         int r, g, b, p;
                      ^
PDF/src/pngrtran.c:3964:14: style: The scope of the variable 'r' can be reduced. [variableScope]
         int r, g, b, p;
             ^
PDF/src/pngrtran.c:3964:17: style: The scope of the variable 'g' can be reduced. [variableScope]
         int r, g, b, p;
                ^
PDF/src/pngrtran.c:3964:20: style: The scope of the variable 'b' can be reduced. [variableScope]
         int r, g, b, p;
                   ^
PDF/src/pngrtran.c:3964:23: style: The scope of the variable 'p' can be reduced. [variableScope]
         int r, g, b, p;
                      ^
PDF/src/pngrtran.c:4121:16: style: The scope of the variable 'fin' can be reduced. [variableScope]
        double fin, fout;
               ^
PDF/src/pngrtran.c:4121:21: style: The scope of the variable 'fout' can be reduced. [variableScope]
        double fin, fout;
                    ^
PDF/src/pngrtran.c:3094:26: style: Variable '*dp' is reassigned a value before the old one has been used. [redundantAssignment]
                     *dp = (png_byte)background->gray;
                         ^
PDF/src/pngrtran.c:3082:29: note: *dp is assigned
                        *dp = *sp;
                            ^
PDF/src/pngrtran.c:3094:26: note: *dp is overwritten
                     *dp = (png_byte)background->gray;
                         ^
PDF/src/pngrtran.c:735:19: style: Variable 'color_type' is assigned a value that is never used. [unreadVariable]
   int color_type = png_ptr->color_type;
                  ^
PDF/src/pngrutil.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 67 configurations. Use --force to check all configurations. [toomanyconfigs]

^
PDF/src/pngrutil.c:2970:8: error:inconclusive: Using object that points to local variable 'extra' that is out of scope. [invalidLifetime]
   if (png_ptr->idat_size || png_ptr->zstream.avail_in)
       ^
PDF/src/pngrutil.c:2917:43: note: Address of variable taken here.
      png_ptr->zstream.next_out = (Byte *)&extra;
                                          ^
PDF/src/pngrutil.c:2914:12: note: Variable created here.
      char extra;
           ^
PDF/src/pngrutil.c:2970:8: note: Using object that points to local variable 'extra' that is out of scope.
   if (png_ptr->idat_size || png_ptr->zstream.avail_in)
       ^
PDF/src/pngrutil.c:574:13: warning: Redundant assignment of 'info_ptr' to itself. [selfAssignment]
   info_ptr =info_ptr; /* quiet compiler warnings about unused info_ptr */
            ^
PDF/src/pngrutil.c:2265:13: warning: Redundant assignment of 'info_ptr' to itself. [selfAssignment]
   info_ptr = info_ptr; /* quiet compiler warnings about unused info_ptr */
            ^
PDF/src/pngrutil.c:2915:11: style: The scope of the variable 'ret' can be reduced. [variableScope]
      int ret;
          ^
PDF/src/pngrutil.c:574:13: style: Variable 'info_ptr' is assigned a value that is never used. [unreadVariable]
   info_ptr =info_ptr; /* quiet compiler warnings about unused info_ptr */
            ^
PDF/src/pngrutil.c:2265:13: style: Variable 'info_ptr' is assigned a value that is never used. [unreadVariable]
   info_ptr = info_ptr; /* quiet compiler warnings about unused info_ptr */
            ^
PDF/src/pngset.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 50 configurations. Use --force to check all configurations. [toomanyconfigs]

^
PDF/src/pngtest.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 57 configurations. Use --force to check all configurations. [toomanyconfigs]

^
PDF/src/pngtrans.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 22 configurations. Use --force to check all configurations. [toomanyconfigs]

^
PDF/src/pngwrite.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 65 configurations. Use --force to check all configurations. [toomanyconfigs]

^
PDF/src/pngwrite.c:1512:15: warning: Redundant assignment of 'transforms' to itself. [selfAssignment]
   transforms = transforms; /* quiet compiler warnings */
              ^
PDF/src/pngwrite.c:1513:11: warning: Redundant assignment of 'params' to itself. [selfAssignment]
   params = params;
          ^
PDF/src/pngwrite.c:1512:15: style: Variable 'transforms' is assigned a value that is never used. [unreadVariable]
   transforms = transforms; /* quiet compiler warnings */
              ^
PDF/src/pngwrite.c:1513:11: style: Variable 'params' is assigned a value that is never used. [unreadVariable]
   params = params;
          ^
PDF/src/pngwtran.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations. [toomanyconfigs]

^
PDF/src/pngwutil.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 64 configurations. Use --force to check all configurations. [toomanyconfigs]

^
PDF/src/trees.c:718:9: style: The scope of the variable 'curlen' can be reduced. [variableScope]
    int curlen;                /* length of current code */
        ^
PDF/src/trees.c:763:9: style: The scope of the variable 'curlen' can be reduced. [variableScope]
    int curlen;                /* length of current code */
        ^
PDF/src/trees.c:1081:14: style: The scope of the variable 'dist' can be reduced. [variableScope]
    unsigned dist;      /* distance of matched string */
             ^
PDF/src/trees.c:1082:9: style: The scope of the variable 'lc' can be reduced. [variableScope]
    int lc;             /* match length or unmatched char (if dist == 0) */
        ^
PDF/src/trees.c:1084:14: style: The scope of the variable 'code' can be reduced. [variableScope]
    unsigned code;      /* the code to send */
             ^
PDF/src/trees.c:1085:9: style: The scope of the variable 'extra' can be reduced. [variableScope]
    int extra;          /* number of extra bits to send */
        ^
PDF/src/trees.c:1106:13: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
            send_code(s, code, dtree);       /* send the distance code */
            ^
PDF/src/zutil.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 22 configurations. Use --force to check all configurations. [toomanyconfigs]

^
PDF/src/zutil.c:305:31: style: Same expression on both sides of '-'. [duplicateExpression]
    if (opaque) items += size - size; /* make compiler happy */
                              ^
PDF/src/zutil.c:11:33: style: struct member 'internal_state::dummy' is never used. [unusedStructMember]
struct internal_state      {int dummy;}; /* for buggy compilers */
                                ^
PDF/src/zutil.c:277:24: style: Variable 'opaque' is assigned a value that is never used. [unreadVariable]
    if (opaque) opaque = 0; /* to make compiler happy */
                       ^
PDF/src/zutil.c:283:24: style: Variable 'opaque' is assigned a value that is never used. [unreadVariable]
    if (opaque) opaque = 0; /* to make compiler happy */
                       ^
PDF/testsuite/src/PDFTest.h:24:2: style: Class 'PDFTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 PDFTest(const std::string& name);
 ^
PageCompiler/src/ApacheCodeWriter.h:29:15: style: The function 'writeHeaderIncludes' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 virtual void writeHeaderIncludes(std::ostream& ostr);
              ^
PageCompiler/src/CodeWriter.h:47:15: note: Virtual function in base class
 virtual void writeHeaderIncludes(std::ostream& ostr);
              ^
PageCompiler/src/ApacheCodeWriter.h:29:15: note: Function in derived class
 virtual void writeHeaderIncludes(std::ostream& ostr);
              ^
PageCompiler/src/ApacheCodeWriter.h:30:15: style: The function 'writeFactoryClass' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 virtual void writeFactoryClass(std::ostream& ostr);
              ^
PageCompiler/src/CodeWriter.h:50:15: note: Virtual function in base class
 virtual void writeFactoryClass(std::ostream& ostr);
              ^
PageCompiler/src/ApacheCodeWriter.h:30:15: note: Function in derived class
 virtual void writeFactoryClass(std::ostream& ostr);
              ^
PageCompiler/src/ApacheCodeWriter.h:31:15: style: The function 'writeImplIncludes' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 virtual void writeImplIncludes(std::ostream& ostr);
              ^
PageCompiler/src/CodeWriter.h:51:15: note: Virtual function in base class
 virtual void writeImplIncludes(std::ostream& ostr);
              ^
PageCompiler/src/ApacheCodeWriter.h:31:15: note: Function in derived class
 virtual void writeImplIncludes(std::ostream& ostr);
              ^
PageCompiler/src/ApacheCodeWriter.h:32:15: style: The function 'writeFactory' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 virtual void writeFactory(std::ostream& ostr);
              ^
PageCompiler/src/CodeWriter.h:54:15: note: Virtual function in base class
 virtual void writeFactory(std::ostream& ostr);
              ^
PageCompiler/src/ApacheCodeWriter.h:32:15: note: Function in derived class
 virtual void writeFactory(std::ostream& ostr);
              ^
PageCompiler/src/ApacheCodeWriter.h:33:15: style: The function 'writeManifest' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 virtual void writeManifest(std::ostream& ostr);
              ^
PageCompiler/src/CodeWriter.h:59:15: note: Virtual function in base class
 virtual void writeManifest(std::ostream& ostr);
              ^
PageCompiler/src/ApacheCodeWriter.h:33:15: note: Function in derived class
 virtual void writeManifest(std::ostream& ostr);
              ^
PageCompiler/src/CodeWriter.h:61:7: performance:inconclusive: Technically the member function 'CodeWriter::beginGuard' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 void beginGuard(std::ostream& ostr, const std::string& headerFileName);
      ^
PageCompiler/src/CodeWriter.cpp:126:18: note: Technically the member function 'CodeWriter::beginGuard' can be static (but you may consider moving to unnamed namespace).
void CodeWriter::beginGuard(std::ostream& ostr, const std::string& headerFileName)
                 ^
PageCompiler/src/CodeWriter.h:61:7: note: Technically the member function 'CodeWriter::beginGuard' can be static (but you may consider moving to unnamed namespace).
 void beginGuard(std::ostream& ostr, const std::string& headerFileName);
      ^
PageCompiler/src/CodeWriter.h:62:7: performance:inconclusive: Technically the member function 'CodeWriter::endGuard' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 void endGuard(std::ostream& ostr, const std::string& headerFileName);
      ^
PageCompiler/src/CodeWriter.cpp:139:18: note: Technically the member function 'CodeWriter::endGuard' can be static (but you may consider moving to unnamed namespace).
void CodeWriter::endGuard(std::ostream& ostr, const std::string& headerFileName)
                 ^
PageCompiler/src/CodeWriter.h:62:7: note: Technically the member function 'CodeWriter::endGuard' can be static (but you may consider moving to unnamed namespace).
 void endGuard(std::ostream& ostr, const std::string& headerFileName);
      ^
PageCompiler/src/CodeWriter.h:66:7: style:inconclusive: Technically the member function 'CodeWriter::factoryClass' can be const. [functionConst]
 void factoryClass(std::ostream& ostr, const std::string& base);
      ^
PageCompiler/src/CodeWriter.cpp:176:18: note: Technically the member function 'CodeWriter::factoryClass' can be const.
void CodeWriter::factoryClass(std::ostream& ostr, const std::string& base)
                 ^
PageCompiler/src/CodeWriter.h:66:7: note: Technically the member function 'CodeWriter::factoryClass' can be const.
 void factoryClass(std::ostream& ostr, const std::string& base);
      ^
PageCompiler/src/CodeWriter.h:67:7: style:inconclusive: Technically the member function 'CodeWriter::factoryImpl' can be const. [functionConst]
 void factoryImpl(std::ostream& ostr, const std::string& arg);
      ^
PageCompiler/src/CodeWriter.cpp:186:18: note: Technically the member function 'CodeWriter::factoryImpl' can be const.
void CodeWriter::factoryImpl(std::ostream& ostr, const std::string& arg)
                 ^
PageCompiler/src/CodeWriter.h:67:7: note: Technically the member function 'CodeWriter::factoryImpl' can be const.
 void factoryImpl(std::ostream& ostr, const std::string& arg);
      ^
PageCompiler/src/CodeWriter.h:68:14: performance:inconclusive: Technically the member function 'CodeWriter::cleanupHandler' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 std::string cleanupHandler(std::string handler);
             ^
PageCompiler/src/CodeWriter.cpp:403:25: note: Technically the member function 'CodeWriter::cleanupHandler' can be static (but you may consider moving to unnamed namespace).
std::string CodeWriter::cleanupHandler(std::string handler)
                        ^
PageCompiler/src/CodeWriter.h:68:14: note: Technically the member function 'CodeWriter::cleanupHandler' can be static (but you may consider moving to unnamed namespace).
 std::string cleanupHandler(std::string handler);
             ^
PageCompiler/src/OSPCodeWriter.h:29:15: style: The function 'writeHeaderIncludes' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 virtual void writeHeaderIncludes(std::ostream& ostr);
              ^
PageCompiler/src/CodeWriter.h:47:15: note: Virtual function in base class
 virtual void writeHeaderIncludes(std::ostream& ostr);
              ^
PageCompiler/src/OSPCodeWriter.h:29:15: note: Function in derived class
 virtual void writeHeaderIncludes(std::ostream& ostr);
              ^
PageCompiler/src/OSPCodeWriter.h:30:15: style: The function 'writeHandlerClass' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 virtual void writeHandlerClass(std::ostream& ostr);
              ^
PageCompiler/src/CodeWriter.h:48:15: note: Virtual function in base class
 virtual void writeHandlerClass(std::ostream& ostr);
              ^
PageCompiler/src/OSPCodeWriter.h:30:15: note: Function in derived class
 virtual void writeHandlerClass(std::ostream& ostr);
              ^
PageCompiler/src/OSPCodeWriter.h:31:15: style: The function 'writeHandlerMembers' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 virtual void writeHandlerMembers(std::ostream& ostr);
              ^
PageCompiler/src/CodeWriter.h:49:15: note: Virtual function in base class
 virtual void writeHandlerMembers(std::ostream& ostr);
              ^
PageCompiler/src/OSPCodeWriter.h:31:15: note: Function in derived class
 virtual void writeHandlerMembers(std::ostream& ostr);
              ^
PageCompiler/src/OSPCodeWriter.h:32:15: style: The function 'writeFactoryClass' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 virtual void writeFactoryClass(std::ostream& ostr);
              ^
PageCompiler/src/CodeWriter.h:50:15: note: Virtual function in base class
 virtual void writeFactoryClass(std::ostream& ostr);
              ^
PageCompiler/src/OSPCodeWriter.h:32:15: note: Function in derived class
 virtual void writeFactoryClass(std::ostream& ostr);
              ^
PageCompiler/src/OSPCodeWriter.h:33:15: style: The function 'writeImplIncludes' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 virtual void writeImplIncludes(std::ostream& ostr);
              ^
PageCompiler/src/CodeWriter.h:51:15: note: Virtual function in base class
 virtual void writeImplIncludes(std::ostream& ostr);
              ^
PageCompiler/src/OSPCodeWriter.h:33:15: note: Function in derived class
 virtual void writeImplIncludes(std::ostream& ostr);
              ^
PageCompiler/src/OSPCodeWriter.h:34:15: style: The function 'writeConstructor' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 virtual void writeConstructor(std::ostream& ostr);
              ^
PageCompiler/src/CodeWriter.h:52:15: note: Virtual function in base class
 virtual void writeConstructor(std::ostream& ostr);
              ^
PageCompiler/src/OSPCodeWriter.h:34:15: note: Function in derived class
 virtual void writeConstructor(std::ostream& ostr);
              ^
PageCompiler/src/OSPCodeWriter.h:35:15: style: The function 'writeFactory' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 virtual void writeFactory(std::ostream& ostr);
              ^
PageCompiler/src/CodeWriter.h:54:15: note: Virtual function in base class
 virtual void writeFactory(std::ostream& ostr);
              ^
PageCompiler/src/OSPCodeWriter.h:35:15: note: Function in derived class
 virtual void writeFactory(std::ostream& ostr);
              ^
PageCompiler/src/OSPCodeWriter.h:36:15: style: The function 'writeSession' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 virtual void writeSession(std::ostream& ostr);
              ^
PageCompiler/src/CodeWriter.h:55:15: note: Virtual function in base class
 virtual void writeSession(std::ostream& ostr);
              ^
PageCompiler/src/OSPCodeWriter.h:36:15: note: Function in derived class
 virtual void writeSession(std::ostream& ostr);
              ^
PageCompiler/src/PageReader.h:70:7: performance:inconclusive: Technically the member function 'PageReader::nextToken' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 void nextToken(std::istream& istr, std::string& token);
      ^
PageCompiler/src/PageReader.cpp:291:18: note: Technically the member function 'PageReader::nextToken' can be static (but you may consider moving to unnamed namespace).
void PageReader::nextToken(std::istream& istr, std::string& token)
                 ^
PageCompiler/src/PageReader.h:70:7: note: Technically the member function 'PageReader::nextToken' can be static (but you may consider moving to unnamed namespace).
 void nextToken(std::istream& istr, std::string& token);
      ^
PocoDoc/src/DocWriter.cpp:2291:22: warning: Either the condition 'ch!=-1' is redundant or std::isspace() argument nr 1 can have invalid value. The value is -1 but the valid values are '0:255'. [invalidFunctionArg]
 while (std::isspace(ch)) ch = istr.get();
                     ^
PocoDoc/src/DocWriter.cpp:2289:12: note: Assuming that condition 'ch!=-1' is not redundant
 while (ch != -1 && ch != '\n') { category += (char) ch; ch = istr.get(); }
           ^
PocoDoc/src/DocWriter.cpp:2291:22: note: Invalid argument
 while (std::isspace(ch)) ch = istr.get();
                     ^
PocoDoc/src/DocWriter.h:105:7: performance:inconclusive: Technically the member function 'DocWriter::scanTOC' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 void scanTOC(const std::string& text, TOC& toc);
      ^
PocoDoc/src/DocWriter.cpp:2326:17: note: Technically the member function 'DocWriter::scanTOC' can be static (but you may consider moving to unnamed namespace).
void DocWriter::scanTOC(const std::string& text, TOC& toc)
                ^
PocoDoc/src/DocWriter.h:105:7: note: Technically the member function 'DocWriter::scanTOC' can be static (but you may consider moving to unnamed namespace).
 void scanTOC(const std::string& text, TOC& toc);
      ^
PocoDoc/src/DocWriter.h:126:7: style:inconclusive: Technically the member function 'DocWriter::writeHeader' can be const. [functionConst]
 void writeHeader(std::ostream& ostr, const std::string& title, const std::string& extraScript = "", int options = 0);
      ^
PocoDoc/src/DocWriter.cpp:630:17: note: Technically the member function 'DocWriter::writeHeader' can be const.
void DocWriter::writeHeader(std::ostream& ostr, const std::string& title, const std::string& extraScript, int options)
                ^
PocoDoc/src/DocWriter.h:126:7: note: Technically the member function 'DocWriter::writeHeader' can be const.
 void writeHeader(std::ostream& ostr, const std::string& title, const std::string& extraScript = "", int options = 0);
      ^
PocoDoc/src/DocWriter.h:127:7: performance:inconclusive: Technically the member function 'DocWriter::writeNavigationFrame' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 void writeNavigationFrame(std::ostream& ostr, const std::string& group, const std::string& item);
      ^
PocoDoc/src/DocWriter.cpp:800:17: note: Technically the member function 'DocWriter::writeNavigationFrame' can be static (but you may consider moving to unnamed namespace).
void DocWriter::writeNavigationFrame(std::ostream& ostr, const std::string& group, const std::string& item)
                ^
PocoDoc/src/DocWriter.h:127:7: note: Technically the member function 'DocWriter::writeNavigationFrame' can be static (but you may consider moving to unnamed namespace).
 void writeNavigationFrame(std::ostream& ostr, const std::string& group, const std::string& item);
      ^
PocoDoc/src/DocWriter.h:150:7: performance:inconclusive: Technically the member function 'DocWriter::nextToken' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 void nextToken(std::string::const_iterator& it, const std::string::const_iterator& end, std::string& token);
      ^
PocoDoc/src/DocWriter.cpp:1388:17: note: Technically the member function 'DocWriter::nextToken' can be static (but you may consider moving to unnamed namespace).
void DocWriter::nextToken(std::string::const_iterator& it, const std::string::const_iterator& end, std::string& token)
                ^
PocoDoc/src/DocWriter.h:150:7: note: Technically the member function 'DocWriter::nextToken' can be static (but you may consider moving to unnamed namespace).
 void nextToken(std::string::const_iterator& it, const std::string::const_iterator& end, std::string& token);
      ^
PocoDoc/src/DocWriter.h:154:7: performance:inconclusive: Technically the member function 'DocWriter::writeFileInfo' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 void writeFileInfo(std::ostream& ostr, const Poco::CppParser::Symbol* pSymbol);
      ^
PocoDoc/src/DocWriter.cpp:1500:17: note: Technically the member function 'DocWriter::writeFileInfo' can be static (but you may consider moving to unnamed namespace).
void DocWriter::writeFileInfo(std::ostream& ostr, const Symbol* pSymbol)
                ^
PocoDoc/src/DocWriter.h:154:7: note: Technically the member function 'DocWriter::writeFileInfo' can be static (but you may consider moving to unnamed namespace).
 void writeFileInfo(std::ostream& ostr, const Poco::CppParser::Symbol* pSymbol);
      ^
PocoDoc/src/DocWriter.h:155:7: performance:inconclusive: Technically the member function 'DocWriter::writeInheritance' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 void writeInheritance(std::ostream& ostr, const Poco::CppParser::Struct* pStruct);
      ^
PocoDoc/src/DocWriter.cpp:1517:17: note: Technically the member function 'DocWriter::writeInheritance' can be static (but you may consider moving to unnamed namespace).
void DocWriter::writeInheritance(std::ostream& ostr, const Struct* pStruct)
                ^
PocoDoc/src/DocWriter.h:155:7: note: Technically the member function 'DocWriter::writeInheritance' can be static (but you may consider moving to unnamed namespace).
 void writeInheritance(std::ostream& ostr, const Poco::CppParser::Struct* pStruct);
      ^
PocoDoc/src/DocWriter.h:156:7: performance:inconclusive: Technically the member function 'DocWriter::writeMethodSummary' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 void writeMethodSummary(std::ostream& ostr, const Poco::CppParser::Struct* pStruct);
      ^
PocoDoc/src/DocWriter.cpp:1584:17: note: Technically the member function 'DocWriter::writeMethodSummary' can be static (but you may consider moving to unnamed namespace).
void DocWriter::writeMethodSummary(std::ostream& ostr, const Struct* pStruct)
                ^
PocoDoc/src/DocWriter.h:156:7: note: Technically the member function 'DocWriter::writeMethodSummary' can be static (but you may consider moving to unnamed namespace).
 void writeMethodSummary(std::ostream& ostr, const Poco::CppParser::Struct* pStruct);
      ^
PocoDoc/src/DocWriter.h:158:7: performance:inconclusive: Technically the member function 'DocWriter::writeNameSpacesSummary' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 void writeNameSpacesSummary(std::ostream& ostr, const Poco::CppParser::NameSpace* pNameSpace);
      ^
PocoDoc/src/DocWriter.cpp:1658:17: note: Technically the member function 'DocWriter::writeNameSpacesSummary' can be static (but you may consider moving to unnamed namespace).
void DocWriter::writeNameSpacesSummary(std::ostream& ostr, const NameSpace* pNameSpace)
                ^
PocoDoc/src/DocWriter.h:158:7: note: Technically the member function 'DocWriter::writeNameSpacesSummary' can be static (but you may consider moving to unnamed namespace).
 void writeNameSpacesSummary(std::ostream& ostr, const Poco::CppParser::NameSpace* pNameSpace);
      ^
PocoDoc/src/DocWriter.h:159:7: performance:inconclusive: Technically the member function 'DocWriter::writeNameSpaces' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 void writeNameSpaces(std::ostream& ostr, const Poco::CppParser::NameSpace* pNameSpace);
      ^
PocoDoc/src/DocWriter.cpp:1675:17: note: Technically the member function 'DocWriter::writeNameSpaces' can be static (but you may consider moving to unnamed namespace).
void DocWriter::writeNameSpaces(std::ostream& ostr, const NameSpace* pNameSpace)
                ^
PocoDoc/src/DocWriter.h:159:7: note: Technically the member function 'DocWriter::writeNameSpaces' can be static (but you may consider moving to unnamed namespace).
 void writeNameSpaces(std::ostream& ostr, const Poco::CppParser::NameSpace* pNameSpace);
      ^
PocoDoc/src/DocWriter.h:160:7: performance:inconclusive: Technically the member function 'DocWriter::writeClassesSummary' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 void writeClassesSummary(std::ostream& ostr, const Poco::CppParser::NameSpace* pNameSpace);
      ^
PocoDoc/src/DocWriter.cpp:1694:17: note: Technically the member function 'DocWriter::writeClassesSummary' can be static (but you may consider moving to unnamed namespace).
void DocWriter::writeClassesSummary(std::ostream& ostr, const NameSpace* pNameSpace)
                ^
PocoDoc/src/DocWriter.h:160:7: note: Technically the member function 'DocWriter::writeClassesSummary' can be static (but you may consider moving to unnamed namespace).
 void writeClassesSummary(std::ostream& ostr, const Poco::CppParser::NameSpace* pNameSpace);
      ^
PocoDoc/src/DocWriter.h:163:7: performance:inconclusive: Technically the member function 'DocWriter::writeTypesSummary' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 void writeTypesSummary(std::ostream& ostr, const Poco::CppParser::NameSpace* pNameSpace);
      ^
PocoDoc/src/DocWriter.cpp:1743:17: note: Technically the member function 'DocWriter::writeTypesSummary' can be static (but you may consider moving to unnamed namespace).
void DocWriter::writeTypesSummary(std::ostream& ostr, const NameSpace* pNameSpace)
                ^
PocoDoc/src/DocWriter.h:163:7: note: Technically the member function 'DocWriter::writeTypesSummary' can be static (but you may consider moving to unnamed namespace).
 void writeTypesSummary(std::ostream& ostr, const Poco::CppParser::NameSpace* pNameSpace);
      ^
PocoDoc/src/DocWriter.h:164:7: performance:inconclusive: Technically the member function 'DocWriter::writeAliasesSummary' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 void writeAliasesSummary(std::ostream& ostr, const Poco::CppParser::NameSpace* pNameSpace);
      ^
PocoDoc/src/DocWriter.cpp:1760:17: note: Technically the member function 'DocWriter::writeAliasesSummary' can be static (but you may consider moving to unnamed namespace).
void DocWriter::writeAliasesSummary(std::ostream& ostr, const NameSpace* pNameSpace)
                ^
PocoDoc/src/DocWriter.h:164:7: note: Technically the member function 'DocWriter::writeAliasesSummary' can be static (but you may consider moving to unnamed namespace).
 void writeAliasesSummary(std::ostream& ostr, const Poco::CppParser::NameSpace* pNameSpace);
      ^
PocoDoc/src/DocWriter.h:173:7: performance:inconclusive: Technically the member function 'DocWriter::writeFunctionsSummary' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 void writeFunctionsSummary(std::ostream& ostr, const Poco::CppParser::NameSpace* pNameSpace);
      ^
PocoDoc/src/DocWriter.cpp:1930:17: note: Technically the member function 'DocWriter::writeFunctionsSummary' can be static (but you may consider moving to unnamed namespace).
void DocWriter::writeFunctionsSummary(std::ostream& ostr, const NameSpace* pNameSpace)
                ^
PocoDoc/src/DocWriter.h:173:7: note: Technically the member function 'DocWriter::writeFunctionsSummary' can be static (but you may consider moving to unnamed namespace).
 void writeFunctionsSummary(std::ostream& ostr, const Poco::CppParser::NameSpace* pNameSpace);
      ^
PocoDoc/src/DocWriter.h:182:7: style:inconclusive: Technically the member function 'DocWriter::writeTargetLink' can be const. [functionConst]
 void writeTargetLink(std::ostream& ostr, const std::string& uri, const std::string& text, const std::string& target);
      ^
PocoDoc/src/DocWriter.cpp:2114:17: note: Technically the member function 'DocWriter::writeTargetLink' can be const.
void DocWriter::writeTargetLink(std::ostream& ostr, const std::string& uri, const std::string& text, const std::string& target)
                ^
PocoDoc/src/DocWriter.h:182:7: note: Technically the member function 'DocWriter::writeTargetLink' can be const.
 void writeTargetLink(std::ostream& ostr, const std::string& uri, const std::string& text, const std::string& target);
      ^
PocoDoc/src/DocWriter.cpp:773:6: style: The if condition is the same as the previous if condition [duplicateCondition]
 if (isTemplate)
     ^
PocoDoc/src/DocWriter.cpp:756:6: note: First condition
 if (isTemplate)
     ^
PocoDoc/src/DocWriter.cpp:773:6: note: Second condition
 if (isTemplate)
     ^
PocoDoc/src/DocWriter.cpp:2361:6: style: The scope of the variable 'lastLevel' can be reduced. [variableScope]
 int lastLevel = 0;
     ^
PocoDoc/src/DocWriter.cpp:1914:64: style:inconclusive: Function 'writeMethods' argument 2 names different: declaration 'pNameSpace' definition 'pStruct'. [funcArgNamesDifferent]
void DocWriter::writeMethods(std::ostream& ostr, const Struct* pStruct)
                                                               ^
PocoDoc/src/DocWriter.h:172:71: note: Function 'writeMethods' argument 2 names different: declaration 'pNameSpace' definition 'pStruct'.
 void writeMethods(std::ostream& ostr, const Poco::CppParser::Struct* pNameSpace);
                                                                      ^
PocoDoc/src/DocWriter.cpp:1914:64: note: Function 'writeMethods' argument 2 names different: declaration 'pNameSpace' definition 'pStruct'.
void DocWriter::writeMethods(std::ostream& ostr, const Struct* pStruct)
                                                               ^
PocoDoc/src/DocWriter.cpp:2082:74: style:inconclusive: Function 'writeNameListItem' argument 2 names different: declaration 'name' definition 'str'. [funcArgNamesDifferent]
void DocWriter::writeNameListItem(std::ostream& ostr, const std::string& str, const Symbol* pSymbol, const NameSpace* pNameSpace, bool& first)
                                                                         ^
PocoDoc/src/DocWriter.h:178:71: note: Function 'writeNameListItem' argument 2 names different: declaration 'name' definition 'str'.
 static void writeNameListItem(std::ostream& ostr, const std::string& name, const Poco::CppParser::Symbol* pSymbol, const Poco::CppParser::NameSpace* pNameSpace, bool& first);
                                                                      ^
PocoDoc/src/DocWriter.cpp:2082:74: note: Function 'writeNameListItem' argument 2 names different: declaration 'name' definition 'str'.
void DocWriter::writeNameListItem(std::ostream& ostr, const std::string& str, const Symbol* pSymbol, const NameSpace* pNameSpace, bool& first)
                                                                         ^
PocoDoc/src/DocWriter.cpp:2102:89: style:inconclusive: Function 'writeLink' argument 3 names different: declaration 'text' definition 'name'. [funcArgNamesDifferent]
void DocWriter::writeLink(std::ostream& ostr, const Symbol* pSymbol, const std::string& name)
                                                                                        ^
PocoDoc/src/DocWriter.h:180:103: note: Function 'writeLink' argument 3 names different: declaration 'text' definition 'name'.
 static void writeLink(std::ostream& ostr, const Poco::CppParser::Symbol* pSymbol, const std::string& text);
                                                                                                      ^
PocoDoc/src/DocWriter.cpp:2102:89: note: Function 'writeLink' argument 3 names different: declaration 'text' definition 'name'.
void DocWriter::writeLink(std::ostream& ostr, const Symbol* pSymbol, const std::string& name)
                                                                                        ^
PocoDoc/src/DocWriter.cpp:2507:54: style:inconclusive: Function 'projectURI' argument 1 names different: declaration 'id' definition 'proj'. [funcArgNamesDifferent]
std::string DocWriter::projectURI(const std::string& proj)
                                                     ^
PocoDoc/src/DocWriter.h:196:51: note: Function 'projectURI' argument 1 names different: declaration 'id' definition 'proj'.
 static std::string projectURI(const std::string& id);
                                                  ^
PocoDoc/src/DocWriter.cpp:2507:54: note: Function 'projectURI' argument 1 names different: declaration 'id' definition 'proj'.
std::string DocWriter::projectURI(const std::string& proj)
                                                     ^
PocoDoc/src/DocWriter.cpp:1571:17: style: Local variable 'derived' shadows outer variable [shadowVariable]
    std::string derived;
                ^
PocoDoc/src/DocWriter.cpp:1563:21: note: Shadowed declaration
  Struct::StructSet derived;
                    ^
PocoDoc/src/DocWriter.cpp:1571:17: note: Shadow variable
    std::string derived;
                ^
PocoDoc/src/DocWriter.cpp:1871:22: style: Local variable 'name' shadows outer variable [shadowVariable]
  const std::string& name = (*it)->name();
                     ^
PocoDoc/src/DocWriter.cpp:1860:21: note: Shadowed declaration
 const std::string& name = pEnum->name();
                    ^
PocoDoc/src/DocWriter.cpp:1871:22: note: Shadow variable
  const std::string& name = (*it)->name();
                     ^
PocoDoc/src/DocWriter.cpp:753:39: style: Variable 'posFirstClose' is assigned a value that is never used. [unreadVariable]
 std::string::size_type posFirstClose = std::string::npos;
                                      ^
PocoDoc/src/DocWriter.cpp:2361:16: style: Variable 'lastLevel' is assigned a value that is never used. [unreadVariable]
 int lastLevel = 0;
               ^
PocoDoc/src/DocWriter.cpp:2386:13: style: Variable 'lastLevel' is assigned a value that is never used. [unreadVariable]
  lastLevel = level;
            ^
PocoDoc/src/PocoDoc.cpp:275:23: style: Variable 'newPath' is assigned a value that is never used. [unreadVariable]
   std::string newPath(Environment::get("PATH"));
                      ^
PocoDoc/src/PocoDoc.cpp:276:12: style: Variable 'newPath' is assigned a value that is never used. [unreadVariable]
   newPath += Path::pathSeparator();
           ^
PocoDoc/src/PocoDoc.cpp:277:12: style: Variable 'newPath' is assigned a value that is never used. [unreadVariable]
   newPath += path;
           ^
ProGen/src/ProGen.cpp:778:18: style: Local variable 'tool' shadows outer argument [shadowArgument]
     std::string tool = config().getString("progen.postprocess." + postprocess + ".tool", "");
                 ^
ProGen/src/ProGen.cpp:627:190: note: Shadowed declaration
 void generateProject(const Poco::Util::AbstractConfiguration& projectConfig, const Poco::Path& projectPath, const Poco::Path& templatePath, const std::string& platform, const std::string& tool)
                                                                                                                                                                                             ^
ProGen/src/ProGen.cpp:778:18: note: Shadow variable
     std::string tool = config().getString("progen.postprocess." + postprocess + ".tool", "");
                 ^
ProGen/src/ProGen.cpp:814:44: style: Local variable 'pProjectDoc' shadows outer variable [shadowVariable]
        Poco::AutoPtr<Poco::XML::Document> pProjectDoc = domParser.parse(vcxprojPath.toString());
                                           ^
ProGen/src/ProGen.cpp:654:40: note: Shadowed declaration
    Poco::AutoPtr<Poco::XML::Document> pProjectDoc = domParser.parse(projectTemplatePath.toString());
                                       ^
ProGen/src/ProGen.cpp:814:44: note: Shadow variable
        Poco::AutoPtr<Poco::XML::Document> pProjectDoc = domParser.parse(vcxprojPath.toString());
                                           ^
ProGen/src/ProGen.cpp:824:44: style: Local variable 'pProjectDoc' shadows outer variable [shadowVariable]
        Poco::AutoPtr<Poco::XML::Document> pProjectDoc = domParser.parse(vcxprojPath.toString());
                                           ^
ProGen/src/ProGen.cpp:654:40: note: Shadowed declaration
    Poco::AutoPtr<Poco::XML::Document> pProjectDoc = domParser.parse(projectTemplatePath.toString());
                                       ^
ProGen/src/ProGen.cpp:824:44: note: Shadow variable
        Poco::AutoPtr<Poco::XML::Document> pProjectDoc = domParser.parse(vcxprojPath.toString());
                                           ^
ProGen/src/ProGen.cpp:834:44: style: Local variable 'pProjectDoc' shadows outer variable [shadowVariable]
        Poco::AutoPtr<Poco::XML::Document> pProjectDoc = domParser.parse(vcxprojPath.toString());
                                           ^
ProGen/src/ProGen.cpp:654:40: note: Shadowed declaration
    Poco::AutoPtr<Poco::XML::Document> pProjectDoc = domParser.parse(projectTemplatePath.toString());
                                       ^
ProGen/src/ProGen.cpp:834:44: note: Shadow variable
        Poco::AutoPtr<Poco::XML::Document> pProjectDoc = domParser.parse(vcxprojPath.toString());
                                           ^
ProGen/src/ProGen.cpp:844:44: style: Local variable 'pProjectDoc' shadows outer variable [shadowVariable]
        Poco::AutoPtr<Poco::XML::Document> pProjectDoc = domParser.parse(vcxprojPath.toString());
                                           ^
ProGen/src/ProGen.cpp:654:40: note: Shadowed declaration
    Poco::AutoPtr<Poco::XML::Document> pProjectDoc = domParser.parse(projectTemplatePath.toString());
                                       ^
ProGen/src/ProGen.cpp:844:44: note: Shadow variable
        Poco::AutoPtr<Poco::XML::Document> pProjectDoc = domParser.parse(vcxprojPath.toString());
                                           ^
ProGen/src/ProGen.cpp:854:44: style: Local variable 'pProjectDoc' shadows outer variable [shadowVariable]
        Poco::AutoPtr<Poco::XML::Document> pProjectDoc = domParser.parse(vcxprojPath.toString());
                                           ^
ProGen/src/ProGen.cpp:654:40: note: Shadowed declaration
    Poco::AutoPtr<Poco::XML::Document> pProjectDoc = domParser.parse(projectTemplatePath.toString());
                                       ^
ProGen/src/ProGen.cpp:854:44: note: Shadow variable
        Poco::AutoPtr<Poco::XML::Document> pProjectDoc = domParser.parse(vcxprojPath.toString());
                                           ^
ProGen/src/ProGen.cpp:864:44: style: Local variable 'pProjectDoc' shadows outer variable [shadowVariable]
        Poco::AutoPtr<Poco::XML::Document> pProjectDoc = domParser.parse(vcxprojPath.toString());
                                           ^
ProGen/src/ProGen.cpp:654:40: note: Shadowed declaration
    Poco::AutoPtr<Poco::XML::Document> pProjectDoc = domParser.parse(projectTemplatePath.toString());
                                       ^
ProGen/src/ProGen.cpp:864:44: note: Shadow variable
        Poco::AutoPtr<Poco::XML::Document> pProjectDoc = domParser.parse(vcxprojPath.toString());
                                           ^
ProGen/src/ProGen.cpp:874:44: style: Local variable 'pProjectDoc' shadows outer variable [shadowVariable]
        Poco::AutoPtr<Poco::XML::Document> pProjectDoc = domParser.parse(vcxprojPath.toString());
                                           ^
ProGen/src/ProGen.cpp:654:40: note: Shadowed declaration
    Poco::AutoPtr<Poco::XML::Document> pProjectDoc = domParser.parse(projectTemplatePath.toString());
                                       ^
ProGen/src/ProGen.cpp:874:44: note: Shadow variable
        Poco::AutoPtr<Poco::XML::Document> pProjectDoc = domParser.parse(vcxprojPath.toString());
                                           ^
ProGen/src/ProGen.cpp:884:44: style: Local variable 'pProjectDoc' shadows outer variable [shadowVariable]
        Poco::AutoPtr<Poco::XML::Document> pProjectDoc = domParser.parse(vcxprojPath.toString());
                                           ^
ProGen/src/ProGen.cpp:654:40: note: Shadowed declaration
    Poco::AutoPtr<Poco::XML::Document> pProjectDoc = domParser.parse(projectTemplatePath.toString());
                                       ^
ProGen/src/ProGen.cpp:884:44: note: Shadow variable
        Poco::AutoPtr<Poco::XML::Document> pProjectDoc = domParser.parse(vcxprojPath.toString());
                                           ^
ProGen/src/ProGen.cpp:891:19: style: Local variable 'projectFile' shadows outer variable [shadowVariable]
       Poco::File projectFile(vcprojPath.toString());
                  ^
ProGen/src/ProGen.cpp:792:18: note: Shadowed declaration
      Poco::File projectFile(vcxprojPath.toString());
                 ^
ProGen/src/ProGen.cpp:891:19: note: Shadow variable
       Poco::File projectFile(vcprojPath.toString());
                  ^
ProGen/src/ProGen.cpp:345:31: style: Variable 'projectPlatform' is assigned a value that is never used. [unreadVariable]
  std::string projectPlatform = templateProps.getString("project.platform", platform);
                              ^
Prometheus/testsuite/src/CallbackMetricTest.h:23:2: style: Class 'CallbackMetricTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 CallbackMetricTest(const std::string& name);
 ^
Prometheus/testsuite/src/CounterTest.h:23:2: style: Class 'CounterTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 CounterTest(const std::string& name);
 ^
Prometheus/testsuite/src/GaugeTest.h:23:2: style: Class 'GaugeTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 GaugeTest(const std::string& name);
 ^
Prometheus/testsuite/src/HistogramTest.h:23:2: style: Class 'HistogramTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 HistogramTest(const std::string& name);
 ^
Prometheus/testsuite/src/IntCounterTest.h:23:2: style: Class 'IntCounterTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 IntCounterTest(const std::string& name);
 ^
Prometheus/testsuite/src/IntGaugeTest.h:23:2: style: Class 'IntGaugeTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 IntGaugeTest(const std::string& name);
 ^
Redis/testsuite/src/RedisTest.cpp:36:2: performance: Variable '_host' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
 _host = "10.0.2.2";
 ^
Redis/testsuite/src/RedisTest.cpp:1618:7: performance:inconclusive: Technically the member function 'RedisSubscriber::onError' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 void onError(const void* pSender, RedisEventArgs& args)
      ^
Redis/testsuite/src/RedisTest.h:25:2: style: Class 'RedisTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 RedisTest(const std::string& name);
 ^
SevenZip/src/7zAlloc.c:23:5: warning: Redundant assignment of 'p' to itself. [selfAssignment]
  p = p;
    ^
SevenZip/src/7zAlloc.c:35:5: warning: Redundant assignment of 'p' to itself. [selfAssignment]
  p = p;
    ^
SevenZip/src/7zAlloc.c:48:5: warning: Redundant assignment of 'p' to itself. [selfAssignment]
  p = p;
    ^
SevenZip/src/7zAlloc.c:63:5: warning: Redundant assignment of 'p' to itself. [selfAssignment]
  p = p;
    ^
SevenZip/src/7zAlloc.c:23:5: style: Variable 'p' is assigned a value that is never used. [unreadVariable]
  p = p;
    ^
SevenZip/src/7zAlloc.c:35:5: style: Variable 'p' is assigned a value that is never used. [unreadVariable]
  p = p;
    ^
SevenZip/src/7zAlloc.c:48:5: style: Variable 'p' is assigned a value that is never used. [unreadVariable]
  p = p;
    ^
SevenZip/src/7zAlloc.c:63:5: style: Variable 'p' is assigned a value that is never used. [unreadVariable]
  p = p;
    ^
SevenZip/src/7zAlloc.c:27:3: portability: %d in format string (no. 1) requires 'int' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_sint]
  fprintf(stderr, "\nAlloc %10d bytes; count = %10d", size, g_allocCount);
  ^
SevenZip/src/7zAlloc.c:52:3: portability: %d in format string (no. 1) requires 'int' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_sint]
  fprintf(stderr, "\nAlloc_temp %10d bytes;  count = %10d", size, g_allocCountTemp);
  ^
SevenZip/src/7zAlloc.c:58:3: style:inconclusive: Consecutive return, break, continue, goto or throw statements are unnecessary. [duplicateBreak]
  return malloc(size);
  ^
SevenZip/src/7zAlloc.c:75:3: style:inconclusive: Statements following return, break, continue, goto or throw will never be executed. [unreachableCode]
  free(address);
  ^
SevenZip/src/7zCrc.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations. [toomanyconfigs]

^
SevenZip/src/7zCrc.c:69:27: style: Condition '*(const unsigned char*)&k==1' is always true [knownConditionTrueFalse]
    if (*(const Byte *)&k == 1)
                          ^
SevenZip/src/7zCrc.c:68:16: note: Assignment 'k=1', assigned value is 1
    UInt32 k = 1;
               ^
SevenZip/src/7zCrc.c:69:27: note: Condition '*(const unsigned char*)&k==1' is always true
    if (*(const Byte *)&k == 1)
                          ^
SevenZip/src/7zCrc.c:29:38: style:inconclusive: Function 'CrcUpdate' argument 1 names different: declaration 'crc' definition 'v'. [funcArgNamesDifferent]
UInt32 MY_FAST_CALL CrcUpdate(UInt32 v, const void *data, size_t size)
                                     ^
SevenZip/src/7zCrc.h:20:38: note: Function 'CrcUpdate' argument 1 names different: declaration 'crc' definition 'v'.
UInt32 MY_FAST_CALL CrcUpdate(UInt32 crc, const void *data, size_t size);
                                     ^
SevenZip/src/7zCrc.c:29:38: note: Function 'CrcUpdate' argument 1 names different: declaration 'crc' definition 'v'.
UInt32 MY_FAST_CALL CrcUpdate(UInt32 v, const void *data, size_t size)
                                     ^
SevenZip/src/7zCrcOpt.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations. [toomanyconfigs]

^
SevenZip/src/7zDec.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations. [toomanyconfigs]

^
SevenZip/src/7zDec.c:460:20: style:inconclusive: Function 'SzFolder_Decode' argument 3 names different: declaration 'stream' definition 'inStream'. [funcArgNamesDifferent]
    ILookInStream *inStream, UInt64 startPos,
                   ^
SevenZip/src/7z.h:85:20: note: Function 'SzFolder_Decode' argument 3 names different: declaration 'stream' definition 'inStream'.
    ILookInStream *stream, UInt64 startPos,
                   ^
SevenZip/src/7zDec.c:460:20: note: Function 'SzFolder_Decode' argument 3 names different: declaration 'stream' definition 'inStream'.
    ILookInStream *inStream, UInt64 startPos,
                   ^
SevenZip/src/7zDec.c:74:14: style: Variable 's.inStream' is assigned a value that is never used. [unreadVariable]
  s.inStream = inStream;
             ^
SevenZip/src/7zIn.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations. [toomanyconfigs]

^
SevenZip/src/7zIn.c:474:26: warning: The address of local variable 'crcsDefined' might be accessed at non-zero index. [objectIndex]
    if ((*digestsDefined)[i])
                         ^
SevenZip/src/7zIn.c:697:48: note: Address of variable taken here.
      res = SzReadHashDigests(sd, *numFolders, &crcsDefined, &crcs, allocTemp);
                                               ^
SevenZip/src/7zIn.c:697:48: note: Calling function 'SzReadHashDigests', 3rd argument '&crcsDefined' value is lifetime=crcsDefined
      res = SzReadHashDigests(sd, *numFolders, &crcsDefined, &crcs, allocTemp);
                                               ^
SevenZip/src/7zIn.c:471:3: note: Assuming condition is Assuming condition is false
  RINOK(SzReadBoolVector2(sd, numItems, digestsDefined, alloc));
  ^
SevenZip/src/7zIn.c:474:26: note: The address of local variable 'crcsDefined' might be accessed at non-zero index.
    if ((*digestsDefined)[i])
                         ^
SevenZip/src/7zIn.c:474:26: warning: The address of local variable 'digestsDefined2' might be accessed at non-zero index. [objectIndex]
    if ((*digestsDefined)[i])
                         ^
SevenZip/src/7zIn.c:822:52: note: Address of variable taken here.
      SRes res = SzReadHashDigests(sd, numDigests, &digestsDefined2, &digests2, allocTemp);
                                                   ^
SevenZip/src/7zIn.c:822:52: note: Calling function 'SzReadHashDigests', 3rd argument '&digestsDefined2' value is lifetime=digestsDefined2
      SRes res = SzReadHashDigests(sd, numDigests, &digestsDefined2, &digests2, allocTemp);
                                                   ^
SevenZip/src/7zIn.c:471:3: note: Assuming condition is Assuming condition is false
  RINOK(SzReadBoolVector2(sd, numItems, digestsDefined, alloc));
  ^
SevenZip/src/7zIn.c:474:26: note: The address of local variable 'digestsDefined2' might be accessed at non-zero index.
    if ((*digestsDefined)[i])
                         ^
SevenZip/src/7zIn.c:44:10: style: The scope of the variable 'i' can be reduced. [variableScope]
  UInt32 i;
         ^
SevenZip/src/7zIn.c:118:10: style: The scope of the variable 'i' can be reduced. [variableScope]
  UInt32 i;
         ^
SevenZip/src/7zIn.c:780:12: style: The scope of the variable 'j' can be reduced. [variableScope]
    UInt32 j;
           ^
SevenZip/src/7zIn.c:819:11: style: The scope of the variable 'digestIndex' can be reduced. [variableScope]
      int digestIndex = 0;
          ^
SevenZip/src/7zIn.c:1323:20: style:inconclusive: Function 'SzArEx_Extract' argument 1 names different: declaration 'db' definition 'p'. [funcArgNamesDifferent]
    const CSzArEx *p,
                   ^
SevenZip/src/7z.h:176:20: note: Function 'SzArEx_Extract' argument 1 names different: declaration 'db' definition 'p'.
    const CSzArEx *db,
                   ^
SevenZip/src/7zIn.c:1323:20: note: Function 'SzArEx_Extract' argument 1 names different: declaration 'db' definition 'p'.
    const CSzArEx *p,
                   ^
SevenZip/src/7zIn.c:997:12: style: Local variable 'type' shadows outer variable [shadowVariable]
    UInt64 type;
           ^
SevenZip/src/7zIn.c:952:10: note: Shadowed declaration
  UInt64 type;
         ^
SevenZip/src/7zIn.c:997:12: note: Shadow variable
    UInt64 type;
           ^
SevenZip/src/Alloc.c:30:5: portability: %d in format string (no. 1) requires 'int' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_sint]
    fprintf(stderr, "\nAlloc %10d bytes, count = %10d,  addr = %8X", size, g_allocCount++, (unsigned)p);
    ^
SevenZip/src/Alloc.c:54:3: portability: %d in format string (no. 1) requires 'int' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_sint]
  fprintf(stderr, "\nAlloc_Mid %10d bytes;  count = %10d", size, g_allocCountMid++);
  ^
SevenZip/src/Alloc.c:100:3: portability: %d in format string (no. 1) requires 'int' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_sint]
  fprintf(stderr, "\nAlloc_Big %10d bytes;  count = %10d", size, g_allocCountBig++);
  ^
SevenZip/src/Archive.cpp:39:2: style: Class 'ArchiveImpl' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 ArchiveImpl(const std::string& path):
 ^
SevenZip/src/Archive.cpp:204:17: style: Local variable 'size' shadows outer function [shadowFunction]
   Poco::UInt64 size = f->Size;
                ^
SevenZip/src/Archive.cpp:63:14: note: Shadowed declaration
 std::size_t size() const
             ^
SevenZip/src/Archive.cpp:204:17: note: Shadow variable
   Poco::UInt64 size = f->Size;
                ^
SevenZip/src/Bcj2.c:70:12: style: Local variable 'b' shadows outer variable [shadowVariable]
      Byte b = buf0[inPos];
           ^
SevenZip/src/Bcj2.c:60:10: note: Shadowed declaration
    Byte b;
         ^
SevenZip/src/Bcj2.c:70:12: note: Shadow variable
      Byte b = buf0[inPos];
           ^
SevenZip/src/CpuArch.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 22 configurations. Use --force to check all configurations. [toomanyconfigs]

^
SevenZip/src/CpuArch.c:19:16: warning: Found suspicious operator ',' [constStatement]
  __asm xor EAX, flag;
               ^
SevenZip/src/LzFind.c:353:84: style:inconclusive: Function 'GetMatchesSpec1' argument 4 names different: declaration 'buffer' definition 'cur'. [funcArgNamesDifferent]
UInt32 * GetMatchesSpec1(UInt32 lenLimit, UInt32 curMatch, UInt32 pos, const Byte *cur, CLzRef *son,
                                                                                   ^
SevenZip/src/LzFind.h:76:84: note: Function 'GetMatchesSpec1' argument 4 names different: declaration 'buffer' definition 'cur'.
UInt32 * GetMatchesSpec1(UInt32 lenLimit, UInt32 curMatch, UInt32 pos, const Byte *buffer, CLzRef *son,
                                                                                   ^
SevenZip/src/LzFind.c:353:84: note: Function 'GetMatchesSpec1' argument 4 names different: declaration 'buffer' definition 'cur'.
UInt32 * GetMatchesSpec1(UInt32 lenLimit, UInt32 curMatch, UInt32 pos, const Byte *cur, CLzRef *son,
                                                                                   ^
SevenZip/src/LzFind.c:354:63: style:inconclusive: Function 'GetMatchesSpec1' argument 8 names different: declaration '_cutValue' definition 'cutValue'. [funcArgNamesDifferent]
    UInt32 _cyclicBufferPos, UInt32 _cyclicBufferSize, UInt32 cutValue,
                                                              ^
SevenZip/src/LzFind.h:77:63: note: Function 'GetMatchesSpec1' argument 8 names different: declaration '_cutValue' definition 'cutValue'.
    UInt32 _cyclicBufferPos, UInt32 _cyclicBufferSize, UInt32 _cutValue,
                                                              ^
SevenZip/src/LzFind.c:354:63: note: Function 'GetMatchesSpec1' argument 8 names different: declaration '_cutValue' definition 'cutValue'.
    UInt32 _cyclicBufferPos, UInt32 _cyclicBufferSize, UInt32 cutValue,
                                                              ^
SevenZip/src/LzFindMt.c:142:1: warning: Redundant assignment of 'hashMask' to itself. [selfAssignment]
DEF_GetHeads2(2,  (p[0] | ((UInt32)p[1] << 8)), hashMask = hashMask; crc = crc; )
^
SevenZip/src/LzFindMt.c:142:1: warning: Redundant assignment of 'crc' to itself. [selfAssignment]
DEF_GetHeads2(2,  (p[0] | ((UInt32)p[1] << 8)), hashMask = hashMask; crc = crc; )
^
SevenZip/src/LzFindMt.c:142:1: style: Variable 'hashMask' is assigned a value that is never used. [unreadVariable]
DEF_GetHeads2(2,  (p[0] | ((UInt32)p[1] << 8)), hashMask = hashMask; crc = crc; )
^
SevenZip/src/LzFindMt.c:142:1: style: Variable 'crc' is assigned a value that is never used. [unreadVariable]
DEF_GetHeads2(2,  (p[0] | ((UInt32)p[1] << 8)), hashMask = hashMask; crc = crc; )
^
SevenZip/src/Lzma2Dec.c:104:7: portability: %X in format string (no. 1) requires 'unsigned int' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_uint]
      PRF(printf("\n %4X ", p->decoder.dicPos));
      ^
SevenZip/src/Lzma2Dec.c:125:7: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
      PRF(printf(" %8d", p->unpackSize));
      ^
SevenZip/src/Lzma2Dec.c:135:7: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
      PRF(printf(" %8d", p->packSize));
      ^
SevenZip/src/Lzma2Enc.c:389:39: style:inconclusive: Function 'Lzma2Enc_Destroy' argument 1 names different: declaration 'p' definition 'pp'. [funcArgNamesDifferent]
void Lzma2Enc_Destroy(CLzma2EncHandle pp)
                                      ^
SevenZip/src/Lzma2Enc.h:39:39: note: Function 'Lzma2Enc_Destroy' argument 1 names different: declaration 'p' definition 'pp'.
void Lzma2Enc_Destroy(CLzma2EncHandle p);
                                      ^
SevenZip/src/Lzma2Enc.c:389:39: note: Function 'Lzma2Enc_Destroy' argument 1 names different: declaration 'p' definition 'pp'.
void Lzma2Enc_Destroy(CLzma2EncHandle pp)
                                      ^
SevenZip/src/Lzma2Enc.c:411:40: style:inconclusive: Function 'Lzma2Enc_SetProps' argument 1 names different: declaration 'p' definition 'pp'. [funcArgNamesDifferent]
SRes Lzma2Enc_SetProps(CLzma2EncHandle pp, const CLzma2EncProps *props)
                                       ^
SevenZip/src/Lzma2Enc.h:40:40: note: Function 'Lzma2Enc_SetProps' argument 1 names different: declaration 'p' definition 'pp'.
SRes Lzma2Enc_SetProps(CLzma2EncHandle p, const CLzma2EncProps *props);
                                       ^
SevenZip/src/Lzma2Enc.c:411:40: note: Function 'Lzma2Enc_SetProps' argument 1 names different: declaration 'p' definition 'pp'.
SRes Lzma2Enc_SetProps(CLzma2EncHandle pp, const CLzma2EncProps *props)
                                       ^
SevenZip/src/Lzma2Enc.c:423:47: style:inconclusive: Function 'Lzma2Enc_WriteProperties' argument 1 names different: declaration 'p' definition 'pp'. [funcArgNamesDifferent]
Byte Lzma2Enc_WriteProperties(CLzma2EncHandle pp)
                                              ^
SevenZip/src/Lzma2Enc.h:41:47: note: Function 'Lzma2Enc_WriteProperties' argument 1 names different: declaration 'p' definition 'pp'.
Byte Lzma2Enc_WriteProperties(CLzma2EncHandle p);
                                              ^
SevenZip/src/Lzma2Enc.c:423:47: note: Function 'Lzma2Enc_WriteProperties' argument 1 names different: declaration 'p' definition 'pp'.
Byte Lzma2Enc_WriteProperties(CLzma2EncHandle pp)
                                              ^
SevenZip/src/Lzma2Enc.c:434:38: style:inconclusive: Function 'Lzma2Enc_Encode' argument 1 names different: declaration 'p' definition 'pp'. [funcArgNamesDifferent]
SRes Lzma2Enc_Encode(CLzma2EncHandle pp,
                                     ^
SevenZip/src/Lzma2Enc.h:42:38: note: Function 'Lzma2Enc_Encode' argument 1 names different: declaration 'p' definition 'pp'.
SRes Lzma2Enc_Encode(CLzma2EncHandle p,
                                     ^
SevenZip/src/Lzma2Enc.c:434:38: note: Function 'Lzma2Enc_Encode' argument 1 names different: declaration 'p' definition 'pp'.
SRes Lzma2Enc_Encode(CLzma2EncHandle pp,
                                     ^
SevenZip/src/Lzma2Enc.c:102:9: style: Variable 'res' is assigned a value that is never used. [unreadVariable]
    res = SZ_OK;
        ^
SevenZip/src/Lzma2Enc.c:462:25: style: Variable 'mtCallback.lzma2Enc' is assigned a value that is never used. [unreadVariable]
    mtCallback.lzma2Enc = p;
                        ^
SevenZip/src/Lzma86Dec.c:10:48: warning: Redundant assignment of 'p' to itself. [selfAssignment]
static void *SzAlloc(void *p, size_t size) { p = p; return MyAlloc(size); }
                                               ^
SevenZip/src/Lzma86Dec.c:11:48: warning: Redundant assignment of 'p' to itself. [selfAssignment]
static void SzFree(void *p, void *address) { p = p; MyFree(address); }
                                               ^
SevenZip/src/Lzma86Dec.c:10:48: style: Variable 'p' is assigned a value that is never used. [unreadVariable]
static void *SzAlloc(void *p, size_t size) { p = p; return MyAlloc(size); }
                                               ^
SevenZip/src/Lzma86Dec.c:11:48: style: Variable 'p' is assigned a value that is never used. [unreadVariable]
static void SzFree(void *p, void *address) { p = p; MyFree(address); }
                                               ^
SevenZip/src/Lzma86Enc.c:14:48: warning: Redundant assignment of 'p' to itself. [selfAssignment]
static void *SzAlloc(void *p, size_t size) { p = p; return MyAlloc(size); }
                                               ^
SevenZip/src/Lzma86Enc.c:15:48: warning: Redundant assignment of 'p' to itself. [selfAssignment]
static void SzFree(void *p, void *address) { p = p; MyFree(address); }
                                               ^
SevenZip/src/Lzma86Enc.c:14:48: style: Variable 'p' is assigned a value that is never used. [unreadVariable]
static void *SzAlloc(void *p, size_t size) { p = p; return MyAlloc(size); }
                                               ^
SevenZip/src/Lzma86Enc.c:15:48: style: Variable 'p' is assigned a value that is never used. [unreadVariable]
static void SzFree(void *p, void *address) { p = p; MyFree(address); }
                                               ^
SevenZip/src/LzmaDec.c:893:29: style:inconclusive: Function 'LzmaDec_Free' argument 1 names different: declaration 'state' definition 'p'. [funcArgNamesDifferent]
void LzmaDec_Free(CLzmaDec *p, ISzAlloc *alloc)
                            ^
SevenZip/src/LzmaDec.h:138:29: note: Function 'LzmaDec_Free' argument 1 names different: declaration 'state' definition 'p'.
void LzmaDec_Free(CLzmaDec *state, ISzAlloc *alloc);
                            ^
SevenZip/src/LzmaDec.c:893:29: note: Function 'LzmaDec_Free' argument 1 names different: declaration 'state' definition 'p'.
void LzmaDec_Free(CLzmaDec *p, ISzAlloc *alloc)
                            ^
SevenZip/src/LzmaDec.c:948:33: style:inconclusive: Function 'LzmaDec_Allocate' argument 1 names different: declaration 'state' definition 'p'. [funcArgNamesDifferent]
SRes LzmaDec_Allocate(CLzmaDec *p, const Byte *props, unsigned propsSize, ISzAlloc *alloc)
                                ^
SevenZip/src/LzmaDec.h:137:33: note: Function 'LzmaDec_Allocate' argument 1 names different: declaration 'state' definition 'p'.
SRes LzmaDec_Allocate(CLzmaDec *state, const Byte *prop, unsigned propsSize, ISzAlloc *alloc);
                                ^
SevenZip/src/LzmaDec.c:948:33: note: Function 'LzmaDec_Allocate' argument 1 names different: declaration 'state' definition 'p'.
SRes LzmaDec_Allocate(CLzmaDec *p, const Byte *props, unsigned propsSize, ISzAlloc *alloc)
                                ^
SevenZip/src/LzmaDec.c:948:48: style:inconclusive: Function 'LzmaDec_Allocate' argument 2 names different: declaration 'prop' definition 'props'. [funcArgNamesDifferent]
SRes LzmaDec_Allocate(CLzmaDec *p, const Byte *props, unsigned propsSize, ISzAlloc *alloc)
                                               ^
SevenZip/src/LzmaDec.h:137:52: note: Function 'LzmaDec_Allocate' argument 2 names different: declaration 'prop' definition 'props'.
SRes LzmaDec_Allocate(CLzmaDec *state, const Byte *prop, unsigned propsSize, ISzAlloc *alloc);
                                                   ^
SevenZip/src/LzmaDec.c:948:48: note: Function 'LzmaDec_Allocate' argument 2 names different: declaration 'prop' definition 'props'.
SRes LzmaDec_Allocate(CLzmaDec *p, const Byte *props, unsigned propsSize, ISzAlloc *alloc)
                                               ^
SevenZip/src/LzmaDec.c:262:18: style: Local variable 'limit' shadows outer argument [shadowArgument]
        unsigned limit, offset;
                 ^
SevenZip/src/LzmaDec.c:131:63: note: Shadowed declaration
static int MY_FAST_CALL LzmaDec_DecodeReal(CLzmaDec *p, SizeT limit, const Byte *bufLimit)
                                                              ^
SevenZip/src/LzmaDec.c:262:18: note: Shadow variable
        unsigned limit, offset;
                 ^
SevenZip/src/LzmaDec.c:565:13: style: Variable 'range' is assigned a value that is never used. [unreadVariable]
            NORMALIZE_CHECK;
            ^
SevenZip/src/LzmaDec.c:565:13: style: Variable 'code' is assigned a value that is never used. [unreadVariable]
            NORMALIZE_CHECK;
            ^
SevenZip/src/LzmaDec.c:674:3: style: Variable 'range' is assigned a value that is never used. [unreadVariable]
  NORMALIZE_CHECK;
  ^
SevenZip/src/LzmaDec.c:674:3: style: Variable 'code' is assigned a value that is never used. [unreadVariable]
  NORMALIZE_CHECK;
  ^
SevenZip/src/LzmaEnc.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 13 configurations. Use --force to check all configurations. [toomanyconfigs]

^
SevenZip/src/LzmaEnc.c:840:24: warning: Either the condition 'numPairs>0' is redundant or the array 'p->matches[549]' is accessed at index -1, which is out of bounds. [negativeIndex]
    lenRes = p->matches[numPairs - 2];
                       ^
SevenZip/src/LzmaEnc.c:838:16: note: Assuming that condition 'numPairs>0' is not redundant
  if (numPairs > 0)
               ^
SevenZip/src/LzmaEnc.c:840:24: note: Negative array index
    lenRes = p->matches[numPairs - 2];
                       ^
SevenZip/src/LzmaEnc.c:1420:68: warning: Either the condition 'lenTest2>=2' is redundant or the array 'p->lenEnc.prices[16][272]' is accessed at index p->lenEnc.prices[*][-1], which is out of bounds. [negativeIndex]
        UInt32 curAndLenPrice = normalMatchPrice + p->lenEnc.prices[posState][lenTest - LZMA_MATCH_LEN_MIN];
                                                                   ^
SevenZip/src/LzmaEnc.c:1448:24: note: Assuming that condition 'lenTest2>=2' is not redundant
          if (lenTest2 >= 2)
                       ^
SevenZip/src/LzmaEnc.c:1447:31: note: Assignment to 'lenTest2-=lenTest+1'
          lenTest2 -= lenTest + 1;
                              ^
SevenZip/src/LzmaEnc.c:1420:68: note: Negative array index
        UInt32 curAndLenPrice = normalMatchPrice + p->lenEnc.prices[posState][lenTest - LZMA_MATCH_LEN_MIN];
                                                                   ^
SevenZip/src/LzmaEnc.c:2156:16: style: Condition 'outStream.overflow' is always false [knownConditionTrueFalse]
  if (outStream.overflow)
               ^
SevenZip/src/LzmaEnc.c:2139:24: note: Assignment 'outStream.overflow=0', assigned value is 0
  outStream.overflow = False;
                       ^
SevenZip/src/LzmaEnc.c:2156:16: note: Condition 'outStream.overflow' is always false
  if (outStream.overflow)
               ^
SevenZip/src/LzmaEnc.c:2251:16: style: Condition 'outStream.overflow' is always false [knownConditionTrueFalse]
  if (outStream.overflow)
               ^
SevenZip/src/LzmaEnc.c:2241:24: note: Assignment 'outStream.overflow=0', assigned value is 0
  outStream.overflow = False;
                       ^
SevenZip/src/LzmaEnc.c:2251:16: note: Condition 'outStream.overflow' is always false
  if (outStream.overflow)
               ^
SevenZip/src/LzmaEnc.c:1353:18: style: The scope of the variable 'nextRepMatchPrice' can be reduced. [variableScope]
          UInt32 nextRepMatchPrice;
                 ^
SevenZip/src/LzmaEnc.c:1443:18: style: The scope of the variable 'nextRepMatchPrice' can be reduced. [variableScope]
          UInt32 nextRepMatchPrice;
                 ^
SevenZip/src/LzmaEnc.c:400:38: style:inconclusive: Function 'LzmaEnc_SetProps' argument 1 names different: declaration 'p' definition 'pp'. [funcArgNamesDifferent]
SRes LzmaEnc_SetProps(CLzmaEncHandle pp, const CLzmaEncProps *props2)
                                     ^
SevenZip/src/LzmaEnc.h:54:38: note: Function 'LzmaEnc_SetProps' argument 1 names different: declaration 'p' definition 'pp'.
SRes LzmaEnc_SetProps(CLzmaEncHandle p, const CLzmaEncProps *props);
                                     ^
SevenZip/src/LzmaEnc.c:400:38: note: Function 'LzmaEnc_SetProps' argument 1 names different: declaration 'p' definition 'pp'.
SRes LzmaEnc_SetProps(CLzmaEncHandle pp, const CLzmaEncProps *props2)
                                     ^
SevenZip/src/LzmaEnc.c:400:63: style:inconclusive: Function 'LzmaEnc_SetProps' argument 2 names different: declaration 'props' definition 'props2'. [funcArgNamesDifferent]
SRes LzmaEnc_SetProps(CLzmaEncHandle pp, const CLzmaEncProps *props2)
                                                              ^
SevenZip/src/LzmaEnc.h:54:62: note: Function 'LzmaEnc_SetProps' argument 2 names different: declaration 'props' definition 'props2'.
SRes LzmaEnc_SetProps(CLzmaEncHandle p, const CLzmaEncProps *props);
                                                             ^
SevenZip/src/LzmaEnc.c:400:63: note: Function 'LzmaEnc_SetProps' argument 2 names different: declaration 'props' definition 'props2'.
SRes LzmaEnc_SetProps(CLzmaEncHandle pp, const CLzmaEncProps *props2)
                                                              ^
SevenZip/src/LzmaEnc.c:2192:36: style:inconclusive: Function 'LzmaEnc_Encode' argument 1 names different: declaration 'p' definition 'pp'. [funcArgNamesDifferent]
SRes LzmaEnc_Encode(CLzmaEncHandle pp, ISeqOutStream *outStream, ISeqInStream *inStream, ICompressProgress *progress,
                                   ^
SevenZip/src/LzmaEnc.h:56:36: note: Function 'LzmaEnc_Encode' argument 1 names different: declaration 'p' definition 'pp'.
SRes LzmaEnc_Encode(CLzmaEncHandle p, ISeqOutStream *outStream, ISeqInStream *inStream,
                                   ^
SevenZip/src/LzmaEnc.c:2192:36: note: Function 'LzmaEnc_Encode' argument 1 names different: declaration 'p' definition 'pp'.
SRes LzmaEnc_Encode(CLzmaEncHandle pp, ISeqOutStream *outStream, ISeqInStream *inStream, ICompressProgress *progress,
                                   ^
SevenZip/src/LzmaEnc.c:2199:45: style:inconclusive: Function 'LzmaEnc_WriteProperties' argument 1 names different: declaration 'p' definition 'pp'. [funcArgNamesDifferent]
SRes LzmaEnc_WriteProperties(CLzmaEncHandle pp, Byte *props, SizeT *size)
                                            ^
SevenZip/src/LzmaEnc.h:55:45: note: Function 'LzmaEnc_WriteProperties' argument 1 names different: declaration 'p' definition 'pp'.
SRes LzmaEnc_WriteProperties(CLzmaEncHandle p, Byte *properties, SizeT *size);
                                            ^
SevenZip/src/LzmaEnc.c:2199:45: note: Function 'LzmaEnc_WriteProperties' argument 1 names different: declaration 'p' definition 'pp'.
SRes LzmaEnc_WriteProperties(CLzmaEncHandle pp, Byte *props, SizeT *size)
                                            ^
SevenZip/src/LzmaEnc.c:2199:55: style:inconclusive: Function 'LzmaEnc_WriteProperties' argument 2 names different: declaration 'properties' definition 'props'. [funcArgNamesDifferent]
SRes LzmaEnc_WriteProperties(CLzmaEncHandle pp, Byte *props, SizeT *size)
                                                      ^
SevenZip/src/LzmaEnc.h:55:54: note: Function 'LzmaEnc_WriteProperties' argument 2 names different: declaration 'properties' definition 'props'.
SRes LzmaEnc_WriteProperties(CLzmaEncHandle p, Byte *properties, SizeT *size);
                                                     ^
SevenZip/src/LzmaEnc.c:2199:55: note: Function 'LzmaEnc_WriteProperties' argument 2 names different: declaration 'properties' definition 'props'.
SRes LzmaEnc_WriteProperties(CLzmaEncHandle pp, Byte *props, SizeT *size)
                                                      ^
SevenZip/src/LzmaEnc.c:2228:39: style:inconclusive: Function 'LzmaEnc_MemEncode' argument 1 names different: declaration 'p' definition 'pp'. [funcArgNamesDifferent]
SRes LzmaEnc_MemEncode(CLzmaEncHandle pp, Byte *dest, SizeT *destLen, const Byte *src, SizeT srcLen,
                                      ^
SevenZip/src/LzmaEnc.h:58:39: note: Function 'LzmaEnc_MemEncode' argument 1 names different: declaration 'p' definition 'pp'.
SRes LzmaEnc_MemEncode(CLzmaEncHandle p, Byte *dest, SizeT *destLen, const Byte *src, SizeT srcLen,
                                      ^
SevenZip/src/LzmaEnc.c:2228:39: note: Function 'LzmaEnc_MemEncode' argument 1 names different: declaration 'p' definition 'pp'.
SRes LzmaEnc_MemEncode(CLzmaEncHandle pp, Byte *dest, SizeT *destLen, const Byte *src, SizeT srcLen,
                                      ^
SevenZip/src/LzmaEnc.c:1134:34: style: Local variable 'numPairs' shadows outer variable [shadowVariable]
    UInt32 numAvailFull, newLen, numPairs, posPrev, state, posState, startLen;
                                 ^
SevenZip/src/LzmaEnc.c:939:29: note: Shadowed declaration
  UInt32 numAvail, mainLen, numPairs, repMaxIndex, i, posState, lenEnd, len, cur;
                            ^
SevenZip/src/LzmaEnc.c:1134:34: note: Shadow variable
    UInt32 numAvailFull, newLen, numPairs, posPrev, state, posState, startLen;
                                 ^
SevenZip/src/LzmaEnc.c:1134:60: style: Local variable 'posState' shadows outer variable [shadowVariable]
    UInt32 numAvailFull, newLen, numPairs, posPrev, state, posState, startLen;
                                                           ^
SevenZip/src/LzmaEnc.c:939:55: note: Shadowed declaration
  UInt32 numAvail, mainLen, numPairs, repMaxIndex, i, posState, lenEnd, len, cur;
                                                      ^
SevenZip/src/LzmaEnc.c:1134:60: note: Shadow variable
    UInt32 numAvailFull, newLen, numPairs, posPrev, state, posState, startLen;
                                                           ^
SevenZip/src/LzmaEnc.c:1135:36: style: Local variable 'matchPrice' shadows outer variable [shadowVariable]
    UInt32 curPrice, curAnd1Price, matchPrice, repMatchPrice;
                                   ^
SevenZip/src/LzmaEnc.c:940:10: note: Shadowed declaration
  UInt32 matchPrice, repMatchPrice, normalMatchPrice;
         ^
SevenZip/src/LzmaEnc.c:1135:36: note: Shadow variable
    UInt32 curPrice, curAnd1Price, matchPrice, repMatchPrice;
                                   ^
SevenZip/src/LzmaEnc.c:1135:48: style: Local variable 'repMatchPrice' shadows outer variable [shadowVariable]
    UInt32 curPrice, curAnd1Price, matchPrice, repMatchPrice;
                                               ^
SevenZip/src/LzmaEnc.c:940:22: note: Shadowed declaration
  UInt32 matchPrice, repMatchPrice, normalMatchPrice;
                     ^
SevenZip/src/LzmaEnc.c:1135:48: note: Shadow variable
    UInt32 curPrice, curAnd1Price, matchPrice, repMatchPrice;
                                               ^
SevenZip/src/LzmaEnc.c:1137:10: style: Local variable 'curByte' shadows outer variable [shadowVariable]
    Byte curByte, matchByte;
         ^
SevenZip/src/LzmaEnc.c:944:8: note: Shadowed declaration
  Byte curByte, matchByte;
       ^
SevenZip/src/LzmaEnc.c:1137:10: note: Shadow variable
    Byte curByte, matchByte;
         ^
SevenZip/src/LzmaEnc.c:1137:19: style: Local variable 'matchByte' shadows outer variable [shadowVariable]
    Byte curByte, matchByte;
                  ^
SevenZip/src/LzmaEnc.c:944:17: note: Shadowed declaration
  Byte curByte, matchByte;
                ^
SevenZip/src/LzmaEnc.c:1137:19: note: Shadow variable
    Byte curByte, matchByte;
                  ^
SevenZip/src/LzmaEnc.c:1138:17: style: Local variable 'data' shadows outer variable [shadowVariable]
    const Byte *data;
                ^
SevenZip/src/LzmaEnc.c:943:15: note: Shadowed declaration
  const Byte *data;
              ^
SevenZip/src/LzmaEnc.c:1138:17: note: Shadow variable
    const Byte *data;
                ^
SevenZip/src/LzmaEnc.c:1201:16: style: Local variable 'i' shadows outer variable [shadowVariable]
        UInt32 i;
               ^
SevenZip/src/LzmaEnc.c:939:52: note: Shadowed declaration
  UInt32 numAvail, mainLen, numPairs, repMaxIndex, i, posState, lenEnd, len, cur;
                                                   ^
SevenZip/src/LzmaEnc.c:1201:16: note: Shadow variable
        UInt32 i;
               ^
SevenZip/src/LzmaEnc.c:1210:16: style: Local variable 'i' shadows outer variable [shadowVariable]
        UInt32 i;
               ^
SevenZip/src/LzmaEnc.c:939:52: note: Shadowed declaration
  UInt32 numAvail, mainLen, numPairs, repMaxIndex, i, posState, lenEnd, len, cur;
                                                   ^
SevenZip/src/LzmaEnc.c:1210:16: note: Shadow variable
        UInt32 i;
               ^
SevenZip/src/LzmaEnc.c:1407:14: style: Local variable 'normalMatchPrice' shadows outer variable [shadowVariable]
      UInt32 normalMatchPrice = matchPrice + GET_PRICE_0(p->isRep[state]);
             ^
SevenZip/src/LzmaEnc.c:940:37: note: Shadowed declaration
  UInt32 matchPrice, repMatchPrice, normalMatchPrice;
                                    ^
SevenZip/src/LzmaEnc.c:1407:14: note: Shadow variable
      UInt32 normalMatchPrice = matchPrice + GET_PRICE_0(p->isRep[state]);
             ^
SevenZip/src/LzmaEnc.c:1465:22: style: Local variable 'curAndLenPrice' shadows outer variable [shadowVariable]
              UInt32 curAndLenPrice;
                     ^
SevenZip/src/LzmaEnc.c:1420:16: note: Shadowed declaration
        UInt32 curAndLenPrice = normalMatchPrice + p->lenEnc.prices[posState][lenTest - LZMA_MATCH_LEN_MIN];
               ^
SevenZip/src/LzmaEnc.c:1465:22: note: Shadow variable
              UInt32 curAndLenPrice;
                     ^
SevenZip/src/LzmaEnc.c:1466:25: style: Local variable 'opt' shadows outer variable [shadowVariable]
              COptimal *opt;
                        ^
SevenZip/src/LzmaEnc.c:1422:19: note: Shadowed declaration
        COptimal *opt;
                  ^
SevenZip/src/LzmaEnc.c:1466:25: note: Shadow variable
              COptimal *opt;
                        ^
SevenZip/src/LzmaEnc.c:1674:14: style: Local variable 'i' shadows outer variable [shadowVariable]
      UInt32 i;
             ^
SevenZip/src/LzmaEnc.c:1653:10: note: Shadowed declaration
  UInt32 i, lenToPosState;
         ^
SevenZip/src/LzmaEnc.c:1674:14: note: Shadow variable
      UInt32 i;
             ^
SevenZip/src/LzmaEnc.c:2137:18: style: Variable 'outStream.data' is assigned a value that is never used. [unreadVariable]
  outStream.data = dest;
                 ^
SevenZip/src/LzmaEnc.c:2239:18: style: Variable 'outStream.data' is assigned a value that is never used. [unreadVariable]
  outStream.data = dest;
                 ^
SevenZip/src/LzmaEnc.c:407:80: style: Condition 'props.dictSize>((unsigned int)1<<30)' is always false [knownConditionTrueFalse]
      props.dictSize > ((UInt32)1 << kDicLogSizeMaxCompress) || props.dictSize > ((UInt32)1 << 30))
                                                                               ^
SevenZip/src/LzmaEnc.c:407:22: note: Assuming that condition 'props.dictSize>((unsigned int)1<<30)' is not redundant
      props.dictSize > ((UInt32)1 << kDicLogSizeMaxCompress) || props.dictSize > ((UInt32)1 << 30))
                     ^
SevenZip/src/LzmaEnc.c:407:80: note: Condition 'props.dictSize>((unsigned int)1<<30)' is always false
      props.dictSize > ((UInt32)1 << kDicLogSizeMaxCompress) || props.dictSize > ((UInt32)1 << 30))
                                                                               ^
SevenZip/src/LzmaEnc.c:815:3: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
  printf("\n MovePos %d", num);
  ^
SevenZip/src/LzmaEnc.c:830:3: warning: %d in format string (no. 2) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
  printf("\n i = %d numPairs = %d    ", ttt, numPairs / 2);
  ^
SevenZip/src/LzmaEnc.c:835:7: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
      printf("%2d %6d   | ", p->matches[i], p->matches[i + 1]);
      ^
SevenZip/src/LzmaEnc.c:835:7: warning: %d in format string (no. 2) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
      printf("%2d %6d   | ", p->matches[i], p->matches[i + 1]);
      ^
SevenZip/src/LzmaEnc.c:562:10: style: Local variable 'ttt' shadows outer variable [shadowVariable]
  UInt32 ttt = *prob;
         ^
SevenZip/src/LzmaEnc.c:21:12: note: Shadowed declaration
static int ttt = 0;
           ^
SevenZip/src/LzmaEnc.c:562:10: note: Shadow variable
  UInt32 ttt = *prob;
         ^
SevenZip/src/LzmaEnc.c:1128:7: warning: %d in format string (no. 2) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
      printf("\nprice[%4X] = %d", position - cur + i, p->opt[i].price);
      ^
SevenZip/src/LzmaEnc.c:1783:5: warning: %d in format string (no. 2) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
    printf("\n pos = %4X,   len = %d   pos = %d", nowPos32, len, pos);
    ^
SevenZip/src/LzmaEnc.c:1783:5: warning: %d in format string (no. 3) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
    printf("\n pos = %4X,   len = %d   pos = %d", nowPos32, len, pos);
    ^
SevenZip/src/LzmaEnc.c:1123:18: style: Unsigned expression 'position' can't be negative so it is unnecessary to test it. [unsignedPositive]
    if (position >= 0)
                 ^
SevenZip/src/LzmaEnc.c:1125:16: style: Local variable 'i' shadows outer variable [shadowVariable]
      unsigned i;
               ^
SevenZip/src/LzmaEnc.c:939:52: note: Shadowed declaration
  UInt32 numAvail, mainLen, numPairs, repMaxIndex, i, posState, lenEnd, len, cur;
                                                   ^
SevenZip/src/LzmaEnc.c:1125:16: note: Shadow variable
      unsigned i;
               ^
SevenZip/src/LzmaEnc.c:2089:6: warning: Redundant assignment of 'pp' to itself. [selfAssignment]
  pp = pp;
     ^
SevenZip/src/LzmaEnc.c:1911:10: style: Variable 'btMode' is assigned a value that is never used. [unreadVariable]
  btMode = (p->matchFinderBase.btMode != 0);
         ^
SevenZip/src/LzmaEnc.c:2089:6: style: Variable 'pp' is assigned a value that is never used. [unreadVariable]
  pp = pp;
     ^
SevenZip/src/LzmaLib.c:11:48: warning: Redundant assignment of 'p' to itself. [selfAssignment]
static void *SzAlloc(void *p, size_t size) { p = p; return MyAlloc(size); }
                                               ^
SevenZip/src/LzmaLib.c:12:48: warning: Redundant assignment of 'p' to itself. [selfAssignment]
static void SzFree(void *p, void *address) { p = p; MyFree(address); }
                                               ^
SevenZip/src/LzmaLib.c:11:48: style: Variable 'p' is assigned a value that is never used. [unreadVariable]
static void *SzAlloc(void *p, size_t size) { p = p; return MyAlloc(size); }
                                               ^
SevenZip/src/LzmaLib.c:12:48: style: Variable 'p' is assigned a value that is never used. [unreadVariable]
static void SzFree(void *p, void *address) { p = p; MyFree(address); }
                                               ^
SevenZip/src/Ppmd7.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 17 configurations. Use --force to check all configurations. [toomanyconfigs]

^
SevenZip/src/Ppmd7.c:529:82: style:inconclusive: Boolean expression '4*ns1<=ns' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
      c->SummFreq = (UInt16)(c->SummFreq + (2 * ns1 < ns) + 2 * ((4 * ns1 <= ns) & (c->SummFreq <= 8 * ns1)));
                                                                                 ^
SevenZip/src/Ppmd7.c:634:69: style:inconclusive: Function 'Ppmd7_MakeEscFreq' argument 3 names different: declaration 'scale' definition 'escFreq'. [funcArgNamesDifferent]
CPpmd_See *Ppmd7_MakeEscFreq(CPpmd7 *p, unsigned numMasked, UInt32 *escFreq)
                                                                    ^
SevenZip/src/Ppmd7.h:95:69: note: Function 'Ppmd7_MakeEscFreq' argument 3 names different: declaration 'scale' definition 'escFreq'.
CPpmd_See *Ppmd7_MakeEscFreq(CPpmd7 *p, unsigned numMasked, UInt32 *scale);
                                                                    ^
SevenZip/src/Ppmd7.c:634:69: note: Function 'Ppmd7_MakeEscFreq' argument 3 names different: declaration 'scale' definition 'escFreq'.
CPpmd_See *Ppmd7_MakeEscFreq(CPpmd7 *p, unsigned numMasked, UInt32 *escFreq)
                                                                    ^
SevenZip/src/Ppmd7.c:469:11: warning: Either the condition 'fSuccessor<=successor' is redundant or there is possible null pointer dereference: p->Text++. [nullPointerRedundantCheck]
  *p->Text++ = p->FoundState->Symbol;
          ^
SevenZip/src/Ppmd7.c:479:20: note: Assuming that condition 'fSuccessor<=successor' is not redundant
    if (fSuccessor <= successor)
                   ^
SevenZip/src/Ppmd7.c:470:15: note: Assignment to 'successor=p->Text'
  successor = REF(p->Text);
              ^
SevenZip/src/Ppmd7.c:469:11: note: Null pointer dereference
  *p->Text++ = p->FoundState->Symbol;
          ^
SevenZip/src/Ppmd7.c:469:11: warning: Either the condition 'fSuccessor<=successor' is redundant or there is pointer arithmetic with NULL pointer. [nullPointerArithmeticRedundantCheck]
  *p->Text++ = p->FoundState->Symbol;
          ^
SevenZip/src/Ppmd7.c:479:20: note: Assuming that condition 'fSuccessor<=successor' is not redundant
    if (fSuccessor <= successor)
                   ^
SevenZip/src/Ppmd7.c:470:15: note: Assignment to 'successor=p->Text'
  successor = REF(p->Text);
              ^
SevenZip/src/Ppmd7.c:469:11: note: Null pointer addition
  *p->Text++ = p->FoundState->Symbol;
          ^
SevenZip/src/Ppmd7Dec.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations. [toomanyconfigs]

^
SevenZip/src/Ppmd7Enc.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations. [toomanyconfigs]

^
SevenZip/src/Threads.c:19:30: style:inconclusive: Function 'HandlePtr_Close' argument 1 names different: declaration 'h' definition 'p'. [funcArgNamesDifferent]
WRes HandlePtr_Close(HANDLE *p)
                             ^
SevenZip/src/Threads.h:13:30: note: Function 'HandlePtr_Close' argument 1 names different: declaration 'h' definition 'p'.
WRes HandlePtr_Close(HANDLE *h);
                             ^
SevenZip/src/Threads.c:19:30: note: Function 'HandlePtr_Close' argument 1 names different: declaration 'h' definition 'p'.
WRes HandlePtr_Close(HANDLE *p)
                             ^
SevenZip/src/Xz.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations. [toomanyconfigs]

^
SevenZip/src/XzCrc64.c:22:40: style:inconclusive: Function 'Crc64Update' argument 1 names different: declaration 'crc' definition 'v'. [funcArgNamesDifferent]
UInt64 MY_FAST_CALL Crc64Update(UInt64 v, const void *data, size_t size)
                                       ^
SevenZip/src/XzCrc64.h:21:40: note: Function 'Crc64Update' argument 1 names different: declaration 'crc' definition 'v'.
UInt64 MY_FAST_CALL Crc64Update(UInt64 crc, const void *data, size_t size);
                                       ^
SevenZip/src/XzCrc64.c:22:40: note: Function 'Crc64Update' argument 1 names different: declaration 'crc' definition 'v'.
UInt64 MY_FAST_CALL Crc64Update(UInt64 v, const void *data, size_t size)
                                       ^
SevenZip/src/XzDec.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations. [toomanyconfigs]

^
SevenZip/src/XzDec.c:75:9: warning: Redundant assignment of 'alloc' to itself. [selfAssignment]
  alloc = alloc;
        ^
SevenZip/src/XzDec.c:132:14: warning: Redundant assignment of 'finishMode' to itself. [selfAssignment]
  finishMode = finishMode;
             ^
SevenZip/src/XzDec.c:309:18: warning: Redundant assignment of 'srcWasFinished' to itself. [selfAssignment]
  srcWasFinished = srcWasFinished;
                 ^
SevenZip/src/XzDec.c:309:18: style: Variable 'srcWasFinished' is assigned a value that is never used. [unreadVariable]
  srcWasFinished = srcWasFinished;
                 ^
SevenZip/src/XzDec.c:236:6: warning: Redundant assignment of 'pp' to itself. [selfAssignment]
  pp = pp;
     ^
SevenZip/src/XzDec.c:237:9: warning: Redundant assignment of 'props' to itself. [selfAssignment]
  props = props;
        ^
SevenZip/src/XzDec.c:238:9: warning: Redundant assignment of 'alloc' to itself. [selfAssignment]
  alloc = alloc;
        ^
SevenZip/src/XzDec.c:252:18: warning: Redundant assignment of 'srcWasFinished' to itself. [selfAssignment]
  srcWasFinished = srcWasFinished;
                 ^
SevenZip/src/XzDec.c:236:6: style: Variable 'pp' is assigned a value that is never used. [unreadVariable]
  pp = pp;
     ^
SevenZip/src/XzDec.c:237:9: style: Variable 'props' is assigned a value that is never used. [unreadVariable]
  props = props;
        ^
SevenZip/src/XzDec.c:238:9: style: Variable 'alloc' is assigned a value that is never used. [unreadVariable]
  alloc = alloc;
        ^
SevenZip/src/XzDec.c:252:18: style: Variable 'srcWasFinished' is assigned a value that is never used. [unreadVariable]
  srcWasFinished = srcWasFinished;
                 ^
SevenZip/src/XzDec.c:553:5: warning: %X in format string (no. 2) requires 'unsigned int' but the argument type is 'unsigned long long'. [invalidPrintfArgType_uint]
    printf("\nf[%d] = %2X: ", i, filter->id);
    ^
SevenZip/src/XzDec.c:555:11: style: Local variable 'i' shadows outer variable [shadowVariable]
      int i;
          ^
SevenZip/src/XzDec.c:518:19: note: Shadowed declaration
  int numFilters, i;
                  ^
SevenZip/src/XzDec.c:555:11: note: Shadow variable
      int i;
          ^
SevenZip/src/XzEnc.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 17 configurations. Use --force to check all configurations. [toomanyconfigs]

^
SevenZip/src/XzEnc.c:19:51: warning: Redundant assignment of 'p' to itself. [selfAssignment]
static void *SzBigAlloc(void *p, size_t size) { p = p; return BigAlloc(size); }
                                                  ^
SevenZip/src/XzEnc.c:20:51: warning: Redundant assignment of 'p' to itself. [selfAssignment]
static void SzBigFree(void *p, void *address) { p = p; BigFree(address); }
                                                  ^
SevenZip/src/XzEnc.c:23:48: warning: Redundant assignment of 'p' to itself. [selfAssignment]
static void *SzAlloc(void *p, size_t size) { p = p; return MyAlloc(size); }
                                               ^
SevenZip/src/XzEnc.c:24:48: warning: Redundant assignment of 'p' to itself. [selfAssignment]
static void SzFree(void *p, void *address) { p = p; MyFree(address); }
                                               ^
SevenZip/src/XzEnc.c:19:51: style: Variable 'p' is assigned a value that is never used. [unreadVariable]
static void *SzBigAlloc(void *p, size_t size) { p = p; return BigAlloc(size); }
                                                  ^
SevenZip/src/XzEnc.c:20:51: style: Variable 'p' is assigned a value that is never used. [unreadVariable]
static void SzBigFree(void *p, void *address) { p = p; BigFree(address); }
                                                  ^
SevenZip/src/XzEnc.c:23:48: style: Variable 'p' is assigned a value that is never used. [unreadVariable]
static void *SzAlloc(void *p, size_t size) { p = p; return MyAlloc(size); }
                                               ^
SevenZip/src/XzEnc.c:24:48: style: Variable 'p' is assigned a value that is never used. [unreadVariable]
static void SzFree(void *p, void *address) { p = p; MyFree(address); }
                                               ^
SevenZip/src/XzIn.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations. [toomanyconfigs]

^
SevenZip/src/XzIn.c:73:10: style: The scope of the variable 'i' can be reduced. [variableScope]
  size_t i, numBlocks, crcStartPos, pos = 1;
         ^
SevenZip/src/XzIn.c:273:47: style:inconclusive: Function 'Xzs_ReadBackward' argument 2 names different: declaration 'inStream' definition 'stream'. [funcArgNamesDifferent]
SRes Xzs_ReadBackward(CXzs *p, ILookInStream *stream, Int64 *startOffset, ICompressProgress *progress, ISzAlloc *alloc)
                                              ^
SevenZip/src/Xz.h:131:47: note: Function 'Xzs_ReadBackward' argument 2 names different: declaration 'inStream' definition 'stream'.
SRes Xzs_ReadBackward(CXzs *p, ILookInStream *inStream, Int64 *startOffset, ICompressProgress *progress, ISzAlloc *alloc);
                                              ^
SevenZip/src/XzIn.c:273:47: note: Function 'Xzs_ReadBackward' argument 2 names different: declaration 'inStream' definition 'stream'.
SRes Xzs_ReadBackward(CXzs *p, ILookInStream *stream, Int64 *startOffset, ICompressProgress *progress, ISzAlloc *alloc)
                                              ^
SevenZip/src/XzIn.c:92:15: style: Variable 'crcStartPos' is assigned a value that is never used. [unreadVariable]
  crcStartPos = pos;
              ^
Util/samples/Units/src/Units.cpp:47:4: style: Variable 'h' is assigned a value that is never used. [unreadVariable]
 h = day(4);  // Ok: h is 96 hours
   ^
Util/src/AbstractConfiguration.cpp:369:3: style: Class 'AutoCounter' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  AutoCounter(int& count): _count(count)
  ^
Util/src/JSONConfiguration.cpp:168:14: style: Local variable 'i' shadows outer variable [shadowVariable]
     for(int i = 0; i <= *it - 1; ++i)
             ^
Util/src/JSONConfiguration.cpp:134:10: note: Shadowed declaration
 for(int i = 0; i < tokenizer.count() - 1; ++i)
         ^
Util/src/JSONConfiguration.cpp:168:14: note: Shadow variable
     for(int i = 0; i <= *it - 1; ++i)
             ^
Util/src/LayeredConfiguration.cpp:105:0: style: Consider using std::find_if algorithm instead of a raw loop. [useStlAlgorithm]
  if (conf.label == label) return conf.pConfig;
^
Util/src/LayeredConfiguration.cpp:115:0: style: Consider using std::any_of algorithm instead of a raw loop. [useStlAlgorithm]
  if (conf.pConfig->getRaw(key, value)) return true;
^
Util/src/LayeredConfiguration.cpp:126:3: style: Consider using std::find_if algorithm instead of a raw loop. [useStlAlgorithm]
  {
  ^
Util/src/LayeredConfiguration.cpp:159:3: style: Consider using std::find_if algorithm instead of a raw loop. [useStlAlgorithm]
  {
  ^
Util/src/OptionProcessor.cpp:65:0: style: Consider using std::find_if algorithm instead of a raw loop. [useStlAlgorithm]
  if (opt.required() && _specifiedOptions.find(opt.fullName()) == _specifiedOptions.end())
^
Util/src/ServerApplication.cpp:595:3: style: Consider using std::any_of algorithm instead of a raw loop. [useStlAlgorithm]
  {
  ^
Util/src/ServerApplication.cpp:653:13: error: Resource leak: fin [resourceLeak]
 if (!fout) throw Poco::OpenFileException("Cannot attach stdout to /dev/null");
            ^
Util/src/ServerApplication.cpp:655:13: error: Resource leak: fin [resourceLeak]
 if (!ferr) throw Poco::OpenFileException("Cannot attach stderr to /dev/null");
            ^
Util/src/ServerApplication.cpp:655:13: error: Resource leak: fout [resourceLeak]
 if (!ferr) throw Poco::OpenFileException("Cannot attach stderr to /dev/null");
            ^
Util/src/ServerApplication.cpp:659:1: error: Resource leak: fin [resourceLeak]
}
^
Util/src/ServerApplication.cpp:659:1: error: Resource leak: fout [resourceLeak]
}
^
Util/src/ServerApplication.cpp:659:1: error: Resource leak: ferr [resourceLeak]
}
^
Util/src/Timer.cpp:55:2: style: Class 'StopNotification' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 StopNotification(Poco::TimedNotificationQueue& queue):
 ^
Util/src/Timer.cpp:75:2: style: Class 'CancelNotification' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 CancelNotification(Poco::TimedNotificationQueue& queue):
 ^
Util/src/Timer.cpp:64:7: style: The function 'execute' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 bool execute()
      ^
Util/src/Timer.cpp:40:15: note: Virtual function in base class
 virtual bool execute() = 0;
              ^
Util/src/Timer.cpp:64:7: note: Function in derived class
 bool execute()
      ^
Util/src/Timer.cpp:84:7: style: The function 'execute' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 bool execute()
      ^
Util/src/Timer.cpp:40:15: note: Virtual function in base class
 virtual bool execute() = 0;
              ^
Util/src/Timer.cpp:84:7: note: Function in derived class
 bool execute()
      ^
Util/src/Timer.cpp:141:7: style: The function 'execute' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 bool execute()
      ^
Util/src/Timer.cpp:40:15: note: Virtual function in base class
 virtual bool execute() = 0;
              ^
Util/src/Timer.cpp:141:7: note: Function in derived class
 bool execute()
      ^
Util/src/Timer.cpp:184:7: style: The function 'execute' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 bool execute()
      ^
Util/src/Timer.cpp:40:15: note: Virtual function in base class
 virtual bool execute() = 0;
              ^
Util/src/Timer.cpp:184:7: note: Function in derived class
 bool execute()
      ^
Util/src/Timer.cpp:219:7: style: The function 'execute' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 bool execute()
      ^
Util/src/Timer.cpp:40:15: note: Virtual function in base class
 virtual bool execute() = 0;
              ^
Util/src/Timer.cpp:219:7: note: Function in derived class
 bool execute()
      ^
Util/src/WinRegistryKey.cpp:35:3: style: Class 'AutoHandle' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  AutoHandle(HMODULE h):
  ^
Util/src/WinRegistryKey.cpp:388:0: information: Skipping configuration 'HKEY_CURRENT_CONFIG' since the value of 'HKEY_CURRENT_CONFIG' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 else if (_hRootKey == HKEY_CURRENT_CONFIG)
^
Util/src/WinRegistryKey.cpp:434:0: information: Skipping configuration 'HKEY_CURRENT_CONFIG' since the value of 'HKEY_CURRENT_CONFIG' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  return HKEY_CURRENT_CONFIG;
^
Util/src/WinRegistryKey.cpp:398:0: information: Skipping configuration 'HKEY_PERFORMANCE_DATA' since the value of 'HKEY_PERFORMANCE_DATA' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 else if (_hRootKey == HKEY_PERFORMANCE_DATA)
^
Util/src/WinRegistryKey.cpp:444:0: information: Skipping configuration 'HKEY_PERFORMANCE_DATA' since the value of 'HKEY_PERFORMANCE_DATA' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  return HKEY_PERFORMANCE_DATA;
^
Util/testsuite/src/ConfigurationMapperTest.h:24:2: style: Class 'ConfigurationMapperTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 ConfigurationMapperTest(const std::string& name);
 ^
Util/testsuite/src/ConfigurationMapperTest.h:38:49: style: The function 'allocConfiguration' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 virtual Poco::Util::AbstractConfiguration::Ptr allocConfiguration() const;
                                                ^
Util/testsuite/src/AbstractConfigurationTest.h:57:49: note: Virtual function in base class
 virtual Poco::Util::AbstractConfiguration::Ptr allocConfiguration() const = 0;
                                                ^
Util/testsuite/src/ConfigurationMapperTest.h:38:49: note: Function in derived class
 virtual Poco::Util::AbstractConfiguration::Ptr allocConfiguration() const;
                                                ^
Util/testsuite/src/ConfigurationViewTest.h:24:2: style: Class 'ConfigurationViewTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 ConfigurationViewTest(const std::string& name);
 ^
Util/testsuite/src/LocalConfigurationViewTest.h:20:5: style: Class 'LocalConfigurationViewTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    LocalConfigurationViewTest(const std::string& name);
    ^
Util/testsuite/src/MapConfigurationTest.h:24:2: style: Class 'MapConfigurationTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 MapConfigurationTest(const std::string& name);
 ^
Util/testsuite/src/LayeredConfigurationTest.h:24:2: style: Class 'LayeredConfigurationTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 LayeredConfigurationTest(const std::string& name);
 ^
Util/testsuite/src/SystemConfigurationTest.h:24:2: style: Class 'SystemConfigurationTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 SystemConfigurationTest(const std::string& name);
 ^
Util/testsuite/src/IniFileConfigurationTest.h:24:2: style: Class 'IniFileConfigurationTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 IniFileConfigurationTest(const std::string& name);
 ^
Util/testsuite/src/PropertyFileConfigurationTest.h:24:2: style: Class 'PropertyFileConfigurationTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 PropertyFileConfigurationTest(const std::string& name);
 ^
Util/testsuite/src/XMLConfigurationTest.h:24:2: style: Class 'XMLConfigurationTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 XMLConfigurationTest(const std::string& name);
 ^
Util/testsuite/src/FilesystemConfigurationTest.h:25:2: style: Class 'FilesystemConfigurationTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 FilesystemConfigurationTest(const std::string& name);
 ^
Util/testsuite/src/LoggingConfiguratorTest.h:24:2: style: Class 'LoggingConfiguratorTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 LoggingConfiguratorTest(const std::string& name);
 ^
Util/testsuite/src/JSONConfigurationTest.h:24:2: style: Class 'JSONConfigurationTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 JSONConfigurationTest(const std::string& name);
 ^
Util/testsuite/src/ConfigurationViewTest.h:35:49: style: The function 'allocConfiguration' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 virtual Poco::Util::AbstractConfiguration::Ptr allocConfiguration() const;
                                                ^
Util/testsuite/src/AbstractConfigurationTest.h:57:49: note: Virtual function in base class
 virtual Poco::Util::AbstractConfiguration::Ptr allocConfiguration() const = 0;
                                                ^
Util/testsuite/src/ConfigurationViewTest.h:35:49: note: Function in derived class
 virtual Poco::Util::AbstractConfiguration::Ptr allocConfiguration() const;
                                                ^
Util/testsuite/src/LocalConfigurationViewTest.h:31:52: style: The function 'allocConfiguration' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
    virtual Poco::Util::AbstractConfiguration::Ptr allocConfiguration() const;
                                                   ^
Util/testsuite/src/AbstractConfigurationTest.h:57:49: note: Virtual function in base class
 virtual Poco::Util::AbstractConfiguration::Ptr allocConfiguration() const = 0;
                                                ^
Util/testsuite/src/LocalConfigurationViewTest.h:31:52: note: Function in derived class
    virtual Poco::Util::AbstractConfiguration::Ptr allocConfiguration() const;
                                                   ^
Util/testsuite/src/MapConfigurationTest.h:35:49: style: The function 'allocConfiguration' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 virtual Poco::Util::AbstractConfiguration::Ptr allocConfiguration() const;
                                                ^
Util/testsuite/src/AbstractConfigurationTest.h:57:49: note: Virtual function in base class
 virtual Poco::Util::AbstractConfiguration::Ptr allocConfiguration() const = 0;
                                                ^
Util/testsuite/src/MapConfigurationTest.h:35:49: note: Function in derived class
 virtual Poco::Util::AbstractConfiguration::Ptr allocConfiguration() const;
                                                ^
Util/testsuite/src/LayeredConfigurationTest.h:40:49: style: The function 'allocConfiguration' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 virtual Poco::Util::AbstractConfiguration::Ptr allocConfiguration() const;
                                                ^
Util/testsuite/src/AbstractConfigurationTest.h:57:49: note: Virtual function in base class
 virtual Poco::Util::AbstractConfiguration::Ptr allocConfiguration() const = 0;
                                                ^
Util/testsuite/src/LayeredConfigurationTest.h:40:49: note: Function in derived class
 virtual Poco::Util::AbstractConfiguration::Ptr allocConfiguration() const;
                                                ^
Util/testsuite/src/IniFileConfigurationTest.h:36:49: style: The function 'allocConfiguration' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 virtual Poco::Util::AbstractConfiguration::Ptr allocConfiguration() const;
                                                ^
Util/testsuite/src/AbstractConfigurationTest.h:57:49: note: Virtual function in base class
 virtual Poco::Util::AbstractConfiguration::Ptr allocConfiguration() const = 0;
                                                ^
Util/testsuite/src/IniFileConfigurationTest.h:36:49: note: Function in derived class
 virtual Poco::Util::AbstractConfiguration::Ptr allocConfiguration() const;
                                                ^
Util/testsuite/src/PropertyFileConfigurationTest.h:36:49: style: The function 'allocConfiguration' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 virtual Poco::Util::AbstractConfiguration::Ptr allocConfiguration() const;
                                                ^
Util/testsuite/src/AbstractConfigurationTest.h:57:49: note: Virtual function in base class
 virtual Poco::Util::AbstractConfiguration::Ptr allocConfiguration() const = 0;
                                                ^
Util/testsuite/src/PropertyFileConfigurationTest.h:36:49: note: Function in derived class
 virtual Poco::Util::AbstractConfiguration::Ptr allocConfiguration() const;
                                                ^
Util/testsuite/src/XMLConfigurationTest.h:42:49: style: The function 'allocConfiguration' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 virtual Poco::Util::AbstractConfiguration::Ptr allocConfiguration() const;
                                                ^
Util/testsuite/src/AbstractConfigurationTest.h:57:49: note: Virtual function in base class
 virtual Poco::Util::AbstractConfiguration::Ptr allocConfiguration() const = 0;
                                                ^
Util/testsuite/src/XMLConfigurationTest.h:42:49: note: Function in derived class
 virtual Poco::Util::AbstractConfiguration::Ptr allocConfiguration() const;
                                                ^
Util/testsuite/src/FilesystemConfigurationTest.h:36:49: style: The function 'allocConfiguration' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 virtual Poco::Util::AbstractConfiguration::Ptr allocConfiguration() const;
                                                ^
Util/testsuite/src/AbstractConfigurationTest.h:57:49: note: Virtual function in base class
 virtual Poco::Util::AbstractConfiguration::Ptr allocConfiguration() const = 0;
                                                ^
Util/testsuite/src/FilesystemConfigurationTest.h:36:49: note: Function in derived class
 virtual Poco::Util::AbstractConfiguration::Ptr allocConfiguration() const;
                                                ^
Util/testsuite/src/JSONConfigurationTest.h:37:49: style: The function 'allocConfiguration' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 virtual Poco::Util::AbstractConfiguration::Ptr allocConfiguration() const;
                                                ^
Util/testsuite/src/AbstractConfigurationTest.h:57:49: note: Virtual function in base class
 virtual Poco::Util::AbstractConfiguration::Ptr allocConfiguration() const = 0;
                                                ^
Util/testsuite/src/JSONConfigurationTest.h:37:49: note: Function in derived class
 virtual Poco::Util::AbstractConfiguration::Ptr allocConfiguration() const;
                                                ^
Util/testsuite/src/HelpFormatterTest.h:24:2: style: Class 'HelpFormatterTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 HelpFormatterTest(const std::string& name);
 ^
Util/testsuite/src/OptionProcessorTest.h:24:2: style: Class 'OptionProcessorTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 OptionProcessorTest(const std::string& name);
 ^
Util/testsuite/src/OptionSetTest.h:24:2: style: Class 'OptionSetTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 OptionSetTest(const std::string& name);
 ^
Util/testsuite/src/OptionTest.h:24:2: style: Class 'OptionTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 OptionTest(const std::string& name);
 ^
Util/testsuite/src/ValidatorTest.h:24:2: style: Class 'ValidatorTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 ValidatorTest(const std::string& name);
 ^
Util/testsuite/src/TimerTest.h:26:2: style: Class 'TimerTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 TimerTest(const std::string& name);
 ^
Util/testsuite/src/WinConfigurationTest.h:24:2: style: Class 'WinConfigurationTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 WinConfigurationTest(const std::string& name);
 ^
Util/testsuite/src/WinRegistryTest.h:24:2: style: Class 'WinRegistryTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 WinRegistryTest(const std::string& name);
 ^
Util/testsuite/src/WinRegistryTest.cpp:64:19: style: Variable 'msg' is assigned a value that is never used. [unreadVariable]
  std::string msg = exc.displayText();
                  ^
Util/testsuite/src/WinServiceTest.h:12:2: style: Class 'WinServiceTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 WinServiceTest(const std::string& name);
 ^
XML/src/Element.cpp:138:10: warning: Either the condition 'pCur' is redundant or there is possible null pointer dereference: pCur. [nullPointerRedundantCheck]
  while (pCur->_pNext != oldAttr) pCur = static_cast<Attr*>(pCur->_pNext);
         ^
XML/src/Element.cpp:139:7: note: Assuming that condition 'pCur' is not redundant
  if (pCur)
      ^
XML/src/Element.cpp:138:10: note: Null pointer dereference
  while (pCur->_pNext != oldAttr) pCur = static_cast<Attr*>(pCur->_pNext);
         ^
XML/src/EventDispatcher.cpp:25:3: style: Class 'DispatchGuard' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  DispatchGuard(int& count):
  ^
XML/src/ParserEngine.cpp:243:6: style: The if condition is the same as the previous if condition [duplicateCondition]
 if (_pContentHandler) _pContentHandler->startDocument();
     ^
XML/src/ParserEngine.cpp:242:6: note: First condition
 if (_pContentHandler) _pContentHandler->setDocumentLocator(this);
     ^
XML/src/ParserEngine.cpp:243:6: note: Second condition
 if (_pContentHandler) _pContentHandler->startDocument();
     ^
XML/src/ParserEngine.cpp:261:6: style: The if condition is the same as the previous if condition [duplicateCondition]
 if (_pContentHandler) _pContentHandler->startDocument();
     ^
XML/src/ParserEngine.cpp:260:6: note: First condition
 if (_pContentHandler) _pContentHandler->setDocumentLocator(this);
     ^
XML/src/ParserEngine.cpp:261:6: note: Second condition
 if (_pContentHandler) _pContentHandler->startDocument();
     ^
XML/src/SAXException.cpp:25:1: error: There is an unknown macro here somewhere. Configuration is required. If POCO_IMPLEMENT_EXCEPTION is a macro then please configure it. [unknownMacro]
POCO_IMPLEMENT_EXCEPTION(SAXException, XMLException, "SAX Exception")
^
XML/src/XMLStreamParser.cpp:32:2: style: Struct 'StreamExceptionController' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 StreamExceptionController(std::istream& is):
 ^
XML/src/XMLStreamParser.cpp:372:0: style: Consider using std::find_if algorithm instead of a raw loop. [useStlAlgorithm]
   if (!p.second.handled)
^
XML/src/XMLWriter.cpp:746:14: style: Local variable 'prefix' shadows outer variable [shadowVariable]
   XMLString prefix = p.first;
             ^
XML/src/XMLWriter.cpp:713:12: note: Shadowed declaration
 XMLString prefix;
           ^
XML/src/XMLWriter.cpp:746:14: note: Shadow variable
   XMLString prefix = p.first;
             ^
XML/src/xmlparse.cpp:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 44 configurations. Use --force to check all configurations. [toomanyconfigs]

^
XML/src/xmlparse.cpp:4057:12: style: Variable '*eventPP' is reassigned a value before the old one has been used. [redundantAssignment]
  *eventPP = s;
           ^
XML/src/xmlparse.cpp:4051:14: note: *eventPP is assigned
    *eventPP = s;
             ^
XML/src/xmlparse.cpp:4057:12: note: *eventPP is overwritten
  *eventPP = s;
           ^
XML/src/siphash.h:209:12: style: The scope of the variable 'm' can be reduced. [variableScope]
  uint64_t m;
           ^
XML/src/xmlparse.cpp:999:32: style: The scope of the variable 'mtemp' can be reduced. [variableScope]
    XML_Memory_Handling_Suite *mtemp;
                               ^
XML/src/xmlparse.cpp:1008:32: style: The scope of the variable 'mtemp' can be reduced. [variableScope]
    XML_Memory_Handling_Suite *mtemp;
                               ^
XML/src/xmlparse.cpp:3056:27: style: The scope of the variable 'prefix' can be reduced. [variableScope]
          const XML_Char *prefix;
                          ^
XML/src/xmlparse.cpp:3057:21: style: The scope of the variable 'uri' can be reduced. [variableScope]
          XML_Char *uri;
                    ^
XML/src/xmlparse.cpp:2769:23: style:inconclusive: Function 'doContent' argument 4 names different: declaration 'start' definition 's'. [funcArgNamesDifferent]
          const char *s, const char *end, const char **nextPtr,
                      ^
XML/src/xmlparse.cpp:473:66: note: Function 'doContent' argument 4 names different: declaration 'start' definition 's'.
                                const ENCODING *enc, const char *start,
                                                                 ^
XML/src/xmlparse.cpp:2769:23: note: Function 'doContent' argument 4 names different: declaration 'start' definition 's'.
          const char *s, const char *end, const char **nextPtr,
                      ^
XML/src/xmlparse.cpp:2769:56: style:inconclusive: Function 'doContent' argument 6 names different: declaration 'endPtr' definition 'nextPtr'. [funcArgNamesDifferent]
          const char *s, const char *end, const char **nextPtr,
                                                       ^
XML/src/xmlparse.cpp:474:63: note: Function 'doContent' argument 6 names different: declaration 'endPtr' definition 'nextPtr'.
                                const char *end, const char **endPtr,
                                                              ^
XML/src/xmlparse.cpp:2769:56: note: Function 'doContent' argument 6 names different: declaration 'endPtr' definition 'nextPtr'.
          const char *s, const char *end, const char **nextPtr,
                                                       ^
XML/src/xmlparse.cpp:3270:63: style:inconclusive: Function 'storeAtts' argument 3 names different: declaration 's' definition 'attStr'. [funcArgNamesDifferent]
storeAtts(XML_Parser parser, const ENCODING *enc, const char *attStr,
                                                              ^
XML/src/xmlparse.cpp:488:45: note: Function 'storeAtts' argument 3 names different: declaration 's' definition 'attStr'.
                                const char *s, TAG_NAME *tagNamePtr,
                                            ^
XML/src/xmlparse.cpp:3270:63: note: Function 'storeAtts' argument 3 names different: declaration 's' definition 'attStr'.
storeAtts(XML_Parser parser, const ENCODING *enc, const char *attStr,
                                                              ^
XML/src/xmlparse.cpp:4423:52: style:inconclusive: Function 'prologInitProcessor' argument 2 names different: declaration 'start' definition 's'. [funcArgNamesDifferent]
prologInitProcessor(XML_Parser parser, const char *s, const char *end,
                                                   ^
XML/src/xmlparse.cpp:442:0: note: Function 'prologInitProcessor' argument 2 names different: declaration 'start' definition 's'.
static Processor prologInitProcessor;
^
XML/src/xmlparse.cpp:4423:52: note: Function 'prologInitProcessor' argument 2 names different: declaration 'start' definition 's'.
prologInitProcessor(XML_Parser parser, const char *s, const char *end,
                                                   ^
XML/src/xmlparse.cpp:4424:34: style:inconclusive: Function 'prologInitProcessor' argument 4 names different: declaration 'endPtr' definition 'nextPtr'. [funcArgNamesDifferent]
                    const char **nextPtr) {
                                 ^
XML/src/xmlparse.cpp:442:0: note: Function 'prologInitProcessor' argument 4 names different: declaration 'endPtr' definition 'nextPtr'.
static Processor prologInitProcessor;
^
XML/src/xmlparse.cpp:4424:34: note: Function 'prologInitProcessor' argument 4 names different: declaration 'endPtr' definition 'nextPtr'.
                    const char **nextPtr) {
                                 ^
XML/src/xmlparse.cpp:4623:48: style:inconclusive: Function 'prologProcessor' argument 2 names different: declaration 'start' definition 's'. [funcArgNamesDifferent]
prologProcessor(XML_Parser parser, const char *s, const char *end,
                                               ^
XML/src/xmlparse.cpp:441:0: note: Function 'prologProcessor' argument 2 names different: declaration 'start' definition 's'.
static Processor prologProcessor;
^
XML/src/xmlparse.cpp:4623:48: note: Function 'prologProcessor' argument 2 names different: declaration 'start' definition 's'.
prologProcessor(XML_Parser parser, const char *s, const char *end,
                                               ^
XML/src/xmlparse.cpp:4624:30: style:inconclusive: Function 'prologProcessor' argument 4 names different: declaration 'endPtr' definition 'nextPtr'. [funcArgNamesDifferent]
                const char **nextPtr) {
                             ^
XML/src/xmlparse.cpp:441:0: note: Function 'prologProcessor' argument 4 names different: declaration 'endPtr' definition 'nextPtr'.
static Processor prologProcessor;
^
XML/src/xmlparse.cpp:4624:30: note: Function 'prologProcessor' argument 4 names different: declaration 'endPtr' definition 'nextPtr'.
                const char **nextPtr) {
                             ^
XML/src/xmlparse.cpp:5664:48: style:inconclusive: Function 'epilogProcessor' argument 2 names different: declaration 'start' definition 's'. [funcArgNamesDifferent]
epilogProcessor(XML_Parser parser, const char *s, const char *end,
                                               ^
XML/src/xmlparse.cpp:452:0: note: Function 'epilogProcessor' argument 2 names different: declaration 'start' definition 's'.
static Processor epilogProcessor;
^
XML/src/xmlparse.cpp:5664:48: note: Function 'epilogProcessor' argument 2 names different: declaration 'start' definition 's'.
epilogProcessor(XML_Parser parser, const char *s, const char *end,
                                               ^
XML/src/xmlparse.cpp:5665:30: style:inconclusive: Function 'epilogProcessor' argument 4 names different: declaration 'endPtr' definition 'nextPtr'. [funcArgNamesDifferent]
                const char **nextPtr) {
                             ^
XML/src/xmlparse.cpp:452:0: note: Function 'epilogProcessor' argument 4 names different: declaration 'endPtr' definition 'nextPtr'.
static Processor epilogProcessor;
^
XML/src/xmlparse.cpp:5665:30: note: Function 'epilogProcessor' argument 4 names different: declaration 'endPtr' definition 'nextPtr'.
                const char **nextPtr) {
                             ^
XML/src/xmlparse.cpp:5799:56: style:inconclusive: Function 'internalEntityProcessor' argument 2 names different: declaration 'start' definition 's'. [funcArgNamesDifferent]
internalEntityProcessor(XML_Parser parser, const char *s, const char *end,
                                                       ^
XML/src/xmlparse.cpp:458:0: note: Function 'internalEntityProcessor' argument 2 names different: declaration 'start' definition 's'.
static Processor internalEntityProcessor;
^
XML/src/xmlparse.cpp:5799:56: note: Function 'internalEntityProcessor' argument 2 names different: declaration 'start' definition 's'.
internalEntityProcessor(XML_Parser parser, const char *s, const char *end,
                                                       ^
XML/src/xmlparse.cpp:5800:38: style:inconclusive: Function 'internalEntityProcessor' argument 4 names different: declaration 'endPtr' definition 'nextPtr'. [funcArgNamesDifferent]
                        const char **nextPtr) {
                                     ^
XML/src/xmlparse.cpp:458:0: note: Function 'internalEntityProcessor' argument 4 names different: declaration 'endPtr' definition 'nextPtr'.
static Processor internalEntityProcessor;
^
XML/src/xmlparse.cpp:5800:38: note: Function 'internalEntityProcessor' argument 4 names different: declaration 'endPtr' definition 'nextPtr'.
                        const char **nextPtr) {
                                     ^
XML/src/xmlparse.cpp:5879:47: style:inconclusive: Function 'errorProcessor' argument 2 names different: declaration 'start' definition 's'. [funcArgNamesDifferent]
errorProcessor(XML_Parser parser, const char *s, const char *end,
                                              ^
XML/src/xmlparse.cpp:453:0: note: Function 'errorProcessor' argument 2 names different: declaration 'start' definition 's'.
static Processor errorProcessor;
^
XML/src/xmlparse.cpp:5879:47: note: Function 'errorProcessor' argument 2 names different: declaration 'start' definition 's'.
errorProcessor(XML_Parser parser, const char *s, const char *end,
                                              ^
XML/src/xmlparse.cpp:5880:29: style:inconclusive: Function 'errorProcessor' argument 4 names different: declaration 'endPtr' definition 'nextPtr'. [funcArgNamesDifferent]
               const char **nextPtr) {
                            ^
XML/src/xmlparse.cpp:453:0: note: Function 'errorProcessor' argument 4 names different: declaration 'endPtr' definition 'nextPtr'.
static Processor errorProcessor;
^
XML/src/xmlparse.cpp:5880:29: note: Function 'errorProcessor' argument 4 names different: declaration 'endPtr' definition 'nextPtr'.
               const char **nextPtr) {
                            ^
XML/src/xmlparse.cpp:6104:30: style:inconclusive: Function 'storeEntityValue' argument 3 names different: declaration 'start' definition 'entityTextPtr'. [funcArgNamesDifferent]
                 const char *entityTextPtr, const char *entityTextEnd,
                             ^
XML/src/xmlparse.cpp:509:52: note: Function 'storeEntityValue' argument 3 names different: declaration 'start' definition 'entityTextPtr'.
                                       const char *start, const char *end,
                                                   ^
XML/src/xmlparse.cpp:6104:30: note: Function 'storeEntityValue' argument 3 names different: declaration 'start' definition 'entityTextPtr'.
                 const char *entityTextPtr, const char *entityTextEnd,
                             ^
XML/src/xmlparse.cpp:6104:57: style:inconclusive: Function 'storeEntityValue' argument 4 names different: declaration 'end' definition 'entityTextEnd'. [funcArgNamesDifferent]
                 const char *entityTextPtr, const char *entityTextEnd,
                                                        ^
XML/src/xmlparse.cpp:509:71: note: Function 'storeEntityValue' argument 4 names different: declaration 'end' definition 'entityTextEnd'.
                                       const char *start, const char *end,
                                                                      ^
XML/src/xmlparse.cpp:6104:57: note: Function 'storeEntityValue' argument 4 names different: declaration 'end' definition 'entityTextEnd'.
                 const char *entityTextPtr, const char *entityTextEnd,
                                                        ^
XML/src/xmlparse.cpp:6357:67: style:inconclusive: Function 'reportDefault' argument 3 names different: declaration 'start' definition 's'. [funcArgNamesDifferent]
reportDefault(XML_Parser parser, const ENCODING *enc, const char *s,
                                                                  ^
XML/src/xmlparse.cpp:516:39: note: Function 'reportDefault' argument 3 names different: declaration 'start' definition 's'.
                          const char *start, const char *end);
                                      ^
XML/src/xmlparse.cpp:6357:67: note: Function 'reportDefault' argument 3 names different: declaration 'start' definition 's'.
reportDefault(XML_Parser parser, const ENCODING *enc, const char *s,
                                                                  ^
XML/src/xmlparse.cpp:6404:48: style:inconclusive: Function 'defineAttribute' argument 5 names different: declaration 'dfltValue' definition 'value'. [funcArgNamesDifferent]
                XML_Bool isId, const XML_Char *value, XML_Parser parser) {
                                               ^
XML/src/xmlparse.cpp:495:59: note: Function 'defineAttribute' argument 5 names different: declaration 'dfltValue' definition 'value'.
                           XML_Bool isId, const XML_Char *dfltValue,
                                                          ^
XML/src/xmlparse.cpp:6404:48: note: Function 'defineAttribute' argument 5 names different: declaration 'dfltValue' definition 'value'.
                XML_Bool isId, const XML_Char *value, XML_Parser parser) {
                                               ^
XML/src/xmlparse.cpp:6712:29: style:inconclusive: Function 'normalizePublicId' argument 1 names different: declaration 's' definition 'publicId'. [funcArgNamesDifferent]
normalizePublicId(XML_Char *publicId) {
                            ^
XML/src/xmlparse.cpp:521:50: note: Function 'normalizePublicId' argument 1 names different: declaration 's' definition 'publicId'.
static void FASTCALL normalizePublicId(XML_Char *s);
                                                 ^
XML/src/xmlparse.cpp:6712:29: note: Function 'normalizePublicId' argument 1 names different: declaration 's' definition 'publicId'.
normalizePublicId(XML_Char *publicId) {
                            ^
XML/src/xmlrole.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 13 configurations. Use --force to check all configurations. [toomanyconfigs]

^
XML/src/xmltok.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations. [toomanyconfigs]

^
XML/src/xmltok.c:331:54: error: The address of local variable 'fromLim' is accessed at non-zero index. [objectIndex]
    const unsigned char prev = (unsigned char)fromLim[-1];
                                                     ^
XML/src/xmltok.c:382:56: note: Address of variable taken here.
    _INTERNAL_trim_to_complete_utf8_characters(*fromP, &fromLim);
                                                       ^
XML/src/xmltok.c:382:56: note: Calling function '_INTERNAL_trim_to_complete_utf8_characters', 2nd argument '&fromLim' value is lifetime=fromLim
    _INTERNAL_trim_to_complete_utf8_characters(*fromP, &fromLim);
                                                       ^
XML/src/xmltok.c:331:54: note: The address of local variable 'fromLim' is accessed at non-zero index.
    const unsigned char prev = (unsigned char)fromLim[-1];
                                                     ^
XML/src/xmltok.c:1262:19: style:inconclusive: Function 'XmlUtf8Encode' argument 1 names different: declaration 'charNumber' definition 'c'. [funcArgNamesDifferent]
XmlUtf8Encode(int c, char *buf) {
                  ^
XML/src/xmltok.h:295:32: note: Function 'XmlUtf8Encode' argument 1 names different: declaration 'charNumber' definition 'c'.
int FASTCALL XmlUtf8Encode(int charNumber, char *buf);
                               ^
XML/src/xmltok.c:1262:19: note: Function 'XmlUtf8Encode' argument 1 names different: declaration 'charNumber' definition 'c'.
XmlUtf8Encode(int c, char *buf) {
                  ^
XML/src/xmltok.c:1298:20: style:inconclusive: Function 'XmlUtf16Encode' argument 1 names different: declaration 'charNumber' definition 'charNum'. [funcArgNamesDifferent]
XmlUtf16Encode(int charNum, unsigned short *buf) {
                   ^
XML/src/xmltok.h:296:33: note: Function 'XmlUtf16Encode' argument 1 names different: declaration 'charNumber' definition 'charNum'.
int FASTCALL XmlUtf16Encode(int charNumber, unsigned short *buf);
                                ^
XML/src/xmltok.c:1298:20: note: Function 'XmlUtf16Encode' argument 1 names different: declaration 'charNumber' definition 'charNum'.
XmlUtf16Encode(int charNum, unsigned short *buf) {
                   ^
XML/src/xmltok_ns.c:115:34: style:inconclusive: Function 'XmlParseXmlDecl' argument 8 names different: declaration 'encodingNamePtr' definition 'encodingName'. [funcArgNamesDifferent]
                    const char **encodingName, const ENCODING **encoding,
                                 ^
XML/src/xmltok.h:289:34: note: Function 'XmlParseXmlDecl' argument 8 names different: declaration 'encodingNamePtr' definition 'encodingName'.
                    const char **encodingNamePtr,
                                 ^
XML/src/xmltok_ns.c:115:34: note: Function 'XmlParseXmlDecl' argument 8 names different: declaration 'encodingNamePtr' definition 'encodingName'.
                    const char **encodingName, const ENCODING **encoding,
                                 ^
XML/src/xmltok_ns.c:115:65: style:inconclusive: Function 'XmlParseXmlDecl' argument 9 names different: declaration 'namedEncodingPtr' definition 'encoding'. [funcArgNamesDifferent]
                    const char **encodingName, const ENCODING **encoding,
                                                                ^
XML/src/xmltok.h:290:38: note: Function 'XmlParseXmlDecl' argument 9 names different: declaration 'namedEncodingPtr' definition 'encoding'.
                    const ENCODING **namedEncodingPtr, int *standalonePtr);
                                     ^
XML/src/xmltok_ns.c:115:65: note: Function 'XmlParseXmlDecl' argument 9 names different: declaration 'namedEncodingPtr' definition 'encoding'.
                    const char **encodingName, const ENCODING **encoding,
                                                                ^
XML/src/xmltok_ns.c:116:26: style:inconclusive: Function 'XmlParseXmlDecl' argument 10 names different: declaration 'standalonePtr' definition 'standalone'. [funcArgNamesDifferent]
                    int *standalone) {
                         ^
XML/src/xmltok.h:290:61: note: Function 'XmlParseXmlDecl' argument 10 names different: declaration 'standalonePtr' definition 'standalone'.
                    const ENCODING **namedEncodingPtr, int *standalonePtr);
                                                            ^
XML/src/xmltok_ns.c:116:26: note: Function 'XmlParseXmlDecl' argument 10 names different: declaration 'standalonePtr' definition 'standalone'.
                    int *standalone) {
                         ^
XML/src/xmltok_ns.c:40:1: error: There is an unknown macro here somewhere. Configuration is required. If NS is a macro then please configure it. [unknownMacro]
NS(XmlGetUtf8InternalEncoding)(void) {
^
XML/testsuite/src/AttributesImplTest.h:24:2: style: Class 'AttributesImplTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 AttributesImplTest(const std::string& name);
 ^
XML/testsuite/src/ChildNodesTest.h:24:2: style: Class 'ChildNodesTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 ChildNodesTest(const std::string& name);
 ^
XML/testsuite/src/NodeTest.h:24:2: style: Class 'NodeTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 NodeTest(const std::string& name);
 ^
XML/testsuite/src/ElementTest.h:24:2: style: Class 'ElementTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 ElementTest(const std::string& name);
 ^
XML/testsuite/src/TextTest.h:24:2: style: Class 'TextTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 TextTest(const std::string& name);
 ^
XML/testsuite/src/DocumentTest.h:24:2: style: Class 'DocumentTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 DocumentTest(const std::string& name);
 ^
XML/testsuite/src/DocumentTypeTest.h:24:2: style: Class 'DocumentTypeTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 DocumentTypeTest(const std::string& name);
 ^
XML/testsuite/src/EventTest.h:24:2: style: Class 'EventTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 EventTest(const std::string& name);
 ^
XML/testsuite/src/NodeIteratorTest.h:24:2: style: Class 'NodeIteratorTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 NodeIteratorTest(const std::string& name);
 ^
XML/testsuite/src/TreeWalkerTest.h:24:2: style: Class 'TreeWalkerTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 TreeWalkerTest(const std::string& name);
 ^
XML/testsuite/src/ParserWriterTest.h:24:2: style: Class 'ParserWriterTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 ParserWriterTest(const std::string& name);
 ^
XML/testsuite/src/NodeAppenderTest.h:24:2: style: Class 'NodeAppenderTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 NodeAppenderTest(const std::string& name);
 ^
XML/testsuite/src/EventTest.cpp:39:2: style: Class 'TestEventListener' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 TestEventListener(const XMLString& name, bool cancel = false, bool readd = false, bool capture = false):
 ^
XML/testsuite/src/NamePoolTest.h:24:2: style: Class 'NamePoolTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 NamePoolTest(const std::string& name);
 ^
XML/testsuite/src/NameTest.h:24:2: style: Class 'NameTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 NameTest(const std::string& name);
 ^
XML/testsuite/src/NamespaceSupportTest.h:24:2: style: Class 'NamespaceSupportTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 NamespaceSupportTest(const std::string& name);
 ^
XML/testsuite/src/SAXParserTest.h:25:2: style: Class 'SAXParserTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 SAXParserTest(const std::string& name);
 ^
XML/testsuite/src/XMLStreamParserTest.h:24:2: style: Class 'XMLStreamParserTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 XMLStreamParserTest(const std::string& name);
 ^
XML/testsuite/src/XMLWriterTest.h:24:2: style: Class 'XMLWriterTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 XMLWriterTest(const std::string& name);
 ^
XML/testsuite/src/XMLWriterTest.cpp:202:22: style: Variable 'publicId' is assigned a value that is never used. [unreadVariable]
 std::string publicId("-//W3C//NOTATION XML 1.0//EN");
                     ^
Zip/samples/unzip/src/unzip.cpp:50:7: performance:inconclusive: Technically the member function 'DecompressHandler::onError' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 void onError(const void*, std::pair<const ZipLocalFileHeader, const std::string>& info)
      ^
Zip/samples/unzip/src/unzip.cpp:55:7: performance:inconclusive: Technically the member function 'DecompressHandler::onOk' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 void onOk(const void*, std::pair<const ZipLocalFileHeader, const Poco::Path>& info)
      ^
Zip/samples/unzip/src/unzip.cpp:50:84: style: Parameter 'info' can be declared with const. However it seems that 'onError' is a callback function, if 'info' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
 void onError(const void*, std::pair<const ZipLocalFileHeader, const std::string>& info)
                                                                                   ^
Zip/samples/unzip/src/unzip.cpp:148:137: note: You might need to cast the function pointer here
   c.EError -= Poco::Delegate<DecompressHandler, std::pair<const ZipLocalFileHeader, const std::string> >(&handler, &DecompressHandler::onError);
                                                                                                                                        ^
Zip/samples/unzip/src/unzip.cpp:50:84: note: Parameter 'info' can be declared with const
 void onError(const void*, std::pair<const ZipLocalFileHeader, const std::string>& info)
                                                                                   ^
Zip/src/Compress.cpp:183:15: style: Local variable 'header' shadows outer variable [shadowVariable]
  std::string header = hdr.createHeader();
              ^
Zip/src/Compress.cpp:132:14: note: Shadowed declaration
 std::string header = hdr.createHeader();
             ^
Zip/src/Compress.cpp:183:15: note: Shadow variable
  std::string header = hdr.createHeader();
              ^
Zip/src/Compress.cpp:301:14: style: Local variable 'aFile' shadows outer variable [shadowVariable]
  Poco::File aFile(realFile);
             ^
Zip/src/Compress.cpp:274:13: note: Shadowed declaration
 Poco::File aFile(entry);
            ^
Zip/src/Compress.cpp:301:14: note: Shadow variable
  Poco::File aFile(realFile);
             ^
Zip/src/Compress.cpp:68:17: style: Variable 'fn' is assigned a value that is never used. [unreadVariable]
 std::string fn = ZipUtil::validZipEntryFileName(fileName);
                ^
Zip/src/ZipUtil.cpp:128:10: style:inconclusive: Found duplicate branches for 'if' and 'else'. [duplicateBranch]
    else if (std::memcmp(ZipFileInfo::HEADER+PREFIX, &temp[tempPos - PREFIX], PREFIX) == 0)
         ^
Zip/src/ZipUtil.cpp:133:5: note: Found duplicate branches for 'if' and 'else'.
    else
    ^
Zip/src/ZipUtil.cpp:128:10: note: Found duplicate branches for 'if' and 'else'.
    else if (std::memcmp(ZipFileInfo::HEADER+PREFIX, &temp[tempPos - PREFIX], PREFIX) == 0)
         ^
Zip/testsuite/src/CompressTest.h:24:2: style: Class 'CompressTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 CompressTest(const std::string& name);
 ^
Zip/testsuite/src/ZipTest.h:25:2: style: Class 'ZipTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 ZipTest(const std::string& name);
 ^
Zip/testsuite/src/CompressTest.cpp:167:69: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
 for(FileMap::const_iterator it = files.begin(); it != files.end(); it++)
                                                                    ^
Zip/testsuite/src/CompressTest.cpp:174:69: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
 for(FileMap::const_iterator it = files.begin(); it != files.end(); it++)
                                                                    ^
Zip/testsuite/src/CompressTest.cpp:181:69: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
 for(FileMap::const_iterator it = files.begin(); it != files.end(); it++)
                                                                    ^
Zip/testsuite/src/CompressTest.cpp:191:70: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
 for (FileMap::const_iterator it = files.begin(); it != files.end(); it++)
                                                                     ^
Zip/testsuite/src/PartialStreamTest.h:24:2: style: Class 'PartialStreamTest' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 PartialStreamTest(const std::string& name);
 ^
Zip/testsuite/src/ZipTest.cpp:37:10: warning: Member variable 'ZipTest::_errCnt' is not initialized in the constructor. [uninitMemberVar]
ZipTest::ZipTest(const std::string& name): CppUnit::TestCase(name)
         ^
Zip/testsuite/src/ZipTest.cpp:164:83: style:inconclusive: Function 'getTestFile' argument 2 names different: declaration 'type' definition 'file'. [funcArgNamesDifferent]
std::string ZipTest::getTestFile(const std::string& directory, const std::string& file)
                                                                                  ^
Zip/testsuite/src/ZipTest.h:50:82: note: Function 'getTestFile' argument 2 names different: declaration 'type' definition 'file'.
 static std::string getTestFile(const std::string& directory, const std::string& type);
                                                                                 ^
Zip/testsuite/src/ZipTest.cpp:164:83: note: Function 'getTestFile' argument 2 names different: declaration 'type' definition 'file'.
std::string ZipTest::getTestFile(const std::string& directory, const std::string& file)
                                                                                  ^
Zip/testsuite/src/ZipTest.cpp:327:121: style: Parameter 'info' can be declared with const. However it seems that 'onDecompressError' is a callback function, if 'info' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
void ZipTest::onDecompressError(const void* pSender, std::pair<const Poco::Zip::ZipLocalFileHeader, const std::string>& info)
                                                                                                                        ^
Zip/testsuite/src/ZipTest.cpp:239:123: note: You might need to cast the function pointer here
 dec.EError -= Poco::Delegate<ZipTest, std::pair<const Poco::Zip::ZipLocalFileHeader, const std::string>>(this, &ZipTest::onDecompressError);
                                                                                                                          ^
Zip/testsuite/src/ZipTest.cpp:327:121: note: Parameter 'info' can be declared with const
void ZipTest::onDecompressError(const void* pSender, std::pair<const Poco::Zip::ZipLocalFileHeader, const std::string>& info)
                                                                                                                        ^
Zip/testsuite/src/ZipTest.cpp:62:23: style: Variable 'aDate' is assigned a value that is never used. [unreadVariable]
 Poco::DateTime aDate = hdr.lastModifiedAt();
                      ^
Zip/testsuite/src/ZipTest.cpp:274:97: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
 for(std::map<std::string, Poco::UInt64>::const_iterator it = files.begin(); it != files.end(); it++)
                                                                                                ^
Zip/testsuite/src/ZipTest.cpp:283:97: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
 for(std::map<std::string, Poco::UInt64>::const_iterator it = files.begin(); it != files.end(); it++)
                                                                                                ^
build/script/makedepend.cxx:22:9: error: syntax error [syntaxError]
cxx -M $@ $source | sed "s#\(.*\.o$\)#$dir1/\1 $dir2/\1 $dir3/\1 $dir4/\1#" >$target
        ^
ActiveRecord/testsuite/src/WinDriver.cpp:17:1: error: The one definition rule is violated, different classes/structs have the same name 'TestDriver' [ctuOneDefinitionRuleViolation]
class TestDriver: public CppUnit::WinTestRunnerApp
^
CppParser/testsuite/src/WinDriver.cpp:17:1: note: The one definition rule is violated, different classes/structs have the same name 'TestDriver'
class TestDriver: public CppUnit::WinTestRunnerApp
^
ActiveRecord/testsuite/src/WinDriver.cpp:17:1: note: The one definition rule is violated, different classes/structs have the same name 'TestDriver'
class TestDriver: public CppUnit::WinTestRunnerApp
^
ActiveRecord/testsuite/src/WinDriver.cpp:17:1: error: The one definition rule is violated, different classes/structs have the same name 'TestDriver' [ctuOneDefinitionRuleViolation]
class TestDriver: public CppUnit::WinTestRunnerApp
^
Crypto/testsuite/src/WinDriver.cpp:33:1: note: The one definition rule is violated, different classes/structs have the same name 'TestDriver'
class TestDriver: public CppUnit::WinTestRunnerApp
^
ActiveRecord/testsuite/src/WinDriver.cpp:17:1: note: The one definition rule is violated, different classes/structs have the same name 'TestDriver'
class TestDriver: public CppUnit::WinTestRunnerApp
^
ActiveRecord/testsuite/src/WinDriver.cpp:17:1: error: The one definition rule is violated, different classes/structs have the same name 'TestDriver' [ctuOneDefinitionRuleViolation]
class TestDriver: public CppUnit::WinTestRunnerApp
^
Data/MySQL/testsuite/src/WinDriver.cpp:17:1: note: The one definition rule is violated, different classes/structs have the same name 'TestDriver'
class TestDriver: public CppUnit::WinTestRunnerApp
^
ActiveRecord/testsuite/src/WinDriver.cpp:17:1: note: The one definition rule is violated, different classes/structs have the same name 'TestDriver'
class TestDriver: public CppUnit::WinTestRunnerApp
^
Data/MySQL/testsuite/src/SQLExecutor.h:21:1: error: The one definition rule is violated, different classes/structs have the same name 'SQLExecutor' [ctuOneDefinitionRuleViolation]
class SQLExecutor: public CppUnit::TestCase
^
Data/ODBC/testsuite/src/SQLExecutor.h:75:1: note: The one definition rule is violated, different classes/structs have the same name 'SQLExecutor'
class SQLExecutor: public CppUnit::TestCase
^
Data/MySQL/testsuite/src/SQLExecutor.h:21:1: note: The one definition rule is violated, different classes/structs have the same name 'SQLExecutor'
class SQLExecutor: public CppUnit::TestCase
^
ActiveRecord/testsuite/src/WinDriver.cpp:17:1: error: The one definition rule is violated, different classes/structs have the same name 'TestDriver' [ctuOneDefinitionRuleViolation]
class TestDriver: public CppUnit::WinTestRunnerApp
^
Data/ODBC/testsuite/src/WinDriver.cpp:18:1: note: The one definition rule is violated, different classes/structs have the same name 'TestDriver'
class TestDriver: public CppUnit::WinTestRunnerApp
^
ActiveRecord/testsuite/src/WinDriver.cpp:17:1: note: The one definition rule is violated, different classes/structs have the same name 'TestDriver'
class TestDriver: public CppUnit::WinTestRunnerApp
^
Data/MySQL/testsuite/src/SQLExecutor.h:21:1: error: The one definition rule is violated, different classes/structs have the same name 'SQLExecutor' [ctuOneDefinitionRuleViolation]
class SQLExecutor: public CppUnit::TestCase
^
Data/PostgreSQL/testsuite/src/SQLExecutor.h:20:1: note: The one definition rule is violated, different classes/structs have the same name 'SQLExecutor'
class SQLExecutor: public CppUnit::TestCase
^
Data/MySQL/testsuite/src/SQLExecutor.h:21:1: note: The one definition rule is violated, different classes/structs have the same name 'SQLExecutor'
class SQLExecutor: public CppUnit::TestCase
^
ActiveRecord/testsuite/src/WinDriver.cpp:17:1: error: The one definition rule is violated, different classes/structs have the same name 'TestDriver' [ctuOneDefinitionRuleViolation]
class TestDriver: public CppUnit::WinTestRunnerApp
^
Data/PostgreSQL/testsuite/src/WinDriver.cpp:17:1: note: The one definition rule is violated, different classes/structs have the same name 'TestDriver'
class TestDriver: public CppUnit::WinTestRunnerApp
^
ActiveRecord/testsuite/src/WinDriver.cpp:17:1: note: The one definition rule is violated, different classes/structs have the same name 'TestDriver'
class TestDriver: public CppUnit::WinTestRunnerApp
^
Data/MySQL/testsuite/src/SQLExecutor.cpp:52:1: error: The one definition rule is violated, different classes/structs have the same name 'Person' [ctuOneDefinitionRuleViolation]
struct Person
^
Data/SQLite/testsuite/src/SQLiteTest.cpp:94:1: note: The one definition rule is violated, different classes/structs have the same name 'Person'
class Person
^
Data/MySQL/testsuite/src/SQLExecutor.cpp:52:1: note: The one definition rule is violated, different classes/structs have the same name 'Person'
struct Person
^
ActiveRecord/testsuite/src/WinDriver.cpp:17:1: error: The one definition rule is violated, different classes/structs have the same name 'TestDriver' [ctuOneDefinitionRuleViolation]
class TestDriver: public CppUnit::WinTestRunnerApp
^
Data/SQLite/testsuite/src/WinDriver.cpp:17:1: note: The one definition rule is violated, different classes/structs have the same name 'TestDriver'
class TestDriver: public CppUnit::WinTestRunnerApp
^
ActiveRecord/testsuite/src/WinDriver.cpp:17:1: note: The one definition rule is violated, different classes/structs have the same name 'TestDriver'
class TestDriver: public CppUnit::WinTestRunnerApp
^
Data/MySQL/testsuite/src/SQLExecutor.cpp:52:1: error: The one definition rule is violated, different classes/structs have the same name 'Person' [ctuOneDefinitionRuleViolation]
struct Person
^
Data/samples/Binding/src/Binding.cpp:23:1: note: The one definition rule is violated, different classes/structs have the same name 'Person'
struct Person
^
Data/MySQL/testsuite/src/SQLExecutor.cpp:52:1: note: The one definition rule is violated, different classes/structs have the same name 'Person'
struct Person
^
Data/MySQL/testsuite/src/SQLExecutor.cpp:52:1: error: The one definition rule is violated, different classes/structs have the same name 'Person' [ctuOneDefinitionRuleViolation]
struct Person
^
Data/samples/TypeHandler/src/TypeHandler.cpp:29:1: note: The one definition rule is violated, different classes/structs have the same name 'Person'
struct Person
^
Data/MySQL/testsuite/src/SQLExecutor.cpp:52:1: note: The one definition rule is violated, different classes/structs have the same name 'Person'
struct Person
^
ActiveRecord/testsuite/src/WinDriver.cpp:17:1: error: The one definition rule is violated, different classes/structs have the same name 'TestDriver' [ctuOneDefinitionRuleViolation]
class TestDriver: public CppUnit::WinTestRunnerApp
^
Data/testsuite/src/WinDriver.cpp:17:1: note: The one definition rule is violated, different classes/structs have the same name 'TestDriver'
class TestDriver: public CppUnit::WinTestRunnerApp
^
ActiveRecord/testsuite/src/WinDriver.cpp:17:1: note: The one definition rule is violated, different classes/structs have the same name 'TestDriver'
class TestDriver: public CppUnit::WinTestRunnerApp
^
ActiveRecord/testsuite/src/WinDriver.cpp:17:1: error: The one definition rule is violated, different classes/structs have the same name 'TestDriver' [ctuOneDefinitionRuleViolation]
class TestDriver: public CppUnit::WinTestRunnerApp
^
Encodings/testsuite/src/WinDriver.cpp:17:1: note: The one definition rule is violated, different classes/structs have the same name 'TestDriver'
class TestDriver: public CppUnit::WinTestRunnerApp
^
ActiveRecord/testsuite/src/WinDriver.cpp:17:1: note: The one definition rule is violated, different classes/structs have the same name 'TestDriver'
class TestDriver: public CppUnit::WinTestRunnerApp
^
ActiveRecord/testsuite/src/WinDriver.cpp:17:1: error: The one definition rule is violated, different classes/structs have the same name 'TestDriver' [ctuOneDefinitionRuleViolation]
class TestDriver: public CppUnit::WinTestRunnerApp
^
Foundation/testsuite/src/WinDriver.cpp:17:1: note: The one definition rule is violated, different classes/structs have the same name 'TestDriver'
class TestDriver: public CppUnit::WinTestRunnerApp
^
ActiveRecord/testsuite/src/WinDriver.cpp:17:1: note: The one definition rule is violated, different classes/structs have the same name 'TestDriver'
class TestDriver: public CppUnit::WinTestRunnerApp
^
ActiveRecord/testsuite/src/WinDriver.cpp:17:1: error: The one definition rule is violated, different classes/structs have the same name 'TestDriver' [ctuOneDefinitionRuleViolation]
class TestDriver: public CppUnit::WinTestRunnerApp
^
JSON/testsuite/src/WinDriver.cpp:17:1: note: The one definition rule is violated, different classes/structs have the same name 'TestDriver'
class TestDriver: public CppUnit::WinTestRunnerApp
^
ActiveRecord/testsuite/src/WinDriver.cpp:17:1: note: The one definition rule is violated, different classes/structs have the same name 'TestDriver'
class TestDriver: public CppUnit::WinTestRunnerApp
^
ActiveRecord/testsuite/src/WinDriver.cpp:17:1: error: The one definition rule is violated, different classes/structs have the same name 'TestDriver' [ctuOneDefinitionRuleViolation]
class TestDriver: public CppUnit::WinTestRunnerApp
^
JWT/testsuite/src/WinDriver.cpp:17:1: note: The one definition rule is violated, different classes/structs have the same name 'TestDriver'
class TestDriver: public CppUnit::WinTestRunnerApp
^
ActiveRecord/testsuite/src/WinDriver.cpp:17:1: note: The one definition rule is violated, different classes/structs have the same name 'TestDriver'
class TestDriver: public CppUnit::WinTestRunnerApp
^
ActiveRecord/testsuite/src/WinDriver.cpp:17:1: error: The one definition rule is violated, different classes/structs have the same name 'TestDriver' [ctuOneDefinitionRuleViolation]
class TestDriver: public CppUnit::WinTestRunnerApp
^
MongoDB/testsuite/src/WinDriver.cpp:17:1: note: The one definition rule is violated, different classes/structs have the same name 'TestDriver'
class TestDriver: public CppUnit::WinTestRunnerApp
^
ActiveRecord/testsuite/src/WinDriver.cpp:17:1: note: The one definition rule is violated, different classes/structs have the same name 'TestDriver'
class TestDriver: public CppUnit::WinTestRunnerApp
^
ApacheConnector/samples/FormServer/src/FormServer.cpp:90:1: error: The one definition rule is violated, different classes/structs have the same name 'FormRequestHandler' [ctuOneDefinitionRuleViolation]
class FormRequestHandler: public HTTPRequestHandler
^
Net/samples/HTTPFormServer/src/HTTPFormServer.cpp:109:1: note: The one definition rule is violated, different classes/structs have the same name 'FormRequestHandler'
class FormRequestHandler: public HTTPRequestHandler
^
ApacheConnector/samples/FormServer/src/FormServer.cpp:90:1: note: The one definition rule is violated, different classes/structs have the same name 'FormRequestHandler'
class FormRequestHandler: public HTTPRequestHandler
^
ApacheConnector/samples/FormServer/src/FormServer.cpp:168:1: error: The one definition rule is violated, different classes/structs have the same name 'FormRequestHandlerFactory' [ctuOneDefinitionRuleViolation]
class FormRequestHandlerFactory: public HTTPRequestHandlerFactory
^
Net/samples/HTTPFormServer/src/HTTPFormServer.cpp:190:1: note: The one definition rule is violated, different classes/structs have the same name 'FormRequestHandlerFactory'
class FormRequestHandlerFactory: public HTTPRequestHandlerFactory
^
ApacheConnector/samples/FormServer/src/FormServer.cpp:168:1: note: The one definition rule is violated, different classes/structs have the same name 'FormRequestHandlerFactory'
class FormRequestHandlerFactory: public HTTPRequestHandlerFactory
^
ApacheConnector/samples/TimeServer/src/TimeServer.cpp:31:1: error: The one definition rule is violated, different classes/structs have the same name 'TimeRequestHandler' [ctuOneDefinitionRuleViolation]
class TimeRequestHandler: public HTTPRequestHandler
^
Net/samples/HTTPTimeServer/src/HTTPTimeServer.cpp:51:1: note: The one definition rule is violated, different classes/structs have the same name 'TimeRequestHandler'
class TimeRequestHandler: public HTTPRequestHandler
^
ApacheConnector/samples/TimeServer/src/TimeServer.cpp:31:1: note: The one definition rule is violated, different classes/structs have the same name 'TimeRequestHandler'
class TimeRequestHandler: public HTTPRequestHandler
^
ApacheConnector/samples/TimeServer/src/TimeServer.cpp:57:1: error: The one definition rule is violated, different classes/structs have the same name 'TimeRequestHandlerFactory' [ctuOneDefinitionRuleViolation]
class TimeRequestHandlerFactory: public HTTPRequestHandlerFactory
^
Net/samples/HTTPTimeServer/src/HTTPTimeServer.cpp:84:1: note: The one definition rule is violated, different classes/structs have the same name 'TimeRequestHandlerFactory'
class TimeRequestHandlerFactory: public HTTPRequestHandlerFactory
^
ApacheConnector/samples/TimeServer/src/TimeServer.cpp:57:1: note: The one definition rule is violated, different classes/structs have the same name 'TimeRequestHandlerFactory'
class TimeRequestHandlerFactory: public HTTPRequestHandlerFactory
^
Data/samples/WebNotifier/src/WebNotifier.cpp:69:1: error: The one definition rule is violated, different classes/structs have the same name 'PageRequestHandler' [ctuOneDefinitionRuleViolation]
class PageRequestHandler: public HTTPRequestHandler
^
Net/samples/WebSocketServer/src/WebSocketServer.cpp:50:1: note: The one definition rule is violated, different classes/structs have the same name 'PageRequestHandler'
class PageRequestHandler: public HTTPRequestHandler
^
Data/samples/WebNotifier/src/WebNotifier.cpp:69:1: note: The one definition rule is violated, different classes/structs have the same name 'PageRequestHandler'
class PageRequestHandler: public HTTPRequestHandler
^
Data/samples/WebNotifier/src/WebNotifier.cpp:87:1: error: The one definition rule is violated, different classes/structs have the same name 'WebSocketRequestHandler' [ctuOneDefinitionRuleViolation]
class WebSocketRequestHandler: public HTTPRequestHandler
^
Net/samples/WebSocketServer/src/WebSocketServer.cpp:100:1: note: The one definition rule is violated, different classes/structs have the same name 'WebSocketRequestHandler'
class WebSocketRequestHandler: public HTTPRequestHandler
^
Data/samples/WebNotifier/src/WebNotifier.cpp:87:1: note: The one definition rule is violated, different classes/structs have the same name 'WebSocketRequestHandler'
class WebSocketRequestHandler: public HTTPRequestHandler
^
Data/samples/WebNotifier/src/WebNotifier.cpp:164:1: error: The one definition rule is violated, different classes/structs have the same name 'RequestHandlerFactory' [ctuOneDefinitionRuleViolation]
class RequestHandlerFactory: public HTTPRequestHandlerFactory
^
Net/samples/WebSocketServer/src/WebSocketServer.cpp:144:1: note: The one definition rule is violated, different classes/structs have the same name 'RequestHandlerFactory'
class RequestHandlerFactory: public HTTPRequestHandlerFactory
^
Data/samples/WebNotifier/src/WebNotifier.cpp:164:1: note: The one definition rule is violated, different classes/structs have the same name 'RequestHandlerFactory'
class RequestHandlerFactory: public HTTPRequestHandlerFactory
^
Net/samples/EchoServer/src/EchoServer.cpp:164:1: error: The one definition rule is violated, different classes/structs have the same name 'EchoServer' [ctuOneDefinitionRuleViolation]
class EchoServer: public Poco::Util::ServerApplication
^
Net/testsuite/src/EchoServer.h:24:1: note: The one definition rule is violated, different classes/structs have the same name 'EchoServer'
class EchoServer: public Poco::Runnable
^
Net/samples/EchoServer/src/EchoServer.cpp:164:1: note: The one definition rule is violated, different classes/structs have the same name 'EchoServer'
class EchoServer: public Poco::Util::ServerApplication
^
ActiveRecord/testsuite/src/WinDriver.cpp:17:1: error: The one definition rule is violated, different classes/structs have the same name 'TestDriver' [ctuOneDefinitionRuleViolation]
class TestDriver: public CppUnit::WinTestRunnerApp
^
Net/testsuite/src/WinDriver.cpp:17:1: note: The one definition rule is violated, different classes/structs have the same name 'TestDriver'
class TestDriver: public CppUnit::WinTestRunnerApp
^
ActiveRecord/testsuite/src/WinDriver.cpp:17:1: note: The one definition rule is violated, different classes/structs have the same name 'TestDriver'
class TestDriver: public CppUnit::WinTestRunnerApp
^
ApacheConnector/samples/TimeServer/src/TimeServer.cpp:31:1: error: The one definition rule is violated, different classes/structs have the same name 'TimeRequestHandler' [ctuOneDefinitionRuleViolation]
class TimeRequestHandler: public HTTPRequestHandler
^
NetSSL_OpenSSL/samples/HTTPSTimeServer/src/HTTPSTimeServer.cpp:65:1: note: The one definition rule is violated, different classes/structs have the same name 'TimeRequestHandler'
class TimeRequestHandler: public HTTPRequestHandler
^
ApacheConnector/samples/TimeServer/src/TimeServer.cpp:31:1: note: The one definition rule is violated, different classes/structs have the same name 'TimeRequestHandler'
class TimeRequestHandler: public HTTPRequestHandler
^
ApacheConnector/samples/TimeServer/src/TimeServer.cpp:57:1: error: The one definition rule is violated, different classes/structs have the same name 'TimeRequestHandlerFactory' [ctuOneDefinitionRuleViolation]
class TimeRequestHandlerFactory: public HTTPRequestHandlerFactory
^
NetSSL_OpenSSL/samples/HTTPSTimeServer/src/HTTPSTimeServer.cpp:109:1: note: The one definition rule is violated, different classes/structs have the same name 'TimeRequestHandlerFactory'
class TimeRequestHandlerFactory: public HTTPRequestHandlerFactory
^
ApacheConnector/samples/TimeServer/src/TimeServer.cpp:57:1: note: The one definition rule is violated, different classes/structs have the same name 'TimeRequestHandlerFactory'
class TimeRequestHandlerFactory: public HTTPRequestHandlerFactory
^
Net/testsuite/src/DialogServer.h:26:1: error: The one definition rule is violated, different classes/structs have the same name 'DialogServer' [ctuOneDefinitionRuleViolation]
class DialogServer: public Poco::Runnable
^
NetSSL_OpenSSL/testsuite/src/DialogServer.h:27:1: note: The one definition rule is violated, different classes/structs have the same name 'DialogServer'
class DialogServer: public Poco::Runnable
^
Net/testsuite/src/DialogServer.h:26:1: note: The one definition rule is violated, different classes/structs have the same name 'DialogServer'
class DialogServer: public Poco::Runnable
^
Net/testsuite/src/TCPServerTest.h:21:1: error: The one definition rule is violated, different classes/structs have the same name 'TCPServerTest' [ctuOneDefinitionRuleViolation]
class TCPServerTest: public CppUnit::TestCase
^
NetSSL_OpenSSL/testsuite/src/TCPServerTest.h:21:1: note: The one definition rule is violated, different classes/structs have the same name 'TCPServerTest'
class TCPServerTest: public CppUnit::TestCase
^
Net/testsuite/src/TCPServerTest.h:21:1: note: The one definition rule is violated, different classes/structs have the same name 'TCPServerTest'
class TCPServerTest: public CppUnit::TestCase
^
Net/testsuite/src/WebSocketTest.h:21:1: error: The one definition rule is violated, different classes/structs have the same name 'WebSocketTest' [ctuOneDefinitionRuleViolation]
class WebSocketTest: public CppUnit::TestCase
^
NetSSL_OpenSSL/testsuite/src/WebSocketTest.h:21:1: note: The one definition rule is violated, different classes/structs have the same name 'WebSocketTest'
class WebSocketTest: public CppUnit::TestCase
^
Net/testsuite/src/WebSocketTest.h:21:1: note: The one definition rule is violated, different classes/structs have the same name 'WebSocketTest'
class WebSocketTest: public CppUnit::TestCase
^
NetSSL_OpenSSL/testsuite/src/Driver.cpp:21:1: error: The one definition rule is violated, different classes/structs have the same name 'NetSSLApp' [ctuOneDefinitionRuleViolation]
class NetSSLApp: public Poco::Util::Application
^
NetSSL_OpenSSL/testsuite/src/WinCEDriver.cpp:21:1: note: The one definition rule is violated, different classes/structs have the same name 'NetSSLApp'
class NetSSLApp: public Poco::Util::Application
^
NetSSL_OpenSSL/testsuite/src/Driver.cpp:21:1: note: The one definition rule is violated, different classes/structs have the same name 'NetSSLApp'
class NetSSLApp: public Poco::Util::Application
^
NetSSL_OpenSSL/testsuite/src/Driver.cpp:21:1: error: The one definition rule is violated, different classes/structs have the same name 'NetSSLApp' [ctuOneDefinitionRuleViolation]
class NetSSLApp: public Poco::Util::Application
^
NetSSL_OpenSSL/testsuite/src/WinDriver.cpp:20:1: note: The one definition rule is violated, different classes/structs have the same name 'NetSSLApp'
class NetSSLApp: public Poco::Util::Application
^
NetSSL_OpenSSL/testsuite/src/Driver.cpp:21:1: note: The one definition rule is violated, different classes/structs have the same name 'NetSSLApp'
class NetSSLApp: public Poco::Util::Application
^
ActiveRecord/testsuite/src/WinDriver.cpp:17:1: error: The one definition rule is violated, different classes/structs have the same name 'TestDriver' [ctuOneDefinitionRuleViolation]
class TestDriver: public CppUnit::WinTestRunnerApp
^
NetSSL_OpenSSL/testsuite/src/WinDriver.cpp:55:1: note: The one definition rule is violated, different classes/structs have the same name 'TestDriver'
class TestDriver: public CppUnit::WinTestRunnerApp
^
ActiveRecord/testsuite/src/WinDriver.cpp:17:1: note: The one definition rule is violated, different classes/structs have the same name 'TestDriver'
class TestDriver: public CppUnit::WinTestRunnerApp
^
ApacheConnector/samples/TimeServer/src/TimeServer.cpp:31:1: error: The one definition rule is violated, different classes/structs have the same name 'TimeRequestHandler' [ctuOneDefinitionRuleViolation]
class TimeRequestHandler: public HTTPRequestHandler
^
NetSSL_Win/samples/HTTPSTimeServer/src/HTTPSTimeServer.cpp:62:1: note: The one definition rule is violated, different classes/structs have the same name 'TimeRequestHandler'
class TimeRequestHandler: public HTTPRequestHandler
^
ApacheConnector/samples/TimeServer/src/TimeServer.cpp:31:1: note: The one definition rule is violated, different classes/structs have the same name 'TimeRequestHandler'
class TimeRequestHandler: public HTTPRequestHandler
^
ApacheConnector/samples/TimeServer/src/TimeServer.cpp:57:1: error: The one definition rule is violated, different classes/structs have the same name 'TimeRequestHandlerFactory' [ctuOneDefinitionRuleViolation]
class TimeRequestHandlerFactory: public HTTPRequestHandlerFactory
^
NetSSL_Win/samples/HTTPSTimeServer/src/HTTPSTimeServer.cpp:106:1: note: The one definition rule is violated, different classes/structs have the same name 'TimeRequestHandlerFactory'
class TimeRequestHandlerFactory: public HTTPRequestHandlerFactory
^
ApacheConnector/samples/TimeServer/src/TimeServer.cpp:57:1: note: The one definition rule is violated, different classes/structs have the same name 'TimeRequestHandlerFactory'
class TimeRequestHandlerFactory: public HTTPRequestHandlerFactory
^
NetSSL_OpenSSL/testsuite/src/Driver.cpp:21:1: error: The one definition rule is violated, different classes/structs have the same name 'NetSSLApp' [ctuOneDefinitionRuleViolation]
class NetSSLApp: public Poco::Util::Application
^
NetSSL_Win/testsuite/src/Driver.cpp:21:1: note: The one definition rule is violated, different classes/structs have the same name 'NetSSLApp'
class NetSSLApp: public Poco::Util::Application
^
NetSSL_OpenSSL/testsuite/src/Driver.cpp:21:1: note: The one definition rule is violated, different classes/structs have the same name 'NetSSLApp'
class NetSSLApp: public Poco::Util::Application
^
NetSSL_OpenSSL/testsuite/src/HTTPSClientSessionTest.h:21:1: error: The one definition rule is violated, different classes/structs have the same name 'HTTPSClientSessionTest' [ctuOneDefinitionRuleViolation]
class HTTPSClientSessionTest: public CppUnit::TestCase
^
NetSSL_Win/testsuite/src/HTTPSClientSessionTest.h:21:1: note: The one definition rule is violated, different classes/structs have the same name 'HTTPSClientSessionTest'
class HTTPSClientSessionTest: public CppUnit::TestCase
^
NetSSL_OpenSSL/testsuite/src/HTTPSClientSessionTest.h:21:1: note: The one definition rule is violated, different classes/structs have the same name 'HTTPSClientSessionTest'
class HTTPSClientSessionTest: public CppUnit::TestCase
^
NetSSL_OpenSSL/testsuite/src/HTTPSTestServer.h:23:1: error: The one definition rule is violated, different classes/structs have the same name 'HTTPSTestServer' [ctuOneDefinitionRuleViolation]
class HTTPSTestServer: public Poco::Runnable
^
NetSSL_Win/testsuite/src/HTTPSTestServer.h:23:1: note: The one definition rule is violated, different classes/structs have the same name 'HTTPSTestServer'
class HTTPSTestServer: public Poco::Runnable
^
NetSSL_OpenSSL/testsuite/src/HTTPSTestServer.h:23:1: note: The one definition rule is violated, different classes/structs have the same name 'HTTPSTestServer'
class HTTPSTestServer: public Poco::Runnable
^
NetSSL_OpenSSL/testsuite/src/NetSSLTestSuite.h:20:1: error: The one definition rule is violated, different classes/structs have the same name 'NetSSLTestSuite' [ctuOneDefinitionRuleViolation]
class NetSSLTestSuite
^
NetSSL_Win/testsuite/src/NetSSLTestSuite.h:20:1: note: The one definition rule is violated, different classes/structs have the same name 'NetSSLTestSuite'
class NetSSLTestSuite
^
NetSSL_OpenSSL/testsuite/src/NetSSLTestSuite.h:20:1: note: The one definition rule is violated, different classes/structs have the same name 'NetSSLTestSuite'
class NetSSLTestSuite
^
Net/testsuite/src/TCPServerTest.h:21:1: error: The one definition rule is violated, different classes/structs have the same name 'TCPServerTest' [ctuOneDefinitionRuleViolation]
class TCPServerTest: public CppUnit::TestCase
^
NetSSL_Win/testsuite/src/TCPServerTest.h:21:1: note: The one definition rule is violated, different classes/structs have the same name 'TCPServerTest'
class TCPServerTest: public CppUnit::TestCase
^
Net/testsuite/src/TCPServerTest.h:21:1: note: The one definition rule is violated, different classes/structs have the same name 'TCPServerTest'
class TCPServerTest: public CppUnit::TestCase
^
Net/testsuite/src/WebSocketTest.h:21:1: error: The one definition rule is violated, different classes/structs have the same name 'WebSocketTest' [ctuOneDefinitionRuleViolation]
class WebSocketTest: public CppUnit::TestCase
^
NetSSL_Win/testsuite/src/WebSocketTest.h:21:1: note: The one definition rule is violated, different classes/structs have the same name 'WebSocketTest'
class WebSocketTest: public CppUnit::TestCase
^
Net/testsuite/src/WebSocketTest.h:21:1: note: The one definition rule is violated, different classes/structs have the same name 'WebSocketTest'
class WebSocketTest: public CppUnit::TestCase
^
NetSSL_OpenSSL/testsuite/src/Driver.cpp:21:1: error: The one definition rule is violated, different classes/structs have the same name 'NetSSLApp' [ctuOneDefinitionRuleViolation]
class NetSSLApp: public Poco::Util::Application
^
NetSSL_Win/testsuite/src/WinCEDriver.cpp:22:1: note: The one definition rule is violated, different classes/structs have the same name 'NetSSLApp'
class NetSSLApp: public Poco::Util::Application
^
NetSSL_OpenSSL/testsuite/src/Driver.cpp:21:1: note: The one definition rule is violated, different classes/structs have the same name 'NetSSLApp'
class NetSSLApp: public Poco::Util::Application
^
NetSSL_OpenSSL/testsuite/src/Driver.cpp:21:1: error: The one definition rule is violated, different classes/structs have the same name 'NetSSLApp' [ctuOneDefinitionRuleViolation]
class NetSSLApp: public Poco::Util::Application
^
NetSSL_Win/testsuite/src/WinDriver.cpp:20:1: note: The one definition rule is violated, different classes/structs have the same name 'NetSSLApp'
class NetSSLApp: public Poco::Util::Application
^
NetSSL_OpenSSL/testsuite/src/Driver.cpp:21:1: note: The one definition rule is violated, different classes/structs have the same name 'NetSSLApp'
class NetSSLApp: public Poco::Util::Application
^
ActiveRecord/testsuite/src/WinDriver.cpp:17:1: error: The one definition rule is violated, different classes/structs have the same name 'TestDriver' [ctuOneDefinitionRuleViolation]
class TestDriver: public CppUnit::WinTestRunnerApp
^
NetSSL_Win/testsuite/src/WinDriver.cpp:55:1: note: The one definition rule is violated, different classes/structs have the same name 'TestDriver'
class TestDriver: public CppUnit::WinTestRunnerApp
^
ActiveRecord/testsuite/src/WinDriver.cpp:17:1: note: The one definition rule is violated, different classes/structs have the same name 'TestDriver'
class TestDriver: public CppUnit::WinTestRunnerApp
^
ActiveRecord/testsuite/src/WinDriver.cpp:17:1: error: The one definition rule is violated, different classes/structs have the same name 'TestDriver' [ctuOneDefinitionRuleViolation]
class TestDriver: public CppUnit::WinTestRunnerApp
^
PDF/testsuite/src/WinDriver.cpp:17:1: note: The one definition rule is violated, different classes/structs have the same name 'TestDriver'
class TestDriver: public CppUnit::WinTestRunnerApp
^
ActiveRecord/testsuite/src/WinDriver.cpp:17:1: note: The one definition rule is violated, different classes/structs have the same name 'TestDriver'
class TestDriver: public CppUnit::WinTestRunnerApp
^
ApacheConnector/samples/TimeServer/src/TimeServer.cpp:57:1: error: The one definition rule is violated, different classes/structs have the same name 'TimeRequestHandlerFactory' [ctuOneDefinitionRuleViolation]
class TimeRequestHandlerFactory: public HTTPRequestHandlerFactory
^
PageCompiler/samples/HTTPTimeServer/src/HTTPTimeServerApp.cpp:43:1: note: The one definition rule is violated, different classes/structs have the same name 'TimeRequestHandlerFactory'
class TimeRequestHandlerFactory: public HTTPRequestHandlerFactory
^
ApacheConnector/samples/TimeServer/src/TimeServer.cpp:57:1: note: The one definition rule is violated, different classes/structs have the same name 'TimeRequestHandlerFactory'
class TimeRequestHandlerFactory: public HTTPRequestHandlerFactory
^
ActiveRecord/testsuite/src/WinDriver.cpp:17:1: error: The one definition rule is violated, different classes/structs have the same name 'TestDriver' [ctuOneDefinitionRuleViolation]
class TestDriver: public CppUnit::WinTestRunnerApp
^
Prometheus/testsuite/src/WinDriver.cpp:17:1: note: The one definition rule is violated, different classes/structs have the same name 'TestDriver'
class TestDriver: public CppUnit::WinTestRunnerApp
^
ActiveRecord/testsuite/src/WinDriver.cpp:17:1: note: The one definition rule is violated, different classes/structs have the same name 'TestDriver'
class TestDriver: public CppUnit::WinTestRunnerApp
^
ActiveRecord/testsuite/src/WinDriver.cpp:17:1: error: The one definition rule is violated, different classes/structs have the same name 'TestDriver' [ctuOneDefinitionRuleViolation]
class TestDriver: public CppUnit::WinTestRunnerApp
^
Redis/testsuite/src/WinDriver.cpp:17:1: note: The one definition rule is violated, different classes/structs have the same name 'TestDriver'
class TestDriver: public CppUnit::WinTestRunnerApp
^
ActiveRecord/testsuite/src/WinDriver.cpp:17:1: note: The one definition rule is violated, different classes/structs have the same name 'TestDriver'
class TestDriver: public CppUnit::WinTestRunnerApp
^
Foundation/testsuite/src/TimerTest.h:23:1: error: The one definition rule is violated, different classes/structs have the same name 'TimerTest' [ctuOneDefinitionRuleViolation]
class TimerTest: public CppUnit::TestCase
^
Util/testsuite/src/TimerTest.h:23:1: note: The one definition rule is violated, different classes/structs have the same name 'TimerTest'
class TimerTest: public CppUnit::TestCase
^
Foundation/testsuite/src/TimerTest.h:23:1: note: The one definition rule is violated, different classes/structs have the same name 'TimerTest'
class TimerTest: public CppUnit::TestCase
^
ActiveRecord/testsuite/src/WinDriver.cpp:17:1: error: The one definition rule is violated, different classes/structs have the same name 'TestDriver' [ctuOneDefinitionRuleViolation]
class TestDriver: public CppUnit::WinTestRunnerApp
^
Util/testsuite/src/WinDriver.cpp:17:1: note: The one definition rule is violated, different classes/structs have the same name 'TestDriver'
class TestDriver: public CppUnit::WinTestRunnerApp
^
ActiveRecord/testsuite/src/WinDriver.cpp:17:1: note: The one definition rule is violated, different classes/structs have the same name 'TestDriver'
class TestDriver: public CppUnit::WinTestRunnerApp
^
ActiveRecord/testsuite/src/WinDriver.cpp:17:1: error: The one definition rule is violated, different classes/structs have the same name 'TestDriver' [ctuOneDefinitionRuleViolation]
class TestDriver: public CppUnit::WinTestRunnerApp
^
XML/testsuite/src/WinDriver.cpp:17:1: note: The one definition rule is violated, different classes/structs have the same name 'TestDriver'
class TestDriver: public CppUnit::WinTestRunnerApp
^
ActiveRecord/testsuite/src/WinDriver.cpp:17:1: note: The one definition rule is violated, different classes/structs have the same name 'TestDriver'
class TestDriver: public CppUnit::WinTestRunnerApp
^
ActiveRecord/testsuite/src/WinDriver.cpp:17:1: error: The one definition rule is violated, different classes/structs have the same name 'TestDriver' [ctuOneDefinitionRuleViolation]
class TestDriver: public CppUnit::WinTestRunnerApp
^
Zip/testsuite/src/WinDriver.cpp:17:1: note: The one definition rule is violated, different classes/structs have the same name 'TestDriver'
class TestDriver: public CppUnit::WinTestRunnerApp
^
ActiveRecord/testsuite/src/WinDriver.cpp:17:1: note: The one definition rule is violated, different classes/structs have the same name 'TestDriver'
class TestDriver: public CppUnit::WinTestRunnerApp
^
Data/SQLite/src/sqlite3.c:24847:8: error: Null pointer dereference: pVfs [ctunullpointer]
  rc = pVfs->xOpen(pVfs, zPath, pFile, flags & 0x1087f7f, pFlagsOut);
       ^
Data/SQLite/src/sqlite3.c:101209:21: note: Calling function sqlite3JournalOpen, 1st argument is null
  sqlite3JournalOpen(0, 0, pJfd, 0, -1);
                    ^
Data/SQLite/src/sqlite3.c:101187:12: note: Calling function sqlite3OsOpen, 1st argument is null
    return sqlite3OsOpen(pVfs, zName, pJfd, flags, 0);
           ^
Data/SQLite/src/sqlite3.c:24847:8: note: Dereferencing argument pVfs that is null
  rc = pVfs->xOpen(pVfs, zPath, pFile, flags & 0x1087f7f, pFlagsOut);
       ^
Data/SQLite/src/sqlite3.c:50949:10: warning: Null pointer dereference: p [ctunullpointer]
  return p->iSize;
         ^
Data/SQLite/src/sqlite3.c:67474:9: note: Assuming that condition '!pBt->pHasContent' is not redundant

        ^
Data/SQLite/src/sqlite3.c:67478:47: note: Calling function sqlite3BitvecSize, 1st argument is null
  if( rc==SQLITE_OK && pgno<=sqlite3BitvecSize(pBt->pHasContent) ){
                                              ^
Data/SQLite/src/sqlite3.c:50949:10: note: Dereferencing argument p that is null
  return p->iSize;
         ^
Data/SQLite/src/sqlite3.c:135366:4: warning: Null pointer dereference: ppStmt [ctunullpointer]
  *ppStmt = 0;
   ^
Data/SQLite/src/sqlite3.c:135446:34: note: Assuming that condition 'ppStmt==0' is not redundant

                                 ^
Data/SQLite/src/sqlite3.c:135445:29: note: Calling function sqlite3LockAndPrepare, 6th argument is null
  rc = sqlite3LockAndPrepare(db,zSql,nBytes,0,0,ppStmt,pzTail);
                            ^
Data/SQLite/src/sqlite3.c:135366:4: note: Dereferencing argument ppStmt that is null
  *ppStmt = 0;
   ^
Data/SQLite/src/sqlite3.c:135514:4: warning: Null pointer dereference: ppStmt [ctunullpointer]
  *ppStmt = 0;
   ^
Data/SQLite/src/sqlite3.c:135562:34: note: Assuming that condition 'ppStmt==0' is not redundant

                                 ^
Data/SQLite/src/sqlite3.c:135561:24: note: Calling function sqlite3Prepare16, 5th argument is null
  rc = sqlite3Prepare16(db,zSql,nBytes,0,ppStmt,pzTail);
                       ^
Data/SQLite/src/sqlite3.c:135514:4: note: Dereferencing argument ppStmt that is null
  *ppStmt = 0;
   ^
Foundation/src/bignum.cc:132:0: style: The function 'AssignHexString' is never used. [unusedFunction]

^
SevenZip/src/LzFind.c:495:0: style: The function 'Bt3Zip_MatchFinder_GetMatches' is never used. [unusedFunction]

^
SevenZip/src/LzFind.c:660:0: style: The function 'Bt3Zip_MatchFinder_Skip' is never used. [unusedFunction]

^
SevenZip/src/CpuArch.c:159:0: style: The function 'CPU_Is_Aes_Supported' is never used. [unusedFunction]

^
SevenZip/src/XzCrc64.c:30:0: style: The function 'Crc64Calc' is never used. [unusedFunction]

^
SevenZip/src/XzCrc64.c:9:0: style: The function 'Crc64GenerateTable' is never used. [unusedFunction]

^
SevenZip/src/7zBuf2.c:7:0: style: The function 'DynBuf_Construct' is never used. [unusedFunction]

^
SevenZip/src/7zBuf2.c:39:0: style: The function 'DynBuf_Free' is never used. [unusedFunction]

^
SevenZip/src/7zBuf2.c:14:0: style: The function 'DynBuf_SeekToBeg' is never used. [unusedFunction]

^
SevenZip/src/7zBuf2.c:19:0: style: The function 'DynBuf_Write' is never used. [unusedFunction]

^
Foundation/src/double-to-string.cc:42:0: style: The function 'EcmaScriptConverter' is never used. [unusedFunction]

^
SevenZip/src/7zFile.c:281:0: style: The function 'FileOutStream_CreateVTable' is never used. [unusedFunction]

^
SevenZip/src/7zFile.c:245:0: style: The function 'FileSeqInStream_CreateVTable' is never used. [unusedFunction]

^
SevenZip/src/7zFile.c:28:0: style: The function 'File_Construct' is never used. [unusedFunction]

^
SevenZip/src/7zFile.c:210:0: style: The function 'File_GetLength' is never used. [unusedFunction]

^
PDF/src/hpdf_utils.c:63:0: style: The function 'HPDF_AToF' is never used. [unusedFunction]

^
PDF/src/hpdf_array.c:139:0: style: The function 'HPDF_Array_AddReal' is never used. [unusedFunction]

^
PDF/src/hpdf_fontdef_base14.c:4460:0: style: The function 'HPDF_Base14FontDef_New' is never used. [unusedFunction]

^
PDF/src/hpdf_binary.c:110:0: style: The function 'HPDF_Binary_GetLen' is never used. [unusedFunction]

^
PDF/src/hpdf_binary.c:116:0: style: The function 'HPDF_Binary_GetValue' is never used. [unusedFunction]

^
PDF/src/hpdf_fontdef_cid.c:142:0: style: The function 'HPDF_CIDFontDef_AddWidth' is never used. [unusedFunction]

^
PDF/src/hpdf_fontdef_cid.c:174:0: style: The function 'HPDF_CIDFontDef_ChangeStyle' is never used. [unusedFunction]

^
PDF/src/hpdf_fontdef_cid.c:56:0: style: The function 'HPDF_CIDFontDef_New' is never used. [unusedFunction]

^
PDF/src/hpdf_streams.c:1392:0: style: The function 'HPDF_CallbackReader_New' is never used. [unusedFunction]

^
PDF/src/hpdf_streams.c:1437:0: style: The function 'HPDF_CallbackWriter_New' is never used. [unusedFunction]

^
PDF/src/hpdf_catalog.c:197:0: style: The function 'HPDF_Catalog_AddPageLabel' is never used. [unusedFunction]

^
PDF/src/hpdf_catalog.c:90:0: style: The function 'HPDF_Catalog_GetNames' is never used. [unusedFunction]

^
PDF/src/hpdf_catalog.c:107:0: style: The function 'HPDF_Catalog_GetPageLayout' is never used. [unusedFunction]

^
PDF/src/hpdf_catalog.c:139:0: style: The function 'HPDF_Catalog_GetPageMode' is never used. [unusedFunction]

^
PDF/src/hpdf_catalog.c:73:0: style: The function 'HPDF_Catalog_GetRoot' is never used. [unusedFunction]

^
PDF/src/hpdf_catalog.c:334:0: style: The function 'HPDF_Catalog_GetViewerPreference' is never used. [unusedFunction]

^
PDF/src/hpdf_catalog.c:46:0: style: The function 'HPDF_Catalog_New' is never used. [unusedFunction]

^
PDF/src/hpdf_catalog.c:99:0: style: The function 'HPDF_Catalog_SetNames' is never used. [unusedFunction]

^
PDF/src/hpdf_catalog.c:168:0: style: The function 'HPDF_Catalog_SetOpenAction' is never used. [unusedFunction]

^
PDF/src/hpdf_catalog.c:128:0: style: The function 'HPDF_Catalog_SetPageLayout' is never used. [unusedFunction]

^
PDF/src/hpdf_catalog.c:159:0: style: The function 'HPDF_Catalog_SetPageMode' is never used. [unusedFunction]

^
PDF/src/hpdf_catalog.c:237:0: style: The function 'HPDF_Catalog_SetViewerPreference' is never used. [unusedFunction]

^
PDF/src/hpdf_catalog.c:181:0: style: The function 'HPDF_Catalog_Validate' is never used. [unusedFunction]

^
PDF/src/hpdf_dict.c:392:0: style: The function 'HPDF_Dict_AddReal' is never used. [unusedFunction]

^
PDF/src/hpdf_dict.c:494:0: style: The function 'HPDF_Dict_GetKeyByObj' is never used. [unusedFunction]

^
PDF/src/hpdf_namedict.c:186:0: style: The function 'HPDF_EmbeddedFile_New' is never used. [unusedFunction]

^
PDF/src/hpdf_namedict.c:233:0: style: The function 'HPDF_EmbeddedFile_Validate' is never used. [unusedFunction]

^
PDF/src/hpdf_encryptdict.c:230:0: style: The function 'HPDF_EncryptDict_GetAttr' is never used. [unusedFunction]

^
PDF/src/hpdf_encryptdict.c:29:0: style: The function 'HPDF_EncryptDict_New' is never used. [unusedFunction]

^
PDF/src/hpdf_encryptdict.c:127:0: style: The function 'HPDF_EncryptDict_Prepare' is never used. [unusedFunction]

^
PDF/src/hpdf_encryptdict.c:190:0: style: The function 'HPDF_EncryptDict_SetPassword' is never used. [unusedFunction]

^
PDF/src/hpdf_encryptdict.c:213:0: style: The function 'HPDF_EncryptDict_Validate' is never used. [unusedFunction]

^
PDF/src/hpdf_fontdef.c:23:0: style: The function 'HPDF_FontDef_Cleanup' is never used. [unusedFunction]

^
PDF/src/hpdf_fontdef.c:50:0: style: The function 'HPDF_FontDef_Validate' is never used. [unusedFunction]

^
PDF/src/hpdf_gstate.c:111:0: style: The function 'HPDF_GState_Free' is never used. [unusedFunction]

^
PDF/src/hpdf_gstate.c:23:0: style: The function 'HPDF_GState_New' is never used. [unusedFunction]

^
PDF/src/hpdf_image_png.c:380:0: style: The function 'HPDF_Image_LoadPngImage' is never used. [unusedFunction]

^
PDF/src/hpdf_info.c:53:0: style: The function 'HPDF_Info_SetInfoAttr' is never used. [unusedFunction]

^
PDF/src/hpdf_info.c:95:0: style: The function 'HPDF_Info_SetInfoDateAttr' is never used. [unusedFunction]

^
PDF/src/hpdf_mmgr.c:126:0: style: The function 'HPDF_MMgr_Free' is never used. [unusedFunction]

^
PDF/src/hpdf_mmgr.c:43:0: style: The function 'HPDF_MMgr_New' is never used. [unusedFunction]

^
PDF/src/hpdf_streams.c:1258:0: style: The function 'HPDF_MemStream_GetBufCount' is never used. [unusedFunction]

^
PDF/src/hpdf_streams.c:1244:0: style: The function 'HPDF_MemStream_GetBufSize' is never used. [unusedFunction]

^
PDF/src/hpdf_namedict.c:52:0: style: The function 'HPDF_NameDict_GetNameTree' is never used. [unusedFunction]

^
PDF/src/hpdf_namedict.c:32:0: style: The function 'HPDF_NameDict_New' is never used. [unusedFunction]

^
PDF/src/hpdf_namedict.c:61:0: style: The function 'HPDF_NameDict_SetNameTree' is never used. [unusedFunction]

^
PDF/src/hpdf_namedict.c:69:0: style: The function 'HPDF_NameDict_Validate' is never used. [unusedFunction]

^
PDF/src/hpdf_namedict.c:117:0: style: The function 'HPDF_NameTree_Add' is never used. [unusedFunction]

^
PDF/src/hpdf_namedict.c:87:0: style: The function 'HPDF_NameTree_New' is never used. [unusedFunction]

^
PDF/src/hpdf_namedict.c:168:0: style: The function 'HPDF_NameTree_Validate' is never used. [unusedFunction]

^
PDF/src/hpdf_name.c:70:0: style: The function 'HPDF_Name_GetValue' is never used. [unusedFunction]

^
PDF/src/hpdf_null.c:23:0: style: The function 'HPDF_Null_New' is never used. [unusedFunction]

^
PDF/src/hpdf_pdfa.c:345:0: style: The function 'HPDF_PDFA_AppendOutputIntents' is never used. [unusedFunction]

^
PDF/src/hpdf_pdfa.c:138:0: style: The function 'HPDF_PDFA_SetPDFAConformance' is never used. [unusedFunction]

^
PDF/src/hpdf_page_label.c:23:0: style: The function 'HPDF_PageLabel_New' is never used. [unusedFunction]

^
PDF/src/hpdf_streams.c:279:0: style: The function 'HPDF_Stream_WriteUChar' is never used. [unusedFunction]

^
PDF/src/hpdf_fontdef_tt.c:286:0: style: The function 'HPDF_TTFontDef_Load' is never used. [unusedFunction]

^
PDF/src/hpdf_fontdef_tt.c:313:0: style: The function 'HPDF_TTFontDef_Load2' is never used. [unusedFunction]

^
PDF/src/hpdf_fontdef_tt.c:2193:0: style: The function 'HPDF_TTFontDef_SetTagName' is never used. [unusedFunction]

^
PDF/src/hpdf_font_tt.c:61:0: style: The function 'HPDF_TTFont_New' is never used. [unusedFunction]

^
PDF/src/hpdf_utils.c:409:0: style: The function 'HPDF_ToPoint' is never used. [unusedFunction]

^
PDF/src/hpdf_utils.c:421:0: style: The function 'HPDF_ToRect' is never used. [unusedFunction]

^
PDF/src/hpdf_font_cid.c:78:0: style: The function 'HPDF_Type0Font_New' is never used. [unusedFunction]

^
PDF/src/hpdf_fontdef_type1.c:417:0: style: The function 'HPDF_Type1FontDef_Duplicate' is never used. [unusedFunction]

^
PDF/src/hpdf_fontdef_type1.c:478:0: style: The function 'HPDF_Type1FontDef_GetWidthByName' is never used. [unusedFunction]

^
PDF/src/hpdf_fontdef_type1.c:381:0: style: The function 'HPDF_Type1FontDef_Load' is never used. [unusedFunction]

^
PDF/src/hpdf_font_type1.c:56:0: style: The function 'HPDF_Type1Font_New' is never used. [unusedFunction]

^
PDF/src/hpdf_xref.c:188:0: style: The function 'HPDF_Xref_GetEntryByObjectId' is never used. [unusedFunction]

^
PDF/src/hpdf_xref.c:28:0: style: The function 'HPDF_Xref_New' is never used. [unusedFunction]

^
PDF/src/hpdf_xref.c:221:0: style: The function 'HPDF_Xref_WriteToStream' is never used. [unusedFunction]

^
SevenZip/src/LzFind.c:635:0: style: The function 'Hc3Zip_MatchFinder_GetMatches' is never used. [unusedFunction]

^
SevenZip/src/LzFind.c:721:0: style: The function 'Hc3Zip_MatchFinder_Skip' is never used. [unusedFunction]

^
SevenZip/src/7zFile.c:58:0: style: The function 'InFile_Open' is never used. [unusedFunction]

^
SevenZip/src/Lzma2Dec.c:330:0: style: The function 'Lzma2Decode' is never used. [unusedFunction]

^
SevenZip/src/Lzma86Dec.c:24:0: style: The function 'Lzma86_Decode' is never used. [unusedFunction]

^
SevenZip/src/Lzma86Enc.c:17:0: style: The function 'Lzma86_Encode' is never used. [unusedFunction]

^
SevenZip/src/Lzma86Dec.c:13:0: style: The function 'Lzma86_GetUnpackSize' is never used. [unusedFunction]

^
SevenZip/src/LzmaLib.c:15:0: style: The function 'LzmaCompress' is never used. [unusedFunction]

^
SevenZip/src/LzmaDec.c:841:0: style: The function 'LzmaDec_DecodeToBuf' is never used. [unusedFunction]

^
SevenZip/src/LzmaEnc.c:2192:0: style: The function 'LzmaEnc_Encode' is never used. [unusedFunction]

^
SevenZip/src/LzmaEnc.c:2116:0: style: The function 'LzmaEnc_GetNumAvailableBytes' is never used. [unusedFunction]

^
SevenZip/src/LzmaLib.c:41:0: style: The function 'LzmaUncompress' is never used. [unusedFunction]

^
SevenZip/src/Threads.c:54:0: style: The function 'ManualResetEvent_CreateNotSignaled' is never used. [unusedFunction]

^
SevenZip/src/Alloc.c:49:0: style: The function 'MidAlloc' is never used. [unusedFunction]

^
SevenZip/src/Alloc.c:59:0: style: The function 'MidFree' is never used. [unusedFunction]

^
SevenZip/src/LzFindMt.c:130:0: style: The function 'MtSync_Init' is never used. [unusedFunction]

^
SevenZip/src/7zFile.c:59:0: style: The function 'OutFile_Open' is never used. [unusedFunction]

^
SevenZip/src/7zFile.c:73:0: style: The function 'OutFile_OpenW' is never used. [unusedFunction]

^
SevenZip/src/Ppmd7Enc.c:77:0: style: The function 'Ppmd7_EncodeSymbol' is never used. [unusedFunction]

^
SevenZip/src/Ppmd7Enc.c:67:0: style: The function 'Ppmd7z_RangeEnc_FlushData' is never used. [unusedFunction]

^
SevenZip/src/Ppmd7Enc.c:9:0: style: The function 'Ppmd7z_RangeEnc_Init' is never used. [unusedFunction]

^
Data/ODBC/src/Unicode_UNIXODBC.cpp:615:0: style: The function 'SQLBrowseConnect' is never used. [unusedFunction]

^
Data/ODBC/src/Unicode_UNIXODBC.cpp:102:0: style: The function 'SQLColAttributes' is never used. [unusedFunction]

^
Data/ODBC/src/Unicode_UNIXODBC.cpp:640:0: style: The function 'SQLColumnPrivileges' is never used. [unusedFunction]

^
Data/ODBC/src/Unicode_UNIXODBC.cpp:451:0: style: The function 'SQLColumns' is never used. [unusedFunction]

^
Data/ODBC/src/Unicode_UNIXODBC.cpp:120:0: style: The function 'SQLConnect' is never used. [unusedFunction]

^
Data/ODBC/src/Unicode_UNIXODBC.cpp:170:0: style: The function 'SQLError' is never used. [unusedFunction]

^
Data/ODBC/src/Unicode_UNIXODBC.cpp:654:0: style: The function 'SQLForeignKeys' is never used. [unusedFunction]

^
Data/ODBC/src/Unicode_UNIXODBC.cpp:465:0: style: The function 'SQLGetConnectOption' is never used. [unusedFunction]

^
Data/ODBC/src/Unicode_UNIXODBC.cpp:224:0: style: The function 'SQLGetCursorName' is never used. [unusedFunction]

^
Data/ODBC/src/Unicode_UNIXODBC.cpp:291:0: style: The function 'SQLGetDescRec' is never used. [unusedFunction]

^
Data/ODBC/src/Unicode_UNIXODBC.cpp:307:0: style: The function 'SQLGetDiagField' is never used. [unusedFunction]

^
Data/ODBC/src/Unicode_UNIXODBC.cpp:342:0: style: The function 'SQLGetDiagRec' is never used. [unusedFunction]

^
Data/ODBC/src/Unicode_UNIXODBC.cpp:697:0: style: The function 'SQLPrimaryKeys' is never used. [unusedFunction]

^
Data/ODBC/src/Unicode_UNIXODBC.cpp:709:0: style: The function 'SQLProcedureColumns' is never used. [unusedFunction]

^
Data/ODBC/src/Unicode_UNIXODBC.cpp:723:0: style: The function 'SQLProcedures' is never used. [unusedFunction]

^
Data/ODBC/src/Unicode_UNIXODBC.cpp:504:0: style: The function 'SQLSetConnectOption' is never used. [unusedFunction]

^
Data/ODBC/src/Unicode_UNIXODBC.cpp:402:0: style: The function 'SQLSetCursorName' is never used. [unusedFunction]

^
Data/ODBC/src/Unicode_UNIXODBC.cpp:233:0: style: The function 'SQLSetDescField' is never used. [unusedFunction]

^
Data/ODBC/src/Unicode_UNIXODBC.cpp:512:0: style: The function 'SQLSpecialColumns' is never used. [unusedFunction]

^
Data/ODBC/src/Unicode_UNIXODBC.cpp:527:0: style: The function 'SQLStatistics' is never used. [unusedFunction]

^
Data/ODBC/src/Unicode_UNIXODBC.cpp:735:0: style: The function 'SQLTablePrivileges' is never used. [unusedFunction]

^
Data/ODBC/src/Unicode_UNIXODBC.cpp:541:0: style: The function 'SQLTables' is never used. [unusedFunction]

^
SevenZip/src/7zStream.c:155:0: style: The function 'SecToLook_CreateVTable' is never used. [unusedFunction]

^
SevenZip/src/Alloc.c:79:0: style: The function 'SetLargePageSize' is never used. [unusedFunction]

^
Foundation/src/string-to-double.cc:784:0: style: The function 'StringTo < double >' is never used. [unusedFunction]

^
Foundation/src/string-to-double.cc:793:0: style: The function 'StringTo < float >' is never used. [unusedFunction]

^
Foundation/src/strtod.cc:488:0: style: The function 'Strtod' is never used. [unusedFunction]

^
Foundation/src/strtod.cc:521:0: style: The function 'Strtof' is never used. [unusedFunction]

^
SevenZip/src/7zAlloc.c:46:0: style: The function 'SzAllocTemp' is never used. [unusedFunction]

^
SevenZip/src/7zIn.c:249:0: style: The function 'SzArEx_GetFolderFullPackSize' is never used. [unusedFunction]

^
SevenZip/src/7zAlloc.c:61:0: style: The function 'SzFreeTemp' is never used. [unusedFunction]

^
ActiveRecord/testsuite/src/WinDriver.cpp:19:0: style: The function 'TestMain' is never used. [unusedFunction]

^
Foundation/src/double-to-string.cc:241:0: style: The function 'ToExponential' is never used. [unusedFunction]

^
Foundation/src/bignum.cc:588:0: style: The function 'ToHexString' is never used. [unusedFunction]

^
Foundation/src/double-to-string.cc:296:0: style: The function 'ToPrecision' is never used. [unusedFunction]

^
XML/src/xmlparse.cpp:2364:0: style: The function 'XML_DefaultCurrent' is never used. [unusedFunction]

^
XML/src/xmlparse.cpp:2484:0: style: The function 'XML_ExpatVersion' is never used. [unusedFunction]

^
XML/src/xmlparse.cpp:2503:0: style: The function 'XML_ExpatVersionInfo' is never used. [unusedFunction]

^
XML/src/xmlparse.cpp:2338:0: style: The function 'XML_FreeContentModel' is never used. [unusedFunction]

^
XML/src/xmlparse.cpp:1583:0: style: The function 'XML_GetBase' is never used. [unusedFunction]

^
XML/src/xmlparse.cpp:2285:0: style: The function 'XML_GetCurrentByteCount' is never used. [unusedFunction]

^
XML/src/xmlparse.cpp:2275:0: style: The function 'XML_GetCurrentByteIndex' is never used. [unusedFunction]

^
XML/src/xmlparse.cpp:2514:0: style: The function 'XML_GetFeatureList' is never used. [unusedFunction]

^
XML/src/xmlparse.cpp:1597:0: style: The function 'XML_GetIdAttributeIndex' is never used. [unusedFunction]

^
XML/src/xmlparse.cpp:2294:0: style: The function 'XML_GetInputContext' is never used. [unusedFunction]

^
XML/src/xmlparse.cpp:2358:0: style: The function 'XML_MemFree' is never used. [unusedFunction]

^
XML/src/xmlparse.cpp:2344:0: style: The function 'XML_MemMalloc' is never used. [unusedFunction]

^
XML/src/xmlparse.cpp:2351:0: style: The function 'XML_MemRealloc' is never used. [unusedFunction]

^
XML/src/xmlparse.cpp:1211:0: style: The function 'XML_ParserReset' is never used. [unusedFunction]

^
XML/src/xmlparse.cpp:1799:0: style: The function 'XML_SetAttlistDeclHandler' is never used. [unusedFunction]

^
XML/src/xmlparse.cpp:1569:0: style: The function 'XML_SetBase' is never used. [unusedFunction]

^
XML/src/xmlparse.cpp:1793:0: style: The function 'XML_SetElementDeclHandler' is never used. [unusedFunction]

^
XML/src/xmlparse.cpp:1252:0: style: The function 'XML_SetEncoding' is never used. [unusedFunction]

^
XML/src/xmlparse.cpp:1671:0: style: The function 'XML_SetEndCdataSectionHandler' is never used. [unusedFunction]

^
XML/src/xmlparse.cpp:1710:0: style: The function 'XML_SetEndDoctypeDeclHandler' is never used. [unusedFunction]

^
XML/src/xmlparse.cpp:1746:0: style: The function 'XML_SetEndNamespaceDeclHandler' is never used. [unusedFunction]

^
XML/src/xmlparse.cpp:1767:0: style: The function 'XML_SetExternalEntityRefHandlerArg' is never used. [unusedFunction]

^
XML/src/xmlparse.cpp:1753:0: style: The function 'XML_SetNotStandaloneHandler' is never used. [unusedFunction]

^
XML/src/xmlparse.cpp:1664:0: style: The function 'XML_SetStartCdataSectionHandler' is never used. [unusedFunction]

^
XML/src/xmlparse.cpp:1703:0: style: The function 'XML_SetStartDoctypeDeclHandler' is never used. [unusedFunction]

^
XML/src/xmlparse.cpp:1739:0: style: The function 'XML_SetStartNamespaceDeclHandler' is never used. [unusedFunction]

^
XML/src/xmlparse.cpp:1811:0: style: The function 'XML_SetXmlDeclHandler' is never used. [unusedFunction]

^
XML/src/xmlparse.cpp:1531:0: style: The function 'XML_UseForeignDTD' is never used. [unusedFunction]

^
XML/src/xmlparse.cpp:1525:0: style: The function 'XML_UseParserAsHandlerArg' is never used. [unusedFunction]

^
XML/src/xmltok.c:1298:0: style: The function 'XmlUtf16Encode' is never used. [unusedFunction]

^
SevenZip/src/XzIn.c:23:0: style: The function 'XzBlock_ReadHeader' is never used. [unusedFunction]

^
SevenZip/src/XzEnc.c:388:0: style: The function 'XzFilterProps_Init' is never used. [unusedFunction]

^
SevenZip/src/XzEnc.c:381:0: style: The function 'XzProps_Init' is never used. [unusedFunction]

^
SevenZip/src/XzDec.c:618:0: style: The function 'XzUnpacker_Code' is never used. [unusedFunction]

^
SevenZip/src/XzDec.c:607:0: style: The function 'XzUnpacker_Construct' is never used. [unusedFunction]

^
SevenZip/src/XzDec.c:613:0: style: The function 'XzUnpacker_Free' is never used. [unusedFunction]

^
SevenZip/src/XzDec.c:886:0: style: The function 'XzUnpacker_IsStreamWasFinished' is never used. [unusedFunction]

^
SevenZip/src/XzEnc.c:494:0: style: The function 'Xz_Encode' is never used. [unusedFunction]

^
SevenZip/src/XzEnc.c:510:0: style: The function 'Xz_EncodeEmpty' is never used. [unusedFunction]

^
SevenZip/src/XzIn.c:228:0: style: The function 'Xzs_Construct' is never used. [unusedFunction]

^
SevenZip/src/XzIn.c:234:0: style: The function 'Xzs_Free' is never used. [unusedFunction]

^
SevenZip/src/XzIn.c:244:0: style: The function 'Xzs_GetNumBlocks' is never used. [unusedFunction]

^
SevenZip/src/XzIn.c:253:0: style: The function 'Xzs_GetUnpackSize' is never used. [unusedFunction]

^
SevenZip/src/XzIn.c:273:0: style: The function 'Xzs_ReadBackward' is never used. [unusedFunction]

^
Foundation/wcelibcex-1.0/src/wce_time.c:102:0: style: The function '__wceex_tm_to_time_t' is never used. [unusedFunction]

^
Crypto/testsuite/src/WinCEDriver.cpp:34:0: style: The function '_tmain' is never used. [unusedFunction]

^
Foundation/src/trees.c:1014:0: style: The function '_tr_tally' is never used. [unusedFunction]

^
Foundation/src/adler32.c:172:0: style: The function 'adler32_combine' is never used. [unusedFunction]

^
Foundation/src/adler32.c:180:0: style: The function 'adler32_combine64' is never used. [unusedFunction]

^
Foundation/src/VarHolder.cpp:63:0: style: The function 'appendJSONKey' is never used. [unusedFunction]

^
XML/src/xmltok_impl.c:1261:0: style: The function 'attributeValueTok' is never used. [unusedFunction]

^
Data/PostgreSQL/testsuite/src/SQLExecutor.cpp:252:0: style: The function 'barebonePostgreSQLTest' is never used. [unusedFunction]

^
Foundation/src/Timestamp.cpp:85:0: style: The function 'calibrate' is never used. [unusedFunction]

^
XML/src/xmltok_impl.c:355:0: style: The function 'cdataSectionTok' is never used. [unusedFunction]

^
XML/src/xmltok_impl.c:823:0: style: The function 'contentTok' is never used. [unusedFunction]

^
Foundation/src/crc32.c:1093:0: style: The function 'crc32_combine' is never used. [unusedFunction]

^
Foundation/src/crc32.c:1112:0: style: The function 'crc32_combine_gen' is never used. [unusedFunction]

^
Foundation/src/crc32.c:1119:0: style: The function 'crc32_combine_op' is never used. [unusedFunction]

^
Foundation/src/deflate.c:696:0: style: The function 'deflateBound' is never used. [unusedFunction]

^
Foundation/src/deflate.c:1156:0: style: The function 'deflateCopy' is never used. [unusedFunction]

^
Foundation/src/deflate.c:481:0: style: The function 'deflateGetDictionary' is never used. [unusedFunction]

^
Foundation/src/deflate.c:564:0: style: The function 'deflatePending' is never used. [unusedFunction]

^
Foundation/src/deflate.c:578:0: style: The function 'deflatePrime' is never used. [unusedFunction]

^
Foundation/src/deflate.c:412:0: style: The function 'deflateSetDictionary' is never used. [unusedFunction]

^
Foundation/src/deflate.c:553:0: style: The function 'deflateSetHeader' is never used. [unusedFunction]

^
Foundation/src/deflate.c:654:0: style: The function 'deflateTune' is never used. [unusedFunction]

^
Foundation/src/pcre2_match.c:211:0: style: The function 'display_frames' is never used. [unusedFunction]

^
XML/src/xmltok_impl.c:1330:0: style: The function 'entityValueTok' is never used. [unusedFunction]

^
Net/src/wepoll.c:584:0: style: The function 'epoll_create1' is never used. [unusedFunction]

^
PDF/src/XMLTemplate.cpp:195:0: style: The function 'extend' is never used. [unusedFunction]

^
Net/testsuite/src/SocketReactorTest.cpp:197:0: style: The function 'getCloseOnTimeout' is never used. [unusedFunction]

^
Foundation/testsuite/src/BasicEventTest.cpp:412:0: style: The function 'getCount' is never used. [unusedFunction]

^
Foundation/testsuite/src/UniqueExpireCacheTest.cpp:35:0: style: The function 'getExpiration' is never used. [unusedFunction]

^
Net/testsuite/src/SyslogTest.cpp:58:0: style: The function 'getMaxSize' is never used. [unusedFunction]

^
Foundation/src/crc32.c:595:0: style: The function 'get_crc_table' is never used. [unusedFunction]

^
PDF/src/gzio.c:1017:0: style: The function 'gzclearerr' is never used. [unusedFunction]

^
PDF/src/gzio.c:953:0: style: The function 'gzclose' is never used. [unusedFunction]

^
PDF/src/gzio.c:908:0: style: The function 'gzdirect' is never used. [unusedFunction]

^
PDF/src/gzio.c:219:0: style: The function 'gzdopen' is never used. [unusedFunction]

^
PDF/src/gzio.c:891:0: style: The function 'gzeof' is never used. [unusedFunction]

^
PDF/src/gzio.c:987:0: style: The function 'gzerror' is never used. [unusedFunction]

^
PDF/src/gzio.c:746:0: style: The function 'gzflush' is never used. [unusedFunction]

^
PDF/src/gzio.c:503:0: style: The function 'gzgetc' is never used. [unusedFunction]

^
PDF/src/gzio.c:540:0: style: The function 'gzgets' is never used. [unusedFunction]

^
PDF/src/gzio.c:208:0: style: The function 'gzopen' is never used. [unusedFunction]

^
PDF/src/gzio.c:637:0: style: The function 'gzprintf' is never used. [unusedFunction]

^
PDF/src/gzio.c:678:0: style: The function 'gzputc' is never used. [unusedFunction]

^
PDF/src/gzio.c:693:0: style: The function 'gzputs' is never used. [unusedFunction]

^
PDF/src/gzio.c:234:0: style: The function 'gzsetparams' is never used. [unusedFunction]

^
PDF/src/gzio.c:881:0: style: The function 'gztell' is never used. [unusedFunction]

^
PDF/src/gzio.c:515:0: style: The function 'gzungetc' is never used. [unusedFunction]

^
Net/src/NetworkInterface.cpp:341:0: style: The function 'hasAddress' is never used. [unusedFunction]

^
XML/src/xmltok_impl.c:1397:0: style: The function 'ignoreSectionTok' is never used. [unusedFunction]

^
Foundation/src/infback.c:251:0: style: The function 'inflateBack' is never used. [unusedFunction]

^
Foundation/src/infback.c:635:0: style: The function 'inflateBackEnd' is never used. [unusedFunction]

^
Foundation/src/infback.c:28:0: style: The function 'inflateBackInit_' is never used. [unusedFunction]

^
Foundation/src/inflate.c:1588:0: style: The function 'inflateCodesUsed' is never used. [unusedFunction]

^
Foundation/src/inflate.c:1495:0: style: The function 'inflateCopy' is never used. [unusedFunction]

^
Foundation/src/inflate.c:1318:0: style: The function 'inflateGetDictionary' is never used. [unusedFunction]

^
Foundation/src/inflate.c:1376:0: style: The function 'inflateGetHeader' is never used. [unusedFunction]

^
Foundation/src/inflate.c:242:0: style: The function 'inflateInit_' is never used. [unusedFunction]

^
Foundation/src/inflate.c:1575:0: style: The function 'inflateMark' is never used. [unusedFunction]

^
Foundation/src/inflate.c:250:0: style: The function 'inflatePrime' is never used. [unusedFunction]

^
Foundation/src/inflate.c:1341:0: style: The function 'inflateSetDictionary' is never used. [unusedFunction]

^
Foundation/src/inflate.c:1427:0: style: The function 'inflateSync' is never used. [unusedFunction]

^
Foundation/src/inflate.c:1485:0: style: The function 'inflateSyncPoint' is never used. [unusedFunction]

^
Foundation/src/inflate.c:1542:0: style: The function 'inflateUndermine' is never used. [unusedFunction]

^
Foundation/src/inflate.c:1560:0: style: The function 'inflateValidate' is never used. [unusedFunction]

^
JSON/src/pdjson.c:882:0: style: The function 'json_get_context' is never used. [unusedFunction]

^
JSON/src/pdjson.c:858:0: style: The function 'json_get_lineno' is never used. [unusedFunction]

^
JSON/src/pdjson.c:847:0: style: The function 'json_get_number' is never used. [unusedFunction]

^
JSON/src/pdjson.c:863:0: style: The function 'json_get_position' is never used. [unusedFunction]

^
JSON/src/pdjson.c:920:0: style: The function 'json_open_stream' is never used. [unusedFunction]

^
JSON/src/pdjson.c:915:0: style: The function 'json_open_string' is never used. [unusedFunction]

^
JSON/src/pdjson.c:787:0: style: The function 'json_reset' is never used. [unusedFunction]

^
JSON/src/pdjson.c:948:0: style: The function 'json_set_allocator' is never used. [unusedFunction]

^
JSON/src/pdjson.c:822:0: style: The function 'json_skip_until' is never used. [unusedFunction]

^
JSON/src/pdjson.c:893:0: style: The function 'json_source_get' is never used. [unusedFunction]

^
JSON/src/pdjson.c:901:0: style: The function 'json_source_peek' is never used. [unusedFunction]

^
Net/testsuite/src/DialogServer.cpp:97:0: style: The function 'lastCommand' is never used. [unusedFunction]

^
Net/testsuite/src/DialogServer.cpp:109:0: style: The function 'lastCommands' is never used. [unusedFunction]

^
PDF/src/inflate.c:269:0: style: The function 'makefixed' is never used. [unusedFunction]

^
Foundation/src/pcre2_maketables.c:74:0: style: The function 'maketables' is never used. [unusedFunction]

^
Foundation/testsuite/src/MemoryPoolTest.cpp:238:0: style: The function 'memoryPoolBenchmark' is never used. [unusedFunction]

^
Foundation/src/pcre2_pattern_info.c:265:0: style: The function 'pcre2_callout_enumerate_8' is never used. [unusedFunction]

^
Foundation/src/pcre2_compile.c:1192:0: style: The function 'pcre2_code_copy_8' is never used. [unusedFunction]

^
Foundation/src/pcre2_compile.c:1226:0: style: The function 'pcre2_code_copy_with_tables_8' is never used. [unusedFunction]

^
Foundation/src/pcre2_context.c:238:0: style: The function 'pcre2_compile_context_copy_8' is never used. [unusedFunction]

^
Foundation/src/pcre2_config.c:76:0: style: The function 'pcre2_config_8' is never used. [unusedFunction]

^
Foundation/src/pcre2_context.c:263:0: style: The function 'pcre2_convert_context_copy_8' is never used. [unusedFunction]

^
Foundation/src/pcre2_context.c:209:0: style: The function 'pcre2_convert_context_create_8' is never used. [unusedFunction]

^
Foundation/src/pcre2_context.c:303:0: style: The function 'pcre2_convert_context_free_8' is never used. [unusedFunction]

^
Foundation/src/pcre2_convert.c:1169:0: style: The function 'pcre2_converted_pattern_free_8' is never used. [unusedFunction]

^
Foundation/src/pcre2_dfa_match.c:3295:0: style: The function 'pcre2_dfa_match_8' is never used. [unusedFunction]

^
Foundation/src/pcre2_context.c:226:0: style: The function 'pcre2_general_context_copy_8' is never used. [unusedFunction]

^
Foundation/src/pcre2_context.c:112:0: style: The function 'pcre2_general_context_create_8' is never used. [unusedFunction]

^
Foundation/src/pcre2_context.c:279:0: style: The function 'pcre2_general_context_free_8' is never used. [unusedFunction]

^
Foundation/src/pcre2_match_data.c:157:0: style: The function 'pcre2_get_match_data_size_8' is never used. [unusedFunction]

^
Foundation/src/pcre2_match_data.c:145:0: style: The function 'pcre2_get_startchar_8' is never used. [unusedFunction]

^
Foundation/src/pcre2_jit_compile.c:14379:0: style: The function 'pcre2_jit_compile_8' is never used. [unusedFunction]

^
Foundation/src/pcre2_jit_match.c:85:0: style: The function 'pcre2_jit_match' is never used. [unusedFunction]

^
Foundation/src/pcre2_maketables.c:80:0: style: The function 'pcre2_maketables_8' is never used. [unusedFunction]

^
Foundation/src/pcre2_maketables.c:152:0: style: The function 'pcre2_maketables_free_8' is never used. [unusedFunction]

^
Foundation/src/pcre2_context.c:250:0: style: The function 'pcre2_match_context_copy_8' is never used. [unusedFunction]

^
Foundation/src/pcre2_context.c:179:0: style: The function 'pcre2_match_context_create_8' is never used. [unusedFunction]

^
Foundation/src/pcre2_context.c:295:0: style: The function 'pcre2_match_context_free_8' is never used. [unusedFunction]

^
Foundation/src/pcre2_convert.c:1054:0: style: The function 'pcre2_pattern_convert_8' is never used. [unusedFunction]

^
Foundation/src/pcre2_serialize.c:159:0: style: The function 'pcre2_serialize_decode_8' is never used. [unusedFunction]

^
Foundation/src/pcre2_serialize.c:68:0: style: The function 'pcre2_serialize_encode_8' is never used. [unusedFunction]

^
Foundation/src/pcre2_serialize.c:273:0: style: The function 'pcre2_serialize_free_8' is never used. [unusedFunction]

^
Foundation/src/pcre2_serialize.c:255:0: style: The function 'pcre2_serialize_get_number_of_codes_8' is never used. [unusedFunction]

^
Foundation/src/pcre2_context.c:330:0: style: The function 'pcre2_set_bsr_8' is never used. [unusedFunction]

^
Foundation/src/pcre2_context.c:397:0: style: The function 'pcre2_set_callout_8' is never used. [unusedFunction]

^
Foundation/src/pcre2_context.c:322:0: style: The function 'pcre2_set_character_tables_8' is never used. [unusedFunction]

^
Foundation/src/pcre2_context.c:378:0: style: The function 'pcre2_set_compile_extra_options_8' is never used. [unusedFunction]

^
Foundation/src/pcre2_context.c:385:0: style: The function 'pcre2_set_compile_recursion_guard_8' is never used. [unusedFunction]

^
Foundation/src/pcre2_context.c:476:0: style: The function 'pcre2_set_glob_escape_8' is never used. [unusedFunction]

^
Foundation/src/pcre2_context.c:467:0: style: The function 'pcre2_set_glob_separator_8' is never used. [unusedFunction]

^
Foundation/src/pcre2_context.c:416:0: style: The function 'pcre2_set_heap_limit_8' is never used. [unusedFunction]

^
Foundation/src/pcre2_context.c:423:0: style: The function 'pcre2_set_match_limit_8' is never used. [unusedFunction]

^
Foundation/src/pcre2_context.c:345:0: style: The function 'pcre2_set_max_pattern_length_8' is never used. [unusedFunction]

^
Foundation/src/pcre2_context.c:437:0: style: The function 'pcre2_set_offset_limit_8' is never used. [unusedFunction]

^
Foundation/src/pcre2_context.c:371:0: style: The function 'pcre2_set_parens_nest_limit_8' is never used. [unusedFunction]

^
Foundation/src/pcre2_context.c:447:0: style: The function 'pcre2_set_recursion_limit_8' is never used. [unusedFunction]

^
Foundation/src/pcre2_context.c:453:0: style: The function 'pcre2_set_recursion_memory_management_8' is never used. [unusedFunction]

^
Foundation/src/pcre2_context.c:406:0: style: The function 'pcre2_set_substitute_callout_8' is never used. [unusedFunction]

^
Foundation/src/pcre2_substitute.c:217:0: style: The function 'pcre2_substitute_8' is never used. [unusedFunction]

^
Foundation/src/pcre2_substring.c:70:0: style: The function 'pcre2_substring_copy_byname_8' is never used. [unusedFunction]

^
Foundation/src/pcre2_substring.c:238:0: style: The function 'pcre2_substring_free_8' is never used. [unusedFunction]

^
Foundation/src/pcre2_substring.c:158:0: style: The function 'pcre2_substring_get_byname_8' is never used. [unusedFunction]

^
Foundation/src/pcre2_substring.c:265:0: style: The function 'pcre2_substring_length_byname_8' is never used. [unusedFunction]

^
Foundation/src/pcre2_substring.c:442:0: style: The function 'pcre2_substring_list_free_8' is never used. [unusedFunction]

^
Foundation/src/pcre2_substring.c:369:0: style: The function 'pcre2_substring_list_get_8' is never used. [unusedFunction]

^
PDF/src/pngrtran.c:2462:0: style: The function 'png_build_grayscale_palette' is never used. [unusedFunction]

^
PDF/src/png.c:135:0: style: The function 'png_check_sig' is never used. [unusedFunction]

^
PDF/src/pngrtran.c:2508:0: style: The function 'png_correct_palette' is never used. [unusedFunction]

^
PDF/src/png.c:322:0: style: The function 'png_data_freer' is never used. [unusedFunction]

^
PDF/src/pngwtran.c:515:0: style: The function 'png_do_write_intrapixel' is never used. [unusedFunction]

^
PDF/src/pnggccrd.c:15:0: style: The function 'png_dummy_mmx_support' is never used. [unusedFunction]

^
PDF/src/pngerror.c:83:0: style: The function 'png_err' is never used. [unusedFunction]

^
PDF/src/pngwio.c:221:0: style: The function 'png_far_to_near' is never used. [unusedFunction]

^
PDF/src/pngwio.c:124:0: style: The function 'png_flush' is never used. [unusedFunction]

^
PDF/src/pngget.c:850:0: style: The function 'png_get_asm_flagmask' is never used. [unusedFunction]

^
PDF/src/pngget.c:842:0: style: The function 'png_get_asm_flags' is never used. [unusedFunction]

^
PDF/src/pngget.c:68:0: style: The function 'png_get_bit_depth' is never used. [unusedFunction]

^
PDF/src/pngget.c:343:0: style: The function 'png_get_channels' is never used. [unusedFunction]

^
PDF/src/pngget.c:832:0: style: The function 'png_get_compression_buffer_size' is never used. [unusedFunction]

^
PDF/src/pngget.c:108:0: style: The function 'png_get_compression_type' is never used. [unusedFunction]

^
PDF/src/pngget.c:88:0: style: The function 'png_get_filter_type' is never used. [unusedFunction]

^
PDF/src/png.c:719:0: style: The function 'png_get_header_ver' is never used. [unusedFunction]

^
PDF/src/pngrutil.c:74:0: style: The function 'png_get_int_32' is never used. [unusedFunction]

^
PDF/src/png.c:711:0: style: The function 'png_get_libpng_ver' is never used. [unusedFunction]

^
PDF/src/pngmem.c:602:0: style: The function 'png_get_mem_ptr' is never used. [unusedFunction]

^
PDF/src/pngget.c:870:0: style: The function 'png_get_mmx_bitdepth_threshold' is never used. [unusedFunction]

^
PDF/src/pngget.c:860:0: style: The function 'png_get_mmx_flagmask' is never used. [unusedFunction]

^
PDF/src/pngget.c:878:0: style: The function 'png_get_mmx_rowbytes_threshold' is never used. [unusedFunction]

^
PDF/src/pngget.c:586:0: style: The function 'png_get_oFFs' is never used. [unusedFunction]

^
PDF/src/pngget.c:664:0: style: The function 'png_get_pHYs' is never used. [unusedFunction]

^
PDF/src/pngget.c:304:0: style: The function 'png_get_pHYs_dpi' is never used. [unusedFunction]

^
PDF/src/pngget.c:174:0: style: The function 'png_get_pixel_aspect_ratio' is never used. [unusedFunction]

^
PDF/src/pngget.c:268:0: style: The function 'png_get_pixels_per_inch' is never used. [unusedFunction]

^
PDF/src/pngpread.c:1581:0: style: The function 'png_get_progressive_ptr' is never used. [unusedFunction]

^
PDF/src/pngget.c:645:0: style: The function 'png_get_sCAL_s' is never used. [unusedFunction]

^
PDF/src/pngget.c:352:0: style: The function 'png_get_signature' is never used. [unusedFunction]

^
PDF/src/pngrutil.c:86:0: style: The function 'png_get_uint_16' is never used. [unusedFunction]

^
PDF/src/pngtrans.c:653:0: style: The function 'png_get_user_transform_ptr' is never used. [unusedFunction]

^
PDF/src/pngget.c:289:0: style: The function 'png_get_x_offset_inches' is never used. [unusedFunction]

^
PDF/src/pngget.c:231:0: style: The function 'png_get_x_offset_pixels' is never used. [unusedFunction]

^
PDF/src/pngget.c:275:0: style: The function 'png_get_x_pixels_per_inch' is never used. [unusedFunction]

^
PDF/src/pngget.c:296:0: style: The function 'png_get_y_offset_inches' is never used. [unusedFunction]

^
PDF/src/pngget.c:249:0: style: The function 'png_get_y_offset_pixels' is never used. [unusedFunction]

^
PDF/src/pngget.c:282:0: style: The function 'png_get_y_pixels_per_inch' is never used. [unusedFunction]

^
PDF/src/pngrutil.c:726:0: style: The function 'png_handle_cHRM' is never used. [unusedFunction]

^
PDF/src/pngrutil.c:579:0: style: The function 'png_handle_gAMA' is never used. [unusedFunction]

^
PDF/src/pngrutil.c:1700:0: style: The function 'png_handle_sCAL' is never used. [unusedFunction]

^
PDF/src/pngrutil.c:890:0: style: The function 'png_handle_sRGB' is never used. [unusedFunction]

^
PDF/src/png.c:293:0: style: The function 'png_info_init' is never used. [unusedFunction]

^
PDF/src/png.c:778:0: style: The function 'png_mmx_support' is never used. [unusedFunction]

^
PDF/src/pngset.c:1084:0: style: The function 'png_permit_empty_plte' is never used. [unusedFunction]

^
PDF/src/pngpread.c:28:0: style: The function 'png_process_data' is never used. [unusedFunction]

^
PDF/src/pngpread.c:1555:0: style: The function 'png_progressive_combine_row' is never used. [unusedFunction]

^
PDF/src/pngread.c:176:0: style: The function 'png_read_init' is never used. [unusedFunction]

^
PDF/src/pngread.c:1321:0: style: The function 'png_read_png' is never used. [unusedFunction]

^
PDF/src/png.c:758:0: style: The function 'png_reset_zstream' is never used. [unusedFunction]

^
PDF/src/pngwutil.c:33:0: style: The function 'png_save_int_32' is never used. [unusedFunction]

^
PDF/src/pngwutil.c:46:0: style: The function 'png_save_uint_16' is never used. [unusedFunction]

^
PDF/src/pngtrans.c:132:0: style: The function 'png_set_add_alpha' is never used. [unusedFunction]

^
PDF/src/pngset.c:1214:0: style: The function 'png_set_asm_flags' is never used. [unusedFunction]

^
PDF/src/pngrtran.c:79:0: style: The function 'png_set_background' is never used. [unusedFunction]

^
PDF/src/pngset.c:1189:0: style: The function 'png_set_compression_buffer_size' is never used. [unusedFunction]

^
PDF/src/pngwrite.c:1348:0: style: The function 'png_set_compression_level' is never used. [unusedFunction]

^
PDF/src/pngwrite.c:1358:0: style: The function 'png_set_compression_mem_level' is never used. [unusedFunction]

^
PDF/src/pngwrite.c:1399:0: style: The function 'png_set_compression_method' is never used. [unusedFunction]

^
PDF/src/pngwrite.c:1368:0: style: The function 'png_set_compression_strategy' is never used. [unusedFunction]

^
PDF/src/pngwrite.c:1378:0: style: The function 'png_set_compression_window_bits' is never used. [unusedFunction]

^
PDF/src/pngrtran.c:23:0: style: The function 'png_set_crc_action' is never used. [unusedFunction]

^
PDF/src/pngrtran.c:141:0: style: The function 'png_set_dither' is never used. [unusedFunction]

^
PDF/src/pngrtran.c:546:0: style: The function 'png_set_expand' is never used. [unusedFunction]

^
PDF/src/pngwrite.c:1111:0: style: The function 'png_set_filter' is never used. [unusedFunction]

^
PDF/src/pngrtran.c:527:0: style: The function 'png_set_gamma' is never used. [unusedFunction]

^
PDF/src/pngrtran.c:603:0: style: The function 'png_set_gray_1_2_4_to_8' is never used. [unusedFunction]

^
PDF/src/pngtrans.c:79:0: style: The function 'png_set_interlace_handling' is never used. [unusedFunction]

^
PDF/src/pngset.c:1203:0: style: The function 'png_set_invalid' is never used. [unusedFunction]

^
PDF/src/pngtrans.c:157:0: style: The function 'png_set_invert_alpha' is never used. [unusedFunction]

^
PDF/src/pngtrans.c:167:0: style: The function 'png_set_invert_mono' is never used. [unusedFunction]

^
PDF/src/pngmem.c:587:0: style: The function 'png_set_mem_fn' is never used. [unusedFunction]

^
PDF/src/pngset.c:1223:0: style: The function 'png_set_mmx_thresholds' is never used. [unusedFunction]

^
PDF/src/pngtrans.c:56:0: style: The function 'png_set_packswap' is never used. [unusedFunction]

^
PDF/src/pngrtran.c:575:0: style: The function 'png_set_palette_to_rgb' is never used. [unusedFunction]

^
PDF/src/pngpread.c:1568:0: style: The function 'png_set_progressive_read_fn' is never used. [unusedFunction]

^
PDF/src/pngrtran.c:643:0: style: The function 'png_set_rgb_to_gray' is never used. [unusedFunction]

^
PDF/src/pngerror.c:334:0: style: The function 'png_set_strip_error_numbers' is never used. [unusedFunction]

^
PDF/src/pngrtran.c:614:0: style: The function 'png_set_tRNS_to_alpha' is never used. [unusedFunction]

^
PDF/src/pngtrans.c:630:0: style: The function 'png_set_user_transform_info' is never used. [unusedFunction]

^
PDF/src/pngread.c:554:0: style: The function 'png_start_read_image' is never used. [unusedFunction]

^
PDF/src/pngwrite.c:559:0: style: The function 'png_write_init' is never used. [unusedFunction]

^
PDF/src/pngwrite.c:1434:0: style: The function 'png_write_png' is never used. [unusedFunction]

^
Net/testsuite/src/UDPServerTest.cpp:53:0: style: The function 'processData' is never used. [unusedFunction]

^
XML/src/xmltok_impl.c:1017:0: style: The function 'prologTok' is never used. [unusedFunction]

^
Net/src/FTPStreamFactory.cpp:50:0: style: The function 'readFromDevice' is never used. [unusedFunction]

^
NetSSL_Win/src/SecureSocketImpl.cpp:1598:0: style: The function 'readOrWritable' is never used. [unusedFunction]

^
Data/PostgreSQL/testsuite/src/PostgreSQLTest.cpp:1124:0: style: The function 'recreateDoublesTable' is never used. [unusedFunction]

^
Data/ODBC/testsuite/src/ODBCSQLServerTest.cpp:656:0: style: The function 'recreateVectorTable' is never used. [unusedFunction]

^
Net/src/NetworkInterface.cpp:520:0: style: The function 'setIndex' is never used. [unusedFunction]

^
Net/src/NetworkInterface.cpp:477:0: style: The function 'setRunning' is never used. [unusedFunction]

^
Data/SQLite/src/sqlite3.c:130960:0: style: The function 'sqlite3_enable_load_extension' is never used. [unusedFunction]

^
Data/SQLite/src/sqlite3.c:174360:0: style: The function 'sqlite3_global_recover' is never used. [unusedFunction]

^
Data/SQLite/src/sqlite3.c:28864:0: style: The function 'sqlite3_memory_alarm' is never used. [unusedFunction]

^
Data/SQLite/src/sqlite3.c:171071:0: style: The function 'sqlite3_shutdown' is never used. [unusedFunction]

^
Data/PostgreSQL/testsuite/src/PostgreSQLTest.cpp:296:0: style: The function 'testBarebonePostgreSQL' is never used. [unusedFunction]

^
Redis/testsuite/src/RedisTest.cpp:771:0: style: The function 'testHSTRLEN' is never used. [unusedFunction]

^
Net/testsuite/src/MulticastSocketTest.cpp:48:0: style: The function 'testMulticast' is never used. [unusedFunction]

^
Net/testsuite/src/MessageHeaderTest.cpp:363:0: style: The function 'testNameLengthLimit' is never used. [unusedFunction]

^
Foundation/testsuite/src/LinearHashTableTest.cpp:187:0: style: The function 'testPerformanceInt' is never used. [unusedFunction]

^
Foundation/testsuite/src/LinearHashTableTest.cpp:258:0: style: The function 'testPerformanceStr' is never used. [unusedFunction]

^
Net/testsuite/src/MailMessageTest.cpp:488:0: style: The function 'testReadMultiPartWithAttachmentNames' is never used. [unusedFunction]

^
Data/ODBC/testsuite/src/ODBCSQLServerTest.cpp:151:0: style: The function 'testTempTable' is never used. [unusedFunction]

^
Net/testsuite/src/MessageHeaderTest.cpp:379:0: style: The function 'testValueLengthLimit' is never used. [unusedFunction]

^
Data/SQLite/src/sqlite3.c:85436:0: style: The function 'vdbeRecordCompareInt' is never used. [unusedFunction]

^
Data/SQLite/src/sqlite3.c:85531:0: style: The function 'vdbeRecordCompareString' is never used. [unusedFunction]

^
Data/SQLite/src/sqlite3.c:98407:0: style: The function 'vdbeSorterCompare' is never used. [unusedFunction]

^
Data/SQLite/src/sqlite3.c:98468:0: style: The function 'vdbeSorterCompareInt' is never used. [unusedFunction]

^
Data/SQLite/src/sqlite3.c:98426:0: style: The function 'vdbeSorterCompareText' is never used. [unusedFunction]

^
Foundation/wcelibcex-1.0/src/wce_abort.c:57:0: style: The function 'wceex_abort' is never used. [unusedFunction]

^
Foundation/wcelibcex-1.0/src/wce_access.c:92:0: style: The function 'wceex_access' is never used. [unusedFunction]

^
Foundation/wcelibcex-1.0/src/wce_bsearch.c:49:0: style: The function 'wceex_bsearch' is never used. [unusedFunction]

^
Foundation/wcelibcex-1.0/src/wce_directorymanagement.c:210:0: style: The function 'wceex_chdir' is never used. [unusedFunction]

^
Foundation/wcelibcex-1.0/src/wce_clock.c:65:0: style: The function 'wceex_clock' is never used. [unusedFunction]

^
Foundation/wcelibcex-1.0/src/wce_ctime.c:61:0: style: The function 'wceex_ctime' is never used. [unusedFunction]

^
Foundation/wcelibcex-1.0/src/wce_ctime.c:91:0: style: The function 'wceex_ctime_r' is never used. [unusedFunction]

^
Foundation/wcelibcex-1.0/src/wce_findfile.c:57:0: style: The function 'wceex_findclose' is never used. [unusedFunction]

^
Foundation/wcelibcex-1.0/src/wce_findfile.c:84:0: style: The function 'wceex_findfirst' is never used. [unusedFunction]

^
Foundation/wcelibcex-1.0/src/wce_findfile.c:145:0: style: The function 'wceex_findnext' is never used. [unusedFunction]

^
Foundation/wcelibcex-1.0/src/wce_path.c:450:0: style: The function 'wceex_fullpath' is never used. [unusedFunction]

^
Foundation/wcelibcex-1.0/src/wce_directorymanagement.c:85:0: style: The function 'wceex_getcwd' is never used. [unusedFunction]

^
Foundation/wcelibcex-1.0/src/wce_getenv.c:50:0: style: The function 'wceex_getenv' is never used. [unusedFunction]

^
Foundation/wcelibcex-1.0/src/wce_getopt.c:85:0: style: The function 'wceex_getopt' is never used. [unusedFunction]

^
Foundation/wcelibcex-1.0/src/wce_gettimeofday.c:39:0: style: The function 'wceex_gettimeofday' is never used. [unusedFunction]

^
Foundation/wcelibcex-1.0/src/wce_localtime.c:130:0: style: The function 'wceex_gmtime' is never used. [unusedFunction]

^
Foundation/wcelibcex-1.0/src/wce_lfind.c:58:0: style: The function 'wceex_lfind' is never used. [unusedFunction]

^
Foundation/wcelibcex-1.0/src/wce_path.c:169:0: style: The function 'wceex_makepath' is never used. [unusedFunction]

^
Foundation/wcelibcex-1.0/src/wce_mkdir.c:58:0: style: The function 'wceex_mkdir' is never used. [unusedFunction]

^
Foundation/wcelibcex-1.0/src/wce_rename.c:59:0: style: The function 'wceex_rename' is never used. [unusedFunction]

^
Foundation/wcelibcex-1.0/src/wce_rewind.c:64:0: style: The function 'wceex_rewind' is never used. [unusedFunction]

^
Foundation/wcelibcex-1.0/src/wce_rmdir.c:64:0: style: The function 'wceex_rmdir' is never used. [unusedFunction]

^
Foundation/wcelibcex-1.0/src/wce_setlocale.c:53:0: style: The function 'wceex_setlocale' is never used. [unusedFunction]

^
Foundation/wcelibcex-1.0/src/wce_path.c:51:0: style: The function 'wceex_splitpath' is never used. [unusedFunction]

^
Foundation/wcelibcex-1.0/src/wce_stat.c:69:0: style: The function 'wceex_stat' is never used. [unusedFunction]

^
Foundation/wcelibcex-1.0/src/wce_strerror.c:54:0: style: The function 'wceex_strerror' is never used. [unusedFunction]

^
Foundation/wcelibcex-1.0/src/wce_unlink.c:52:0: style: The function 'wceex_unlink' is never used. [unusedFunction]

^
Foundation/wcelibcex-1.0/src/wce_directorymanagement.c:142:0: style: The function 'wceex_wgetcwd' is never used. [unusedFunction]

^
Foundation/wcelibcex-1.0/src/wce_path.c:239:0: style: The function 'wceex_wmakepath' is never used. [unusedFunction]

^
Foundation/wcelibcex-1.0/src/wce_mkdir.c:104:0: style: The function 'wceex_wmkdir' is never used. [unusedFunction]

^
Foundation/wcelibcex-1.0/src/wce_path.c:110:0: style: The function 'wceex_wsplitpath' is never used. [unusedFunction]

^
Foundation/wcelibcex-1.0/src/wce_unlink.c:91:0: style: The function 'wceex_wunlink' is never used. [unusedFunction]

^
ActiveRecord/testsuite/src/WinCEDriver.cpp:18:0: style: The function 'wmain' is never used. [unusedFunction]

^
Foundation/src/zutil.c:32:0: style: The function 'zlibCompileFlags' is never used. [unusedFunction]

^
Foundation/src/zutil.c:27:0: style: The function 'zlibVersion' is never used. [unusedFunction]

^
Foundation/src/zutil.c:162:0: style: The function 'zmemcmp' is never used. [unusedFunction]

^
nofile:0:0: information: Cppcheck cannot find all the include files (use --check-config for details) [missingInclude]

